// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Lower_inv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        L_address0,
        L_ce0,
        L_q0,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_pp0_stage0 = 24'd4;
parameter    ap_ST_fsm_pp0_stage1 = 24'd8;
parameter    ap_ST_fsm_pp0_stage2 = 24'd16;
parameter    ap_ST_fsm_pp0_stage3 = 24'd32;
parameter    ap_ST_fsm_pp0_stage4 = 24'd64;
parameter    ap_ST_fsm_state13 = 24'd128;
parameter    ap_ST_fsm_state14 = 24'd256;
parameter    ap_ST_fsm_state15 = 24'd512;
parameter    ap_ST_fsm_state16 = 24'd1024;
parameter    ap_ST_fsm_state17 = 24'd2048;
parameter    ap_ST_fsm_state18 = 24'd4096;
parameter    ap_ST_fsm_state19 = 24'd8192;
parameter    ap_ST_fsm_state20 = 24'd16384;
parameter    ap_ST_fsm_state21 = 24'd32768;
parameter    ap_ST_fsm_state22 = 24'd65536;
parameter    ap_ST_fsm_state23 = 24'd131072;
parameter    ap_ST_fsm_state24 = 24'd262144;
parameter    ap_ST_fsm_state25 = 24'd524288;
parameter    ap_ST_fsm_state26 = 24'd1048576;
parameter    ap_ST_fsm_state27 = 24'd2097152;
parameter    ap_ST_fsm_state28 = 24'd4194304;
parameter    ap_ST_fsm_state29 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] L_address0;
output   L_ce0;
input  [31:0] L_q0;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;
output  [31:0] ap_return_6;
output  [31:0] ap_return_7;
output  [31:0] ap_return_8;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] L_address0;
reg L_ce0;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] sum_0_reg_148;
reg   [31:0] k_0_reg_160;
wire   [0:0] icmp_ln147_fu_214_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] add_ln147_fu_220_p2;
reg   [3:0] add_ln147_reg_726;
wire   [1:0] select_ln147_fu_238_p3;
reg   [1:0] select_ln147_reg_731;
wire   [1:0] select_ln147_1_fu_247_p3;
reg   [1:0] select_ln147_1_reg_740;
wire   [31:0] zext_ln147_fu_255_p1;
reg   [31:0] zext_ln147_reg_745;
wire   [4:0] sub_ln155_fu_280_p2;
reg   [4:0] sub_ln155_reg_750;
wire   [31:0] zext_ln159_fu_306_p1;
wire   [0:0] icmp_ln152_fu_310_p2;
reg   [0:0] icmp_ln152_reg_768;
wire   [0:0] icmp_ln154_fu_316_p2;
reg   [0:0] icmp_ln154_reg_772;
wire   [0:0] icmp_ln159_fu_437_p2;
reg   [0:0] icmp_ln159_reg_776;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln159_reg_776_pp0_iter1_reg;
wire   [0:0] icmp_ln166_fu_460_p2;
reg   [0:0] icmp_ln166_reg_785;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] grp_fu_175_p2;
reg   [31:0] tmp_s_reg_800;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state7_pp0_stage4_iter0;
wire    ap_block_state12_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire   [31:0] k_3_fu_496_p2;
reg   [31:0] k_3_reg_805;
wire   [31:0] grp_fu_170_p2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state14;
wire   [1:0] j_fu_656_p2;
wire    ap_CS_fsm_state29;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage4_subdone;
reg   [3:0] indvar_flatten_reg_115;
reg   [1:0] i_0_reg_126;
reg   [1:0] k_reg_137;
reg   [31:0] ap_phi_mux_k_0_phi_fu_163_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln155_fu_271_p1;
wire  signed [63:0] sext_ln166_fu_451_p1;
reg   [31:0] L_inv27_1_fu_58;
wire   [31:0] bitcast_ln168_1_fu_512_p1;
wire    ap_CS_fsm_state13;
reg   [31:0] L_inv26_1_fu_62;
reg   [31:0] L_inv_1_0_1_fu_66;
wire   [31:0] L_inv_1_0_3_fu_548_p3;
wire    ap_block_pp0_stage1;
reg   [31:0] L_inv28_1_fu_70;
wire   [31:0] grp_fu_180_p2;
reg   [31:0] L_inv_1_2_1_fu_74;
wire   [31:0] select_ln153_3_fu_330_p3;
wire   [0:0] select_ln147_2_fu_298_p3;
wire   [31:0] L_inv_1_2_4_fu_524_p3;
reg   [31:0] L_inv_0_2_1_fu_78;
wire   [31:0] select_ln153_1_fu_356_p3;
wire   [31:0] L_inv_0_2_4_fu_579_p3;
reg   [31:0] L_inv_0_1_1_fu_82;
wire   [31:0] select_ln153_fu_348_p3;
wire   [31:0] L_inv_0_1_4_fu_587_p3;
reg   [31:0] L_inv_0_0_1_fu_86;
wire   [31:0] L_inv_0_0_3_fu_603_p3;
reg   [31:0] L_inv_1_1_1_fu_90;
wire   [31:0] select_ln153_2_fu_322_p3;
wire   [31:0] L_inv_1_1_4_fu_532_p3;
wire   [31:0] grp_fu_175_p1;
reg   [1:0] grp_fu_186_p0;
wire   [0:0] icmp_ln149_fu_232_p2;
wire   [1:0] i_fu_226_p2;
wire   [3:0] tmp_50_fu_263_p3;
wire   [4:0] zext_ln155_2_fu_276_p1;
wire   [4:0] zext_ln155_1_fu_259_p1;
wire   [0:0] icmp_ln153_fu_286_p2;
wire   [0:0] icmp_ln153_2_fu_292_p2;
wire   [0:0] grp_fu_186_p2;
wire   [4:0] trunc_ln166_fu_442_p1;
wire   [4:0] add_ln166_fu_446_p2;
wire   [1:0] trunc_ln166_1_fu_456_p1;
wire   [31:0] tmp_48_fu_466_p5;
wire   [31:0] tmp_49_fu_477_p5;
wire    ap_block_pp0_stage4;
wire   [31:0] bitcast_ln168_fu_502_p1;
wire   [31:0] xor_ln168_fu_506_p2;
wire   [0:0] grp_fu_209_p2;
wire   [31:0] select_ln168_2_fu_516_p3;
wire   [31:0] select_ln168_3_fu_540_p3;
wire   [31:0] select_ln168_fu_571_p3;
wire   [31:0] select_ln168_1_fu_595_p3;
reg   [23:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state10_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_state11_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_889;
reg    ap_condition_893;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

inverse_top_fadd_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
inverse_top_fadd_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_0_reg_148),
    .din1(tmp_s_reg_800),
    .ce(1'b1),
    .dout(grp_fu_170_p2)
);

inverse_top_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
inverse_top_fmul_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(L_q0),
    .din1(grp_fu_175_p1),
    .ce(1'b1),
    .dout(grp_fu_175_p2)
);

inverse_top_fdiv_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
inverse_top_fdiv_dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd1065353216),
    .din1(L_q0),
    .ce(1'b1),
    .dout(grp_fu_180_p2)
);

inverse_top_mux_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
inverse_top_mux_3eOg_U4(
    .din0(L_inv_0_0_1_fu_86),
    .din1(L_inv_0_1_1_fu_82),
    .din2(L_inv_0_2_1_fu_78),
    .din3(select_ln147_reg_731),
    .dout(tmp_48_fu_466_p5)
);

inverse_top_mux_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
inverse_top_mux_3eOg_U5(
    .din0(L_inv_1_0_1_fu_66),
    .din1(L_inv_1_1_1_fu_90),
    .din2(L_inv_1_2_1_fu_74),
    .din3(select_ln147_reg_731),
    .dout(tmp_49_fu_477_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln154_fu_316_p2 == 1'd0) & (icmp_ln152_fu_310_p2 == 1'd0) & (icmp_ln147_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln154_fu_316_p2 == 1'd0) & (icmp_ln152_fu_310_p2 == 1'd0) & (icmp_ln147_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln147_reg_731 == 2'd0) & ~(select_ln147_reg_731 == 2'd1))) begin
        if ((1'b1 == ap_condition_893)) begin
            L_inv28_1_fu_70 <= grp_fu_180_p2;
        end else if ((1'b1 == ap_condition_889)) begin
            L_inv28_1_fu_70 <= bitcast_ln168_1_fu_512_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln154_reg_772 == 1'd1) & (icmp_ln152_reg_768 == 1'd0) & (select_ln147_reg_731 == 2'd0) & (1'b1 == ap_CS_fsm_state29))) begin
        L_inv_0_0_1_fu_86 <= grp_fu_180_p2;
    end else if (((select_ln147_1_reg_740 == 2'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        L_inv_0_0_1_fu_86 <= L_inv_0_0_3_fu_603_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln147_1_reg_740 == 2'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        L_inv_0_1_1_fu_82 <= L_inv_0_1_4_fu_587_p3;
    end else if (((icmp_ln152_fu_310_p2 == 1'd1) & (icmp_ln147_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (select_ln147_2_fu_298_p3 == 1'd1))) begin
        L_inv_0_1_1_fu_82 <= select_ln153_fu_348_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln147_1_reg_740 == 2'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        L_inv_0_2_1_fu_78 <= L_inv_0_2_4_fu_579_p3;
    end else if (((icmp_ln152_fu_310_p2 == 1'd1) & (icmp_ln147_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (select_ln147_2_fu_298_p3 == 1'd1))) begin
        L_inv_0_2_1_fu_78 <= select_ln153_1_fu_356_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln154_reg_772 == 1'd1) & (icmp_ln152_reg_768 == 1'd0) & (select_ln147_reg_731 == 2'd1) & (1'b1 == ap_CS_fsm_state29))) begin
        L_inv_1_1_1_fu_90 <= grp_fu_180_p2;
    end else if (((select_ln147_1_reg_740 == 2'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        L_inv_1_1_1_fu_90 <= L_inv_1_1_4_fu_532_p3;
    end else if (((icmp_ln152_fu_310_p2 == 1'd1) & (select_ln147_2_fu_298_p3 == 1'd0) & (icmp_ln147_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        L_inv_1_1_1_fu_90 <= select_ln153_2_fu_322_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln147_1_reg_740 == 2'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        L_inv_1_2_1_fu_74 <= L_inv_1_2_4_fu_524_p3;
    end else if (((icmp_ln152_fu_310_p2 == 1'd1) & (select_ln147_2_fu_298_p3 == 1'd0) & (icmp_ln147_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        L_inv_1_2_1_fu_74 <= select_ln153_3_fu_330_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        i_0_reg_126 <= select_ln147_1_reg_740;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_126 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        indvar_flatten_reg_115 <= add_ln147_reg_726;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_115 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln154_fu_316_p2 == 1'd0) & (icmp_ln152_fu_310_p2 == 1'd0) & (icmp_ln147_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_reg_160 <= zext_ln159_fu_306_p1;
    end else if (((icmp_ln159_reg_776 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_0_reg_160 <= k_3_reg_805;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        k_reg_137 <= j_fu_656_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_137 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln154_fu_316_p2 == 1'd0) & (icmp_ln152_fu_310_p2 == 1'd0) & (icmp_ln147_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_0_reg_148 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln159_reg_776_pp0_iter1_reg == 1'd1))) begin
        sum_0_reg_148 <= grp_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln147_1_reg_740 == 2'd1) & ~(select_ln147_1_reg_740 == 2'd0) & (select_ln147_reg_731 == 2'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        L_inv26_1_fu_62 <= bitcast_ln168_1_fu_512_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(select_ln147_1_reg_740 == 2'd1) & ~(select_ln147_1_reg_740 == 2'd0) & (select_ln147_reg_731 == 2'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        L_inv27_1_fu_58 <= bitcast_ln168_1_fu_512_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln147_1_reg_740 == 2'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        L_inv_1_0_1_fu_66 <= L_inv_1_0_3_fu_548_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln147_reg_726 <= add_ln147_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln147_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln152_reg_768 <= icmp_ln152_fu_310_p2;
        select_ln147_1_reg_740 <= select_ln147_1_fu_247_p3;
        select_ln147_reg_731 <= select_ln147_fu_238_p3;
        sub_ln155_reg_750 <= sub_ln155_fu_280_p2;
        zext_ln147_reg_745[1 : 0] <= zext_ln147_fu_255_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln152_fu_310_p2 == 1'd0) & (icmp_ln147_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln154_reg_772 <= icmp_ln154_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln159_reg_776 <= icmp_ln159_fu_437_p2;
        icmp_ln159_reg_776_pp0_iter1_reg <= icmp_ln159_reg_776;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln159_fu_437_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln166_reg_785 <= icmp_ln166_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln159_reg_776 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        k_3_reg_805 <= k_3_fu_496_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln159_reg_776 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        tmp_s_reg_800 <= grp_fu_175_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        L_address0 = sext_ln166_fu_451_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        L_address0 = zext_ln155_fu_271_p1;
    end else begin
        L_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        L_ce0 = 1'b1;
    end else begin
        L_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln159_fu_437_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln147_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln159_reg_776 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_k_0_phi_fu_163_p4 = k_3_reg_805;
    end else begin
        ap_phi_mux_k_0_phi_fu_163_p4 = k_0_reg_160;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((select_ln147_1_reg_740 == 2'd1) & (1'b1 == ap_CS_fsm_state13)) | ((select_ln147_1_reg_740 == 2'd0) & (1'b1 == ap_CS_fsm_state13)))) begin
        grp_fu_186_p0 = select_ln147_reg_731;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_186_p0 = select_ln147_fu_238_p3;
    end else begin
        grp_fu_186_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln147_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln152_fu_310_p2 == 1'd1) & (icmp_ln147_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else if (((icmp_ln154_fu_316_p2 == 1'd0) & (icmp_ln152_fu_310_p2 == 1'd0) & (icmp_ln147_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln159_fu_437_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln159_fu_437_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign L_inv_0_0_3_fu_603_p3 = ((grp_fu_186_p2[0:0] === 1'b1) ? L_inv_0_0_1_fu_86 : select_ln168_1_fu_595_p3);

assign L_inv_0_1_4_fu_587_p3 = ((grp_fu_186_p2[0:0] === 1'b1) ? bitcast_ln168_1_fu_512_p1 : L_inv_0_1_1_fu_82);

assign L_inv_0_2_4_fu_579_p3 = ((grp_fu_186_p2[0:0] === 1'b1) ? L_inv_0_2_1_fu_78 : select_ln168_fu_571_p3);

assign L_inv_1_0_3_fu_548_p3 = ((grp_fu_186_p2[0:0] === 1'b1) ? L_inv_1_0_1_fu_66 : select_ln168_3_fu_540_p3);

assign L_inv_1_1_4_fu_532_p3 = ((grp_fu_186_p2[0:0] === 1'b1) ? bitcast_ln168_1_fu_512_p1 : L_inv_1_1_1_fu_90);

assign L_inv_1_2_4_fu_524_p3 = ((grp_fu_186_p2[0:0] === 1'b1) ? L_inv_1_2_1_fu_74 : select_ln168_2_fu_516_p3);

assign add_ln147_fu_220_p2 = (indvar_flatten_reg_115 + 4'd1);

assign add_ln166_fu_446_p2 = (trunc_ln166_fu_442_p1 + sub_ln155_reg_750);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd23];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_889 = (~(select_ln147_1_reg_740 == 2'd1) & ~(select_ln147_1_reg_740 == 2'd0) & (1'b1 == ap_CS_fsm_state13));
end

always @ (*) begin
    ap_condition_893 = ((icmp_ln154_reg_772 == 1'd1) & (icmp_ln152_reg_768 == 1'd0) & (1'b1 == ap_CS_fsm_state29));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = L_inv26_1_fu_62;

assign ap_return_1 = L_inv27_1_fu_58;

assign ap_return_2 = L_inv28_1_fu_70;

assign ap_return_3 = L_inv_0_0_1_fu_86;

assign ap_return_4 = L_inv_0_1_1_fu_82;

assign ap_return_5 = L_inv_0_2_1_fu_78;

assign ap_return_6 = L_inv_1_0_1_fu_66;

assign ap_return_7 = L_inv_1_1_1_fu_90;

assign ap_return_8 = L_inv_1_2_1_fu_74;

assign bitcast_ln168_1_fu_512_p1 = xor_ln168_fu_506_p2;

assign bitcast_ln168_fu_502_p1 = sum_0_reg_148;

assign grp_fu_175_p1 = ((icmp_ln166_reg_785[0:0] === 1'b1) ? tmp_48_fu_466_p5 : tmp_49_fu_477_p5);

assign grp_fu_186_p2 = ((grp_fu_186_p0 == 2'd1) ? 1'b1 : 1'b0);

assign grp_fu_209_p2 = ((select_ln147_reg_731 == 2'd0) ? 1'b1 : 1'b0);

assign i_fu_226_p2 = (i_0_reg_126 + 2'd1);

assign icmp_ln147_fu_214_p2 = ((indvar_flatten_reg_115 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln149_fu_232_p2 = ((k_reg_137 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln152_fu_310_p2 = ((select_ln147_1_fu_247_p3 < select_ln147_fu_238_p3) ? 1'b1 : 1'b0);

assign icmp_ln153_2_fu_292_p2 = ((i_0_reg_126 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln153_fu_286_p2 = ((i_fu_226_p2 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln154_fu_316_p2 = ((select_ln147_1_fu_247_p3 == select_ln147_fu_238_p3) ? 1'b1 : 1'b0);

assign icmp_ln159_fu_437_p2 = (($signed(ap_phi_mux_k_0_phi_fu_163_p4) < $signed(zext_ln147_reg_745)) ? 1'b1 : 1'b0);

assign icmp_ln166_fu_460_p2 = ((trunc_ln166_1_fu_456_p1 == 2'd0) ? 1'b1 : 1'b0);

assign j_fu_656_p2 = (select_ln147_reg_731 + 2'd1);

assign k_3_fu_496_p2 = (32'd1 + k_0_reg_160);

assign select_ln147_1_fu_247_p3 = ((icmp_ln149_fu_232_p2[0:0] === 1'b1) ? i_fu_226_p2 : i_0_reg_126);

assign select_ln147_2_fu_298_p3 = ((icmp_ln149_fu_232_p2[0:0] === 1'b1) ? icmp_ln153_fu_286_p2 : icmp_ln153_2_fu_292_p2);

assign select_ln147_fu_238_p3 = ((icmp_ln149_fu_232_p2[0:0] === 1'b1) ? 2'd0 : k_reg_137);

assign select_ln153_1_fu_356_p3 = ((grp_fu_186_p2[0:0] === 1'b1) ? L_inv_0_2_1_fu_78 : 32'd0);

assign select_ln153_2_fu_322_p3 = ((grp_fu_186_p2[0:0] === 1'b1) ? 32'd0 : L_inv_1_1_1_fu_90);

assign select_ln153_3_fu_330_p3 = ((grp_fu_186_p2[0:0] === 1'b1) ? L_inv_1_2_1_fu_74 : 32'd0);

assign select_ln153_fu_348_p3 = ((grp_fu_186_p2[0:0] === 1'b1) ? 32'd0 : L_inv_0_1_1_fu_82);

assign select_ln168_1_fu_595_p3 = ((grp_fu_209_p2[0:0] === 1'b1) ? bitcast_ln168_1_fu_512_p1 : L_inv_0_0_1_fu_86);

assign select_ln168_2_fu_516_p3 = ((grp_fu_209_p2[0:0] === 1'b1) ? L_inv_1_2_1_fu_74 : bitcast_ln168_1_fu_512_p1);

assign select_ln168_3_fu_540_p3 = ((grp_fu_209_p2[0:0] === 1'b1) ? bitcast_ln168_1_fu_512_p1 : L_inv_1_0_1_fu_66);

assign select_ln168_fu_571_p3 = ((grp_fu_209_p2[0:0] === 1'b1) ? L_inv_0_2_1_fu_78 : bitcast_ln168_1_fu_512_p1);

assign sext_ln166_fu_451_p1 = $signed(add_ln166_fu_446_p2);

assign sub_ln155_fu_280_p2 = (zext_ln155_2_fu_276_p1 - zext_ln155_1_fu_259_p1);

assign tmp_50_fu_263_p3 = {{select_ln147_1_fu_247_p3}, {2'd0}};

assign trunc_ln166_1_fu_456_p1 = ap_phi_mux_k_0_phi_fu_163_p4[1:0];

assign trunc_ln166_fu_442_p1 = ap_phi_mux_k_0_phi_fu_163_p4[4:0];

assign xor_ln168_fu_506_p2 = (bitcast_ln168_fu_502_p1 ^ 32'd2147483648);

assign zext_ln147_fu_255_p1 = select_ln147_1_fu_247_p3;

assign zext_ln155_1_fu_259_p1 = select_ln147_1_fu_247_p3;

assign zext_ln155_2_fu_276_p1 = tmp_50_fu_263_p3;

assign zext_ln155_fu_271_p1 = tmp_50_fu_263_p3;

assign zext_ln159_fu_306_p1 = select_ln147_fu_238_p3;

always @ (posedge ap_clk) begin
    zext_ln147_reg_745[31:2] <= 30'b000000000000000000000000000000;
end

endmodule //Lower_inv
