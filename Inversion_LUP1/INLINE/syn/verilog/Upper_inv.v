// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Upper_inv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        U_address0,
        U_ce0,
        U_q0,
        U_inv_address0,
        U_inv_ce0,
        U_inv_we0,
        U_inv_d0,
        U_inv_q0,
        U_inv_address1,
        U_inv_ce1,
        U_inv_we1,
        U_inv_d1
);

parameter    ap_ST_fsm_state1 = 30'd1;
parameter    ap_ST_fsm_state2 = 30'd2;
parameter    ap_ST_fsm_state3 = 30'd4;
parameter    ap_ST_fsm_state4 = 30'd8;
parameter    ap_ST_fsm_pp1_stage0 = 30'd16;
parameter    ap_ST_fsm_state22 = 30'd32;
parameter    ap_ST_fsm_state23 = 30'd64;
parameter    ap_ST_fsm_state24 = 30'd128;
parameter    ap_ST_fsm_pp2_stage0 = 30'd256;
parameter    ap_ST_fsm_pp2_stage1 = 30'd512;
parameter    ap_ST_fsm_pp2_stage2 = 30'd1024;
parameter    ap_ST_fsm_pp2_stage3 = 30'd2048;
parameter    ap_ST_fsm_pp2_stage4 = 30'd4096;
parameter    ap_ST_fsm_state35 = 30'd8192;
parameter    ap_ST_fsm_state36 = 30'd16384;
parameter    ap_ST_fsm_state37 = 30'd32768;
parameter    ap_ST_fsm_state38 = 30'd65536;
parameter    ap_ST_fsm_state39 = 30'd131072;
parameter    ap_ST_fsm_state40 = 30'd262144;
parameter    ap_ST_fsm_state41 = 30'd524288;
parameter    ap_ST_fsm_state42 = 30'd1048576;
parameter    ap_ST_fsm_state43 = 30'd2097152;
parameter    ap_ST_fsm_state44 = 30'd4194304;
parameter    ap_ST_fsm_state45 = 30'd8388608;
parameter    ap_ST_fsm_state46 = 30'd16777216;
parameter    ap_ST_fsm_state47 = 30'd33554432;
parameter    ap_ST_fsm_state48 = 30'd67108864;
parameter    ap_ST_fsm_state49 = 30'd134217728;
parameter    ap_ST_fsm_state50 = 30'd268435456;
parameter    ap_ST_fsm_state51 = 30'd536870912;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] U_address0;
output   U_ce0;
input  [31:0] U_q0;
output  [3:0] U_inv_address0;
output   U_inv_ce0;
output   U_inv_we0;
output  [31:0] U_inv_d0;
input  [31:0] U_inv_q0;
output  [3:0] U_inv_address1;
output   U_inv_ce1;
output   U_inv_we1;
output  [31:0] U_inv_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] U_address0;
reg U_ce0;
reg[3:0] U_inv_address0;
reg U_inv_ce0;
reg U_inv_we0;
reg[3:0] U_inv_address1;
reg U_inv_ce1;
reg U_inv_we1;
reg[31:0] U_inv_d1;

(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] i1_0_reg_161;
reg   [31:0] sum_0_reg_195;
reg   [31:0] k_0_reg_207;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
wire    ap_block_state8_pp1_stage0_iter3;
wire    ap_block_state9_pp1_stage0_iter4;
wire    ap_block_state10_pp1_stage0_iter5;
wire    ap_block_state11_pp1_stage0_iter6;
wire    ap_block_state12_pp1_stage0_iter7;
wire    ap_block_state13_pp1_stage0_iter8;
wire    ap_block_state14_pp1_stage0_iter9;
wire    ap_block_state15_pp1_stage0_iter10;
wire    ap_block_state16_pp1_stage0_iter11;
wire    ap_block_state17_pp1_stage0_iter12;
wire    ap_block_state18_pp1_stage0_iter13;
wire    ap_block_state19_pp1_stage0_iter14;
wire    ap_block_state20_pp1_stage0_iter15;
wire    ap_block_state21_pp1_stage0_iter16;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln192_reg_488;
wire    ap_CS_fsm_pp2_stage1;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state26_pp2_stage1_iter0;
wire    ap_block_state31_pp2_stage1_iter1;
wire    ap_block_pp2_stage1_11001;
reg   [0:0] icmp_ln205_reg_555;
wire    ap_CS_fsm_state36;
wire   [1:0] i_7_fu_247_p2;
reg   [1:0] i_7_reg_478;
wire    ap_CS_fsm_state2;
wire  signed [4:0] sub_ln188_fu_269_p2;
reg  signed [4:0] sub_ln188_reg_483;
wire   [0:0] icmp_ln183_fu_241_p2;
wire   [0:0] icmp_ln192_fu_301_p2;
reg   [0:0] icmp_ln192_reg_488_pp1_iter1_reg;
reg   [0:0] icmp_ln192_reg_488_pp1_iter2_reg;
reg   [0:0] icmp_ln192_reg_488_pp1_iter3_reg;
reg   [0:0] icmp_ln192_reg_488_pp1_iter4_reg;
reg   [0:0] icmp_ln192_reg_488_pp1_iter5_reg;
reg   [0:0] icmp_ln192_reg_488_pp1_iter6_reg;
reg   [0:0] icmp_ln192_reg_488_pp1_iter7_reg;
reg   [0:0] icmp_ln192_reg_488_pp1_iter8_reg;
reg   [0:0] icmp_ln192_reg_488_pp1_iter9_reg;
reg   [0:0] icmp_ln192_reg_488_pp1_iter10_reg;
reg   [0:0] icmp_ln192_reg_488_pp1_iter11_reg;
reg   [0:0] icmp_ln192_reg_488_pp1_iter12_reg;
reg   [0:0] icmp_ln192_reg_488_pp1_iter13_reg;
reg   [0:0] icmp_ln192_reg_488_pp1_iter14_reg;
reg   [0:0] icmp_ln192_reg_488_pp1_iter15_reg;
wire   [1:0] i_fu_307_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] zext_ln195_fu_321_p1;
reg   [63:0] zext_ln195_reg_497;
reg   [63:0] zext_ln195_reg_497_pp1_iter1_reg;
reg   [63:0] zext_ln195_reg_497_pp1_iter2_reg;
reg   [63:0] zext_ln195_reg_497_pp1_iter3_reg;
reg   [63:0] zext_ln195_reg_497_pp1_iter4_reg;
reg   [63:0] zext_ln195_reg_497_pp1_iter5_reg;
reg   [63:0] zext_ln195_reg_497_pp1_iter6_reg;
reg   [63:0] zext_ln195_reg_497_pp1_iter7_reg;
reg   [63:0] zext_ln195_reg_497_pp1_iter8_reg;
reg   [63:0] zext_ln195_reg_497_pp1_iter9_reg;
reg   [63:0] zext_ln195_reg_497_pp1_iter10_reg;
reg   [63:0] zext_ln195_reg_497_pp1_iter11_reg;
reg   [63:0] zext_ln195_reg_497_pp1_iter12_reg;
reg   [63:0] zext_ln195_reg_497_pp1_iter13_reg;
reg   [63:0] zext_ln195_reg_497_pp1_iter14_reg;
reg   [63:0] zext_ln195_reg_497_pp1_iter15_reg;
wire   [1:0] i_8_fu_332_p2;
reg   [1:0] i_8_reg_510;
wire    ap_CS_fsm_state23;
wire   [31:0] zext_ln198_fu_338_p1;
reg   [31:0] zext_ln198_reg_515;
wire   [0:0] icmp_ln198_fu_326_p2;
wire   [4:0] zext_ln211_1_fu_342_p1;
reg   [4:0] zext_ln211_1_reg_520;
reg   [3:0] U_addr_1_reg_526;
wire   [0:0] icmp_ln200_fu_359_p2;
wire    ap_CS_fsm_state24;
wire   [1:0] j_fu_365_p2;
reg   [1:0] j_reg_535;
wire   [31:0] zext_ln200_fu_371_p1;
wire   [4:0] sub_ln209_fu_391_p2;
reg   [4:0] sub_ln209_reg_545;
reg   [3:0] U_inv_addr_6_reg_550;
wire   [0:0] icmp_ln205_fu_407_p2;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state25_pp2_stage0_iter0;
wire    ap_block_state30_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln205_reg_555_pp2_iter1_reg;
wire   [31:0] grp_fu_222_p2;
reg   [31:0] tmp_s_reg_574;
wire    ap_CS_fsm_pp2_stage4;
wire    ap_block_state29_pp2_stage4_iter0;
wire    ap_block_state34_pp2_stage4_iter1;
wire    ap_block_pp2_stage4_11001;
wire   [31:0] k_2_fu_454_p2;
reg   [31:0] k_2_reg_579;
wire   [31:0] grp_fu_217_p2;
reg    ap_enable_reg_pp2_iter1;
wire   [31:0] bitcast_ln211_1_fu_470_p1;
wire    ap_CS_fsm_state4;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter13;
reg    ap_enable_reg_pp1_iter14;
reg    ap_enable_reg_pp1_iter15;
reg    ap_enable_reg_pp1_iter16;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state25;
wire    ap_block_pp2_stage4_subdone;
reg   [1:0] i_0_reg_150;
wire    ap_CS_fsm_state3;
reg   [1:0] indvars_iv_reg_172;
wire    ap_CS_fsm_state22;
reg   [1:0] k_reg_184;
wire    ap_CS_fsm_state51;
reg   [31:0] ap_phi_mux_k_0_phi_fu_210_p4;
wire    ap_block_pp2_stage0;
wire  signed [63:0] sext_ln188_fu_275_p1;
wire  signed [63:0] sext_ln188_1_fu_286_p1;
wire  signed [63:0] sext_ln188_2_fu_296_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln211_fu_354_p1;
wire  signed [63:0] sext_ln211_fu_402_p1;
wire  signed [63:0] sext_ln209_fu_439_p1;
wire  signed [63:0] sext_ln209_1_fu_449_p1;
wire   [31:0] grp_fu_228_p2;
wire    ap_CS_fsm_state35;
wire    ap_block_pp2_stage1;
reg   [31:0] grp_fu_228_p0;
wire   [3:0] tmp_46_fu_257_p3;
wire   [4:0] zext_ln188_1_fu_265_p1;
wire   [4:0] zext_ln188_fu_253_p1;
wire   [4:0] add_ln188_fu_280_p2;
wire   [4:0] add_ln188_1_fu_291_p2;
wire   [3:0] tmp_47_fu_313_p3;
wire   [3:0] tmp_48_fu_346_p3;
wire   [3:0] tmp_49_fu_379_p3;
wire   [4:0] zext_ln209_1_fu_387_p1;
wire   [4:0] zext_ln209_fu_375_p1;
wire   [4:0] add_ln211_fu_397_p2;
wire   [2:0] trunc_ln209_1_fu_416_p1;
wire   [4:0] sext_ln209_1_cast_fu_420_p3;
wire   [4:0] trunc_ln209_fu_412_p1;
wire   [4:0] sub_ln209_1_fu_428_p2;
wire   [4:0] add_ln209_fu_434_p2;
wire   [4:0] add_ln209_1_fu_444_p2;
wire    ap_block_pp2_stage4;
wire   [31:0] bitcast_ln211_fu_460_p1;
wire   [31:0] xor_ln211_fu_464_p2;
reg   [29:0] ap_NS_fsm;
wire    ap_block_pp2_stage1_subdone;
wire    ap_block_state27_pp2_stage2_iter0;
wire    ap_block_state32_pp2_stage2_iter1;
wire    ap_block_pp2_stage2_subdone;
wire    ap_block_state28_pp2_stage3_iter0;
wire    ap_block_state33_pp2_stage3_iter1;
wire    ap_block_pp2_stage3_subdone;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 30'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
#0 ap_enable_reg_pp1_iter15 = 1'b0;
#0 ap_enable_reg_pp1_iter16 = 1'b0;
end

inverse_top_fadd_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
inverse_top_fadd_bkb_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_0_reg_195),
    .din1(tmp_s_reg_574),
    .ce(1'b1),
    .dout(grp_fu_217_p2)
);

inverse_top_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
inverse_top_fmul_cud_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(U_q0),
    .din1(U_inv_q0),
    .ce(1'b1),
    .dout(grp_fu_222_p2)
);

inverse_top_fdiv_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
inverse_top_fdiv_dEe_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_228_p0),
    .din1(U_q0),
    .ce(1'b1),
    .dout(grp_fu_228_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state5)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter16 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state25) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln200_fu_359_p2 == 1'd0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage4_subdone) & (1'b1 == ap_CS_fsm_pp2_stage4))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln200_fu_359_p2 == 1'd0))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i1_0_reg_161 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln192_fu_301_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i1_0_reg_161 <= i_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_150 <= i_7_reg_478;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_150 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        indvars_iv_reg_172 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln200_fu_359_p2 == 1'd1))) begin
        indvars_iv_reg_172 <= i_8_reg_510;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln205_reg_555 == 1'd1))) begin
        k_0_reg_207 <= k_2_reg_579;
    end else if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln200_fu_359_p2 == 1'd0))) begin
        k_0_reg_207 <= zext_ln200_fu_371_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        k_reg_184 <= j_reg_535;
    end else if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln198_fu_326_p2 == 1'd0))) begin
        k_reg_184 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage4_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage4) & (icmp_ln205_reg_555_pp2_iter1_reg == 1'd1))) begin
        sum_0_reg_195 <= grp_fu_217_p2;
    end else if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln200_fu_359_p2 == 1'd0))) begin
        sum_0_reg_195 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln198_fu_326_p2 == 1'd0))) begin
        U_addr_1_reg_526[3 : 2] <= zext_ln211_fu_354_p1[3 : 2];
        zext_ln198_reg_515[1 : 0] <= zext_ln198_fu_338_p1[1 : 0];
        zext_ln211_1_reg_520[1 : 0] <= zext_ln211_1_fu_342_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln200_fu_359_p2 == 1'd0))) begin
        U_inv_addr_6_reg_550 <= sext_ln211_fu_402_p1;
        sub_ln209_reg_545 <= sub_ln209_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_7_reg_478 <= i_7_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_8_reg_510 <= i_8_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln192_reg_488 <= icmp_ln192_fu_301_p2;
        icmp_ln192_reg_488_pp1_iter1_reg <= icmp_ln192_reg_488;
        zext_ln195_reg_497_pp1_iter1_reg[3 : 2] <= zext_ln195_reg_497[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln192_reg_488_pp1_iter10_reg <= icmp_ln192_reg_488_pp1_iter9_reg;
        icmp_ln192_reg_488_pp1_iter11_reg <= icmp_ln192_reg_488_pp1_iter10_reg;
        icmp_ln192_reg_488_pp1_iter12_reg <= icmp_ln192_reg_488_pp1_iter11_reg;
        icmp_ln192_reg_488_pp1_iter13_reg <= icmp_ln192_reg_488_pp1_iter12_reg;
        icmp_ln192_reg_488_pp1_iter14_reg <= icmp_ln192_reg_488_pp1_iter13_reg;
        icmp_ln192_reg_488_pp1_iter15_reg <= icmp_ln192_reg_488_pp1_iter14_reg;
        icmp_ln192_reg_488_pp1_iter2_reg <= icmp_ln192_reg_488_pp1_iter1_reg;
        icmp_ln192_reg_488_pp1_iter3_reg <= icmp_ln192_reg_488_pp1_iter2_reg;
        icmp_ln192_reg_488_pp1_iter4_reg <= icmp_ln192_reg_488_pp1_iter3_reg;
        icmp_ln192_reg_488_pp1_iter5_reg <= icmp_ln192_reg_488_pp1_iter4_reg;
        icmp_ln192_reg_488_pp1_iter6_reg <= icmp_ln192_reg_488_pp1_iter5_reg;
        icmp_ln192_reg_488_pp1_iter7_reg <= icmp_ln192_reg_488_pp1_iter6_reg;
        icmp_ln192_reg_488_pp1_iter8_reg <= icmp_ln192_reg_488_pp1_iter7_reg;
        icmp_ln192_reg_488_pp1_iter9_reg <= icmp_ln192_reg_488_pp1_iter8_reg;
        zext_ln195_reg_497_pp1_iter10_reg[3 : 2] <= zext_ln195_reg_497_pp1_iter9_reg[3 : 2];
        zext_ln195_reg_497_pp1_iter11_reg[3 : 2] <= zext_ln195_reg_497_pp1_iter10_reg[3 : 2];
        zext_ln195_reg_497_pp1_iter12_reg[3 : 2] <= zext_ln195_reg_497_pp1_iter11_reg[3 : 2];
        zext_ln195_reg_497_pp1_iter13_reg[3 : 2] <= zext_ln195_reg_497_pp1_iter12_reg[3 : 2];
        zext_ln195_reg_497_pp1_iter14_reg[3 : 2] <= zext_ln195_reg_497_pp1_iter13_reg[3 : 2];
        zext_ln195_reg_497_pp1_iter15_reg[3 : 2] <= zext_ln195_reg_497_pp1_iter14_reg[3 : 2];
        zext_ln195_reg_497_pp1_iter2_reg[3 : 2] <= zext_ln195_reg_497_pp1_iter1_reg[3 : 2];
        zext_ln195_reg_497_pp1_iter3_reg[3 : 2] <= zext_ln195_reg_497_pp1_iter2_reg[3 : 2];
        zext_ln195_reg_497_pp1_iter4_reg[3 : 2] <= zext_ln195_reg_497_pp1_iter3_reg[3 : 2];
        zext_ln195_reg_497_pp1_iter5_reg[3 : 2] <= zext_ln195_reg_497_pp1_iter4_reg[3 : 2];
        zext_ln195_reg_497_pp1_iter6_reg[3 : 2] <= zext_ln195_reg_497_pp1_iter5_reg[3 : 2];
        zext_ln195_reg_497_pp1_iter7_reg[3 : 2] <= zext_ln195_reg_497_pp1_iter6_reg[3 : 2];
        zext_ln195_reg_497_pp1_iter8_reg[3 : 2] <= zext_ln195_reg_497_pp1_iter7_reg[3 : 2];
        zext_ln195_reg_497_pp1_iter9_reg[3 : 2] <= zext_ln195_reg_497_pp1_iter8_reg[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln205_reg_555 <= icmp_ln205_fu_407_p2;
        icmp_ln205_reg_555_pp2_iter1_reg <= icmp_ln205_reg_555;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        j_reg_535 <= j_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage4_11001) & (1'b1 == ap_CS_fsm_pp2_stage4) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln205_reg_555 == 1'd1))) begin
        k_2_reg_579 <= k_2_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln183_fu_241_p2 == 1'd0))) begin
        sub_ln188_reg_483 <= sub_ln188_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage4_11001) & (1'b1 == ap_CS_fsm_pp2_stage4) & (icmp_ln205_reg_555 == 1'd1))) begin
        tmp_s_reg_574 <= grp_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln192_fu_301_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        zext_ln195_reg_497[3 : 2] <= zext_ln195_fu_321_p1[3 : 2];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        U_address0 = U_addr_1_reg_526;
    end else if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        U_address0 = sext_ln209_fu_439_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        U_address0 = zext_ln195_fu_321_p1;
    end else begin
        U_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
        U_ce0 = 1'b1;
    end else begin
        U_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        U_inv_address0 = sext_ln209_1_fu_449_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        U_inv_address0 = sext_ln188_2_fu_296_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        U_inv_address0 = sext_ln188_fu_275_p1;
    end else begin
        U_inv_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        U_inv_address1 = U_inv_addr_6_reg_550;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter16 == 1'b1))) begin
        U_inv_address1 = zext_ln195_reg_497_pp1_iter15_reg;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        U_inv_address1 = sext_ln188_1_fu_286_p1;
    end else begin
        U_inv_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
        U_inv_ce0 = 1'b1;
    end else begin
        U_inv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp1_iter16 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        U_inv_ce1 = 1'b1;
    end else begin
        U_inv_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter16 == 1'b1)))) begin
        U_inv_d1 = grp_fu_228_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        U_inv_d1 = 32'd0;
    end else begin
        U_inv_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln183_fu_241_p2 == 1'd0)))) begin
        U_inv_we0 = 1'b1;
    end else begin
        U_inv_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln183_fu_241_p2 == 1'd0)) | ((ap_enable_reg_pp1_iter16 == 1'b1) & (icmp_ln192_reg_488_pp1_iter15_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        U_inv_we1 = 1'b1;
    end else begin
        U_inv_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln192_fu_301_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln205_fu_407_p2 == 1'd0)) begin
        ap_condition_pp2_exit_iter0_state25 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state25 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state23) & (icmp_ln198_fu_326_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter16 == 1'b0) & (ap_enable_reg_pp1_iter15 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b0) & (ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln205_reg_555 == 1'd1))) begin
        ap_phi_mux_k_0_phi_fu_210_p4 = k_2_reg_579;
    end else begin
        ap_phi_mux_k_0_phi_fu_210_p4 = k_0_reg_207;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln198_fu_326_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_228_p0 = bitcast_ln211_1_fu_470_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_228_p0 = 32'd1065353216;
    end else begin
        grp_fu_228_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln183_fu_241_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln192_fu_301_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter15 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter16 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter15 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter16 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln192_fu_301_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (icmp_ln198_fu_326_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln200_fu_359_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln205_fu_407_p2 == 1'd0)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln205_fu_407_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_pp2_stage2 : begin
            if ((1'b0 == ap_block_pp2_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage2;
            end
        end
        ap_ST_fsm_pp2_stage3 : begin
            if ((1'b0 == ap_block_pp2_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage3;
            end
        end
        ap_ST_fsm_pp2_stage4 : begin
            if ((~((1'b0 == ap_block_pp2_stage4_subdone) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage4) & (ap_enable_reg_pp2_iter0 == 1'b0)) & (1'b0 == ap_block_pp2_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage4_subdone) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage4) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage4;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign U_inv_d0 = 32'd0;

assign add_ln188_1_fu_291_p2 = ($signed(sub_ln188_reg_483) + $signed(5'd2));

assign add_ln188_fu_280_p2 = ($signed(sub_ln188_fu_269_p2) + $signed(5'd1));

assign add_ln209_1_fu_444_p2 = (trunc_ln209_fu_412_p1 + sub_ln209_reg_545);

assign add_ln209_fu_434_p2 = (zext_ln211_1_reg_520 + sub_ln209_1_fu_428_p2);

assign add_ln211_fu_397_p2 = (sub_ln209_fu_391_p2 + zext_ln211_1_reg_520);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp2_stage4 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd29];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp2_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp2_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp2_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign bitcast_ln211_1_fu_470_p1 = xor_ln211_fu_464_p2;

assign bitcast_ln211_fu_460_p1 = sum_0_reg_195;

assign i_7_fu_247_p2 = (i_0_reg_150 + 2'd1);

assign i_8_fu_332_p2 = (indvars_iv_reg_172 + 2'd1);

assign i_fu_307_p2 = (i1_0_reg_161 + 2'd1);

assign icmp_ln183_fu_241_p2 = ((i_0_reg_150 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln192_fu_301_p2 = ((i1_0_reg_161 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln198_fu_326_p2 = ((indvars_iv_reg_172 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln200_fu_359_p2 = ((k_reg_184 == indvars_iv_reg_172) ? 1'b1 : 1'b0);

assign icmp_ln205_fu_407_p2 = (($signed(ap_phi_mux_k_0_phi_fu_210_p4) < $signed(zext_ln198_reg_515)) ? 1'b1 : 1'b0);

assign j_fu_365_p2 = (k_reg_184 + 2'd1);

assign k_2_fu_454_p2 = (32'd1 + k_0_reg_207);

assign sext_ln188_1_fu_286_p1 = $signed(add_ln188_fu_280_p2);

assign sext_ln188_2_fu_296_p1 = $signed(add_ln188_1_fu_291_p2);

assign sext_ln188_fu_275_p1 = sub_ln188_fu_269_p2;

assign sext_ln209_1_cast_fu_420_p3 = {{trunc_ln209_1_fu_416_p1}, {2'd0}};

assign sext_ln209_1_fu_449_p1 = $signed(add_ln209_1_fu_444_p2);

assign sext_ln209_fu_439_p1 = $signed(add_ln209_fu_434_p2);

assign sext_ln211_fu_402_p1 = $signed(add_ln211_fu_397_p2);

assign sub_ln188_fu_269_p2 = (zext_ln188_1_fu_265_p1 - zext_ln188_fu_253_p1);

assign sub_ln209_1_fu_428_p2 = (sext_ln209_1_cast_fu_420_p3 - trunc_ln209_fu_412_p1);

assign sub_ln209_fu_391_p2 = (zext_ln209_1_fu_387_p1 - zext_ln209_fu_375_p1);

assign tmp_46_fu_257_p3 = {{i_0_reg_150}, {2'd0}};

assign tmp_47_fu_313_p3 = {{i1_0_reg_161}, {2'd0}};

assign tmp_48_fu_346_p3 = {{indvars_iv_reg_172}, {2'd0}};

assign tmp_49_fu_379_p3 = {{k_reg_184}, {2'd0}};

assign trunc_ln209_1_fu_416_p1 = ap_phi_mux_k_0_phi_fu_210_p4[2:0];

assign trunc_ln209_fu_412_p1 = ap_phi_mux_k_0_phi_fu_210_p4[4:0];

assign xor_ln211_fu_464_p2 = (bitcast_ln211_fu_460_p1 ^ 32'd2147483648);

assign zext_ln188_1_fu_265_p1 = tmp_46_fu_257_p3;

assign zext_ln188_fu_253_p1 = i_0_reg_150;

assign zext_ln195_fu_321_p1 = tmp_47_fu_313_p3;

assign zext_ln198_fu_338_p1 = indvars_iv_reg_172;

assign zext_ln200_fu_371_p1 = k_reg_184;

assign zext_ln209_1_fu_387_p1 = tmp_49_fu_379_p3;

assign zext_ln209_fu_375_p1 = k_reg_184;

assign zext_ln211_1_fu_342_p1 = indvars_iv_reg_172;

assign zext_ln211_fu_354_p1 = tmp_48_fu_346_p3;

always @ (posedge ap_clk) begin
    zext_ln195_reg_497[1:0] <= 2'b00;
    zext_ln195_reg_497[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln195_reg_497_pp1_iter1_reg[1:0] <= 2'b00;
    zext_ln195_reg_497_pp1_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln195_reg_497_pp1_iter2_reg[1:0] <= 2'b00;
    zext_ln195_reg_497_pp1_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln195_reg_497_pp1_iter3_reg[1:0] <= 2'b00;
    zext_ln195_reg_497_pp1_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln195_reg_497_pp1_iter4_reg[1:0] <= 2'b00;
    zext_ln195_reg_497_pp1_iter4_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln195_reg_497_pp1_iter5_reg[1:0] <= 2'b00;
    zext_ln195_reg_497_pp1_iter5_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln195_reg_497_pp1_iter6_reg[1:0] <= 2'b00;
    zext_ln195_reg_497_pp1_iter6_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln195_reg_497_pp1_iter7_reg[1:0] <= 2'b00;
    zext_ln195_reg_497_pp1_iter7_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln195_reg_497_pp1_iter8_reg[1:0] <= 2'b00;
    zext_ln195_reg_497_pp1_iter8_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln195_reg_497_pp1_iter9_reg[1:0] <= 2'b00;
    zext_ln195_reg_497_pp1_iter9_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln195_reg_497_pp1_iter10_reg[1:0] <= 2'b00;
    zext_ln195_reg_497_pp1_iter10_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln195_reg_497_pp1_iter11_reg[1:0] <= 2'b00;
    zext_ln195_reg_497_pp1_iter11_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln195_reg_497_pp1_iter12_reg[1:0] <= 2'b00;
    zext_ln195_reg_497_pp1_iter12_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln195_reg_497_pp1_iter13_reg[1:0] <= 2'b00;
    zext_ln195_reg_497_pp1_iter13_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln195_reg_497_pp1_iter14_reg[1:0] <= 2'b00;
    zext_ln195_reg_497_pp1_iter14_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln195_reg_497_pp1_iter15_reg[1:0] <= 2'b00;
    zext_ln195_reg_497_pp1_iter15_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln198_reg_515[31:2] <= 30'b000000000000000000000000000000;
    zext_ln211_1_reg_520[4:2] <= 3'b000;
    U_addr_1_reg_526[1:0] <= 2'b00;
end

endmodule //Upper_inv
