-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity final_perm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    UL_inv_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    UL_inv_ce0 : OUT STD_LOGIC;
    UL_inv_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    P_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    P_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    A_inv_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_inv_ce0 : OUT STD_LOGIC;
    A_inv_we0 : OUT STD_LOGIC;
    A_inv_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of final_perm is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_156_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_384 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln226_fu_162_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln226_reg_389 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln224_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_172_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_397 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_Val2_s_fu_178_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln226_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_1_fu_192_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_1_reg_407 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_fu_206_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_412 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_224_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_417 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln228_fu_347_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln228_reg_423 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln228_1_fu_353_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln228_1_reg_428 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_0_reg_115 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_0_reg_127 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_phi_mux_phi_ln228_phi_fu_142_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln228_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln228_1_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_V_fu_182_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_196_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_200_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_214_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1311_fu_220_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_V_fu_239_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1311_1_fu_252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_2_fu_255_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_248_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_258_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_262_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_fu_274_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_268_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln662_fu_282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_286_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_fu_296_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln657_fu_303_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_s_fu_232_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln228_1_fu_307_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln228_fu_313_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_32_fu_329_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln228_1_fu_337_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln228_fu_325_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln228_fu_341_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln59_fu_317_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln226_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_115 <= i_reg_384;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_115 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_0_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_0_reg_127 <= j_reg_397;
            elsif (((icmp_ln224_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_127 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln228_1_reg_428 <= add_ln228_1_fu_353_p2;
                add_ln228_reg_423 <= add_ln228_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_384 <= i_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln226_fu_166_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                isNeg_reg_412 <= add_ln339_fu_200_p2(8 downto 8);
                p_Val2_s_reg_402 <= p_Val2_s_fu_178_p1;
                tmp_V_1_reg_407 <= tmp_V_1_fu_192_p1;
                ush_reg_417 <= ush_fu_224_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_397 <= j_fu_172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln224_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln226_reg_389(1 downto 0) <= zext_ln226_fu_162_p1(1 downto 0);
            end if;
        end if;
    end process;
    zext_ln226_reg_389(4 downto 2) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln224_fu_150_p2, ap_CS_fsm_state3, icmp_ln226_fu_166_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln224_fu_150_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln226_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    A_inv_address0 <= sext_ln228_1_fu_362_p1(4 - 1 downto 0);

    A_inv_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_inv_ce0 <= ap_const_logic_1;
        else 
            A_inv_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_inv_d0 <= UL_inv_q0;

    A_inv_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_inv_we0 <= ap_const_logic_1;
        else 
            A_inv_we0 <= ap_const_logic_0;
        end if; 
    end process;

    UL_inv_address0 <= sext_ln228_fu_358_p1(4 - 1 downto 0);

    UL_inv_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            UL_inv_ce0 <= ap_const_logic_1;
        else 
            UL_inv_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln228_1_fu_353_p2 <= std_logic_vector(unsigned(sub_ln228_fu_341_p2) + unsigned(zext_ln226_reg_389));
    add_ln228_fu_347_p2 <= std_logic_vector(unsigned(sub_ln228_fu_341_p2) + unsigned(select_ln59_fu_317_p3));
    add_ln339_fu_200_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_196_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln224_fu_150_p2)
    begin
        if ((((icmp_ln224_fu_150_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_phi_ln228_phi_fu_142_p6_assign_proc : process(P_0_read, P_1_read, P_2_read, ap_CS_fsm_state3, icmp_ln226_fu_166_p2, i_0_reg_115)
    begin
        if (((icmp_ln226_fu_166_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
            if ((i_0_reg_115 = ap_const_lv2_0)) then 
                ap_phi_mux_phi_ln228_phi_fu_142_p6 <= P_0_read;
            elsif ((not((i_0_reg_115 = ap_const_lv2_0)) and not((i_0_reg_115 = ap_const_lv2_1)))) then 
                ap_phi_mux_phi_ln228_phi_fu_142_p6 <= P_2_read;
            elsif ((i_0_reg_115 = ap_const_lv2_1)) then 
                ap_phi_mux_phi_ln228_phi_fu_142_p6 <= P_1_read;
            else 
                ap_phi_mux_phi_ln228_phi_fu_142_p6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_phi_ln228_phi_fu_142_p6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln224_fu_150_p2)
    begin
        if (((icmp_ln224_fu_150_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_156_p2 <= std_logic_vector(unsigned(i_0_reg_115) + unsigned(ap_const_lv2_1));
    icmp_ln224_fu_150_p2 <= "1" when (i_0_reg_115 = ap_const_lv2_3) else "0";
    icmp_ln226_fu_166_p2 <= "1" when (j_0_reg_127 = ap_const_lv2_3) else "0";
    isNeg_fu_206_p3 <= add_ln339_fu_200_p2(8 downto 8);
    j_fu_172_p2 <= std_logic_vector(unsigned(j_0_reg_127) + unsigned(ap_const_lv2_1));
    mantissa_V_fu_239_p4 <= ((ap_const_lv1_1 & tmp_V_1_reg_407) & ap_const_lv1_0);
    p_Result_s_fu_232_p3 <= p_Val2_s_reg_402(31 downto 31);
    p_Val2_4_fu_296_p3 <= 
        zext_ln662_fu_282_p1 when (isNeg_reg_412(0) = '1') else 
        tmp_31_fu_286_p4;
    p_Val2_s_fu_178_p1 <= ap_phi_mux_phi_ln228_phi_fu_142_p6;
    r_V_1_fu_268_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_248_p1),to_integer(unsigned('0' & zext_ln1287_fu_258_p1(31-1 downto 0)))));
    r_V_fu_262_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_239_p4),to_integer(unsigned('0' & sext_ln1311_2_fu_255_p1(25-1 downto 0)))));
    select_ln59_fu_317_p3 <= 
        sub_ln228_1_fu_307_p2 when (p_Result_s_fu_232_p3(0) = '1') else 
        trunc_ln228_fu_313_p1;
        sext_ln1311_1_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_417),32));

        sext_ln1311_2_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_417),25));

        sext_ln1311_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_214_p2),9));

        sext_ln228_1_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln228_1_reg_428),64));

        sext_ln228_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln228_reg_423),64));

    sub_ln1311_fu_214_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_182_p4));
    sub_ln228_1_fu_307_p2 <= std_logic_vector(unsigned(ap_const_lv5_0) - unsigned(trunc_ln657_fu_303_p1));
    sub_ln228_fu_341_p2 <= std_logic_vector(unsigned(zext_ln228_1_fu_337_p1) - unsigned(zext_ln228_fu_325_p1));
    tmp_31_fu_286_p4 <= r_V_1_fu_268_p2(55 downto 24);
    tmp_32_fu_329_p3 <= (j_0_reg_127 & ap_const_lv2_0);
    tmp_V_1_fu_192_p1 <= p_Val2_s_fu_178_p1(23 - 1 downto 0);
    tmp_V_fu_182_p4 <= p_Val2_s_fu_178_p1(30 downto 23);
    tmp_fu_274_p3 <= r_V_fu_262_p2(24 downto 24);
    trunc_ln228_fu_313_p1 <= p_Val2_4_fu_296_p3(5 - 1 downto 0);
    trunc_ln657_fu_303_p1 <= p_Val2_4_fu_296_p3(5 - 1 downto 0);
    ush_fu_224_p3 <= 
        sext_ln1311_fu_220_p1 when (isNeg_fu_206_p3(0) = '1') else 
        add_ln339_fu_200_p2;
    zext_ln1287_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_252_p1),79));
    zext_ln226_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_115),5));
    zext_ln228_1_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_329_p3),5));
    zext_ln228_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_127),5));
    zext_ln339_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_182_p4),9));
    zext_ln662_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_274_p3),32));
    zext_ln682_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_239_p4),79));
end behav;
