-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inverse_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_we1 : OUT STD_LOGIC;
    A_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_inv_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_inv_ce0 : OUT STD_LOGIC;
    A_inv_we0 : OUT STD_LOGIC;
    A_inv_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of inverse_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "inverse_top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.434000,HLS_SYN_LAT=587,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=20,HLS_SYN_FF=6952,HLS_SYN_LUT=12252,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal singular_fu_149_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal singular_reg_225 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_lup_fu_110_ap_ready : STD_LOGIC;
    signal grp_lup_fu_110_ap_done : STD_LOGIC;
    signal P_0_reg_229 : STD_LOGIC_VECTOR (31 downto 0);
    signal P_1_reg_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal P_2_reg_239 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_171_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_247 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sub_ln247_fu_193_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln247_reg_252 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln244_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_205_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal L_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal L_ce0 : STD_LOGIC;
    signal L_we0 : STD_LOGIC;
    signal L_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal U_ce0 : STD_LOGIC;
    signal U_we0 : STD_LOGIC;
    signal U_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_inv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal L_inv_ce0 : STD_LOGIC;
    signal L_inv_we0 : STD_LOGIC;
    signal L_inv_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_inv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal U_inv_ce0 : STD_LOGIC;
    signal U_inv_we0 : STD_LOGIC;
    signal U_inv_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal UL_inv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal UL_inv_ce0 : STD_LOGIC;
    signal UL_inv_we0 : STD_LOGIC;
    signal UL_inv_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_lup_fu_110_ap_start : STD_LOGIC;
    signal grp_lup_fu_110_ap_idle : STD_LOGIC;
    signal grp_lup_fu_110_A_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_lup_fu_110_A_ce0 : STD_LOGIC;
    signal grp_lup_fu_110_A_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_lup_fu_110_A_ce1 : STD_LOGIC;
    signal grp_lup_fu_110_A_we1 : STD_LOGIC;
    signal grp_lup_fu_110_A_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_lup_fu_110_L_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_lup_fu_110_L_ce0 : STD_LOGIC;
    signal grp_lup_fu_110_L_we0 : STD_LOGIC;
    signal grp_lup_fu_110_L_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_lup_fu_110_U_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_lup_fu_110_U_ce0 : STD_LOGIC;
    signal grp_lup_fu_110_U_we0 : STD_LOGIC;
    signal grp_lup_fu_110_U_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_lup_fu_110_ap_return_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_lup_fu_110_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_lup_fu_110_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_lup_fu_110_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Upper_inv_fu_120_ap_start : STD_LOGIC;
    signal grp_Upper_inv_fu_120_ap_done : STD_LOGIC;
    signal grp_Upper_inv_fu_120_ap_idle : STD_LOGIC;
    signal grp_Upper_inv_fu_120_ap_ready : STD_LOGIC;
    signal grp_Upper_inv_fu_120_U_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Upper_inv_fu_120_U_ce0 : STD_LOGIC;
    signal grp_Upper_inv_fu_120_U_inv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Upper_inv_fu_120_U_inv_ce0 : STD_LOGIC;
    signal grp_Upper_inv_fu_120_U_inv_we0 : STD_LOGIC;
    signal grp_Upper_inv_fu_120_U_inv_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Lower_inv_fu_126_ap_start : STD_LOGIC;
    signal grp_Lower_inv_fu_126_ap_done : STD_LOGIC;
    signal grp_Lower_inv_fu_126_ap_idle : STD_LOGIC;
    signal grp_Lower_inv_fu_126_ap_ready : STD_LOGIC;
    signal grp_Lower_inv_fu_126_L_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Lower_inv_fu_126_L_ce0 : STD_LOGIC;
    signal grp_Lower_inv_fu_126_L_inv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Lower_inv_fu_126_L_inv_ce0 : STD_LOGIC;
    signal grp_Lower_inv_fu_126_L_inv_we0 : STD_LOGIC;
    signal grp_Lower_inv_fu_126_L_inv_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_mult_fu_132_ap_start : STD_LOGIC;
    signal grp_matrix_mult_fu_132_ap_done : STD_LOGIC;
    signal grp_matrix_mult_fu_132_ap_idle : STD_LOGIC;
    signal grp_matrix_mult_fu_132_ap_ready : STD_LOGIC;
    signal grp_matrix_mult_fu_132_U_inv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrix_mult_fu_132_U_inv_ce0 : STD_LOGIC;
    signal grp_matrix_mult_fu_132_L_inv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrix_mult_fu_132_L_inv_ce0 : STD_LOGIC;
    signal grp_matrix_mult_fu_132_A_inv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrix_mult_fu_132_A_inv_ce0 : STD_LOGIC;
    signal grp_matrix_mult_fu_132_A_inv_we0 : STD_LOGIC;
    signal grp_matrix_mult_fu_132_A_inv_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_final_perm_fu_139_ap_start : STD_LOGIC;
    signal grp_final_perm_fu_139_ap_done : STD_LOGIC;
    signal grp_final_perm_fu_139_ap_idle : STD_LOGIC;
    signal grp_final_perm_fu_139_ap_ready : STD_LOGIC;
    signal grp_final_perm_fu_139_UL_inv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_final_perm_fu_139_UL_inv_ce0 : STD_LOGIC;
    signal grp_final_perm_fu_139_A_inv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_final_perm_fu_139_A_inv_ce0 : STD_LOGIC;
    signal grp_final_perm_fu_139_A_inv_we0 : STD_LOGIC;
    signal grp_final_perm_fu_139_A_inv_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_0_phi_fu_80_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_reg_76 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state8_on_subcall_done : BOOLEAN;
    signal i_0_reg_88 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln246_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_reg_99 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_lup_fu_110_ap_start_reg : STD_LOGIC := '0';
    signal grp_Upper_inv_fu_120_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_Lower_inv_fu_126_ap_start_reg : STD_LOGIC := '0';
    signal grp_matrix_mult_fu_132_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_final_perm_fu_139_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sext_ln247_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_181_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln247_1_fu_189_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln247_fu_177_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln247_2_fu_211_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln247_fu_215_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state4_on_subcall_done : BOOLEAN;

    component lup IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_we1 : OUT STD_LOGIC;
        A_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        L_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        L_ce0 : OUT STD_LOGIC;
        L_we0 : OUT STD_LOGIC;
        L_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        U_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        U_ce0 : OUT STD_LOGIC;
        U_we0 : OUT STD_LOGIC;
        U_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Upper_inv IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        U_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        U_ce0 : OUT STD_LOGIC;
        U_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        U_inv_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        U_inv_ce0 : OUT STD_LOGIC;
        U_inv_we0 : OUT STD_LOGIC;
        U_inv_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        U_inv_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Lower_inv IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        L_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        L_ce0 : OUT STD_LOGIC;
        L_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        L_inv_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        L_inv_ce0 : OUT STD_LOGIC;
        L_inv_we0 : OUT STD_LOGIC;
        L_inv_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        L_inv_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_mult IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        U_inv_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        U_inv_ce0 : OUT STD_LOGIC;
        U_inv_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        L_inv_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        L_inv_ce0 : OUT STD_LOGIC;
        L_inv_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_inv_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_inv_ce0 : OUT STD_LOGIC;
        A_inv_we0 : OUT STD_LOGIC;
        A_inv_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component final_perm IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        UL_inv_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        UL_inv_ce0 : OUT STD_LOGIC;
        UL_inv_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        P_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        P_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        A_inv_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_inv_ce0 : OUT STD_LOGIC;
        A_inv_we0 : OUT STD_LOGIC;
        A_inv_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inverse_top_L IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    L_U : component inverse_top_L
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => L_address0,
        ce0 => L_ce0,
        we0 => L_we0,
        d0 => grp_lup_fu_110_L_d0,
        q0 => L_q0);

    U_U : component inverse_top_L
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => U_address0,
        ce0 => U_ce0,
        we0 => U_we0,
        d0 => grp_lup_fu_110_U_d0,
        q0 => U_q0);

    L_inv_U : component inverse_top_L
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => L_inv_address0,
        ce0 => L_inv_ce0,
        we0 => L_inv_we0,
        d0 => grp_Lower_inv_fu_126_L_inv_d0,
        q0 => L_inv_q0);

    U_inv_U : component inverse_top_L
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => U_inv_address0,
        ce0 => U_inv_ce0,
        we0 => U_inv_we0,
        d0 => grp_Upper_inv_fu_120_U_inv_d0,
        q0 => U_inv_q0);

    UL_inv_U : component inverse_top_L
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => UL_inv_address0,
        ce0 => UL_inv_ce0,
        we0 => UL_inv_we0,
        d0 => grp_matrix_mult_fu_132_A_inv_d0,
        q0 => UL_inv_q0);

    grp_lup_fu_110 : component lup
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_lup_fu_110_ap_start,
        ap_done => grp_lup_fu_110_ap_done,
        ap_idle => grp_lup_fu_110_ap_idle,
        ap_ready => grp_lup_fu_110_ap_ready,
        A_address0 => grp_lup_fu_110_A_address0,
        A_ce0 => grp_lup_fu_110_A_ce0,
        A_q0 => A_q0,
        A_address1 => grp_lup_fu_110_A_address1,
        A_ce1 => grp_lup_fu_110_A_ce1,
        A_we1 => grp_lup_fu_110_A_we1,
        A_d1 => grp_lup_fu_110_A_d1,
        A_q1 => A_q1,
        L_address0 => grp_lup_fu_110_L_address0,
        L_ce0 => grp_lup_fu_110_L_ce0,
        L_we0 => grp_lup_fu_110_L_we0,
        L_d0 => grp_lup_fu_110_L_d0,
        U_address0 => grp_lup_fu_110_U_address0,
        U_ce0 => grp_lup_fu_110_U_ce0,
        U_we0 => grp_lup_fu_110_U_we0,
        U_d0 => grp_lup_fu_110_U_d0,
        ap_return_0 => grp_lup_fu_110_ap_return_0,
        ap_return_1 => grp_lup_fu_110_ap_return_1,
        ap_return_2 => grp_lup_fu_110_ap_return_2,
        ap_return_3 => grp_lup_fu_110_ap_return_3);

    grp_Upper_inv_fu_120 : component Upper_inv
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Upper_inv_fu_120_ap_start,
        ap_done => grp_Upper_inv_fu_120_ap_done,
        ap_idle => grp_Upper_inv_fu_120_ap_idle,
        ap_ready => grp_Upper_inv_fu_120_ap_ready,
        U_address0 => grp_Upper_inv_fu_120_U_address0,
        U_ce0 => grp_Upper_inv_fu_120_U_ce0,
        U_q0 => U_q0,
        U_inv_address0 => grp_Upper_inv_fu_120_U_inv_address0,
        U_inv_ce0 => grp_Upper_inv_fu_120_U_inv_ce0,
        U_inv_we0 => grp_Upper_inv_fu_120_U_inv_we0,
        U_inv_d0 => grp_Upper_inv_fu_120_U_inv_d0,
        U_inv_q0 => U_inv_q0);

    grp_Lower_inv_fu_126 : component Lower_inv
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Lower_inv_fu_126_ap_start,
        ap_done => grp_Lower_inv_fu_126_ap_done,
        ap_idle => grp_Lower_inv_fu_126_ap_idle,
        ap_ready => grp_Lower_inv_fu_126_ap_ready,
        L_address0 => grp_Lower_inv_fu_126_L_address0,
        L_ce0 => grp_Lower_inv_fu_126_L_ce0,
        L_q0 => L_q0,
        L_inv_address0 => grp_Lower_inv_fu_126_L_inv_address0,
        L_inv_ce0 => grp_Lower_inv_fu_126_L_inv_ce0,
        L_inv_we0 => grp_Lower_inv_fu_126_L_inv_we0,
        L_inv_d0 => grp_Lower_inv_fu_126_L_inv_d0,
        L_inv_q0 => L_inv_q0);

    grp_matrix_mult_fu_132 : component matrix_mult
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrix_mult_fu_132_ap_start,
        ap_done => grp_matrix_mult_fu_132_ap_done,
        ap_idle => grp_matrix_mult_fu_132_ap_idle,
        ap_ready => grp_matrix_mult_fu_132_ap_ready,
        U_inv_address0 => grp_matrix_mult_fu_132_U_inv_address0,
        U_inv_ce0 => grp_matrix_mult_fu_132_U_inv_ce0,
        U_inv_q0 => U_inv_q0,
        L_inv_address0 => grp_matrix_mult_fu_132_L_inv_address0,
        L_inv_ce0 => grp_matrix_mult_fu_132_L_inv_ce0,
        L_inv_q0 => L_inv_q0,
        A_inv_address0 => grp_matrix_mult_fu_132_A_inv_address0,
        A_inv_ce0 => grp_matrix_mult_fu_132_A_inv_ce0,
        A_inv_we0 => grp_matrix_mult_fu_132_A_inv_we0,
        A_inv_d0 => grp_matrix_mult_fu_132_A_inv_d0);

    grp_final_perm_fu_139 : component final_perm
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_final_perm_fu_139_ap_start,
        ap_done => grp_final_perm_fu_139_ap_done,
        ap_idle => grp_final_perm_fu_139_ap_idle,
        ap_ready => grp_final_perm_fu_139_ap_ready,
        UL_inv_address0 => grp_final_perm_fu_139_UL_inv_address0,
        UL_inv_ce0 => grp_final_perm_fu_139_UL_inv_ce0,
        UL_inv_q0 => UL_inv_q0,
        P_0_read => P_0_reg_229,
        P_1_read => P_1_reg_234,
        P_2_read => P_2_reg_239,
        A_inv_address0 => grp_final_perm_fu_139_A_inv_address0,
        A_inv_ce0 => grp_final_perm_fu_139_A_inv_ce0,
        A_inv_we0 => grp_final_perm_fu_139_A_inv_we0,
        A_inv_d0 => grp_final_perm_fu_139_A_inv_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Lower_inv_fu_126_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Lower_inv_fu_126_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_Lower_inv_fu_126_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Lower_inv_fu_126_ap_ready = ap_const_logic_1)) then 
                    grp_Lower_inv_fu_126_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Upper_inv_fu_120_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Upper_inv_fu_120_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_Upper_inv_fu_120_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Upper_inv_fu_120_ap_ready = ap_const_logic_1)) then 
                    grp_Upper_inv_fu_120_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_final_perm_fu_139_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_final_perm_fu_139_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_final_perm_fu_139_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_final_perm_fu_139_ap_ready = ap_const_logic_1)) then 
                    grp_final_perm_fu_139_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_lup_fu_110_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_lup_fu_110_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_lup_fu_110_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_lup_fu_110_ap_ready = ap_const_logic_1)) then 
                    grp_lup_fu_110_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrix_mult_fu_132_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrix_mult_fu_132_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_matrix_mult_fu_132_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix_mult_fu_132_ap_ready = ap_const_logic_1)) then 
                    grp_matrix_mult_fu_132_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lup_fu_110_ap_done = ap_const_logic_1) and (singular_fu_149_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_88 <= ap_const_lv2_0;
            elsif (((icmp_ln246_fu_199_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_0_reg_88 <= i_reg_247;
            end if; 
        end if;
    end process;

    j_0_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln244_fu_165_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                j_0_reg_99 <= ap_const_lv2_0;
            elsif (((icmp_ln246_fu_199_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                j_0_reg_99 <= j_fu_205_p2;
            end if; 
        end if;
    end process;

    p_0_reg_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln244_fu_165_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                p_0_reg_76 <= ap_const_lv1_1;
            elsif (((singular_reg_225 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                p_0_reg_76 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_lup_fu_110_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                P_0_reg_229 <= grp_lup_fu_110_ap_return_1;
                P_1_reg_234 <= grp_lup_fu_110_ap_return_2;
                P_2_reg_239 <= grp_lup_fu_110_ap_return_3;
                singular_reg_225 <= grp_lup_fu_110_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_reg_247 <= i_fu_171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln244_fu_165_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                sub_ln247_reg_252 <= sub_ln247_fu_193_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, singular_fu_149_p1, ap_CS_fsm_state2, grp_lup_fu_110_ap_done, ap_CS_fsm_state9, icmp_ln244_fu_165_p2, ap_CS_fsm_state10, grp_matrix_mult_fu_132_ap_done, ap_CS_fsm_state8, ap_block_state8_on_subcall_done, icmp_ln246_fu_199_p2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_lup_fu_110_ap_done = ap_const_logic_1) and (singular_fu_149_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((grp_lup_fu_110_ap_done = ap_const_logic_1) and (singular_fu_149_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_matrix_mult_fu_132_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln244_fu_165_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln246_fu_199_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    A_address0 <= grp_lup_fu_110_A_address0;
    A_address1 <= grp_lup_fu_110_A_address1;
    A_ce0 <= grp_lup_fu_110_A_ce0;
    A_ce1 <= grp_lup_fu_110_A_ce1;
    A_d1 <= grp_lup_fu_110_A_d1;

    A_inv_address0_assign_proc : process(singular_reg_225, ap_CS_fsm_state10, grp_final_perm_fu_139_A_inv_address0, ap_CS_fsm_state8, sext_ln247_fu_220_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_inv_address0 <= sext_ln247_fu_220_p1(4 - 1 downto 0);
        elsif (((singular_reg_225 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            A_inv_address0 <= grp_final_perm_fu_139_A_inv_address0;
        else 
            A_inv_address0 <= "XXXX";
        end if; 
    end process;


    A_inv_ce0_assign_proc : process(singular_reg_225, ap_CS_fsm_state10, grp_final_perm_fu_139_A_inv_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_inv_ce0 <= ap_const_logic_1;
        elsif (((singular_reg_225 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            A_inv_ce0 <= grp_final_perm_fu_139_A_inv_ce0;
        else 
            A_inv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_inv_d0_assign_proc : process(singular_reg_225, ap_CS_fsm_state10, grp_final_perm_fu_139_A_inv_d0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_inv_d0 <= ap_const_lv32_0;
        elsif (((singular_reg_225 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            A_inv_d0 <= grp_final_perm_fu_139_A_inv_d0;
        else 
            A_inv_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_inv_we0_assign_proc : process(singular_reg_225, ap_CS_fsm_state10, grp_final_perm_fu_139_A_inv_we0, ap_CS_fsm_state8, icmp_ln246_fu_199_p2)
    begin
        if (((icmp_ln246_fu_199_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            A_inv_we0 <= ap_const_logic_1;
        elsif (((singular_reg_225 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            A_inv_we0 <= grp_final_perm_fu_139_A_inv_we0;
        else 
            A_inv_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_we1 <= grp_lup_fu_110_A_we1;

    L_address0_assign_proc : process(ap_CS_fsm_state2, grp_lup_fu_110_L_address0, grp_Lower_inv_fu_126_L_address0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            L_address0 <= grp_Lower_inv_fu_126_L_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            L_address0 <= grp_lup_fu_110_L_address0;
        else 
            L_address0 <= "XXXX";
        end if; 
    end process;


    L_ce0_assign_proc : process(ap_CS_fsm_state2, grp_lup_fu_110_L_ce0, grp_Lower_inv_fu_126_L_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            L_ce0 <= grp_Lower_inv_fu_126_L_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            L_ce0 <= grp_lup_fu_110_L_ce0;
        else 
            L_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    L_inv_address0_assign_proc : process(grp_Lower_inv_fu_126_L_inv_address0, grp_matrix_mult_fu_132_L_inv_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            L_inv_address0 <= grp_matrix_mult_fu_132_L_inv_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            L_inv_address0 <= grp_Lower_inv_fu_126_L_inv_address0;
        else 
            L_inv_address0 <= "XXXX";
        end if; 
    end process;


    L_inv_ce0_assign_proc : process(grp_Lower_inv_fu_126_L_inv_ce0, grp_matrix_mult_fu_132_L_inv_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            L_inv_ce0 <= grp_matrix_mult_fu_132_L_inv_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            L_inv_ce0 <= grp_Lower_inv_fu_126_L_inv_ce0;
        else 
            L_inv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    L_inv_we0_assign_proc : process(grp_Lower_inv_fu_126_L_inv_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            L_inv_we0 <= grp_Lower_inv_fu_126_L_inv_we0;
        else 
            L_inv_we0 <= ap_const_logic_0;
        end if; 
    end process;


    L_we0_assign_proc : process(ap_CS_fsm_state2, grp_lup_fu_110_L_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            L_we0 <= grp_lup_fu_110_L_we0;
        else 
            L_we0 <= ap_const_logic_0;
        end if; 
    end process;


    UL_inv_address0_assign_proc : process(singular_reg_225, grp_matrix_mult_fu_132_A_inv_address0, grp_final_perm_fu_139_UL_inv_address0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if (((singular_reg_225 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            UL_inv_address0 <= grp_final_perm_fu_139_UL_inv_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            UL_inv_address0 <= grp_matrix_mult_fu_132_A_inv_address0;
        else 
            UL_inv_address0 <= "XXXX";
        end if; 
    end process;


    UL_inv_ce0_assign_proc : process(singular_reg_225, grp_matrix_mult_fu_132_A_inv_ce0, grp_final_perm_fu_139_UL_inv_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if (((singular_reg_225 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            UL_inv_ce0 <= grp_final_perm_fu_139_UL_inv_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            UL_inv_ce0 <= grp_matrix_mult_fu_132_A_inv_ce0;
        else 
            UL_inv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    UL_inv_we0_assign_proc : process(grp_matrix_mult_fu_132_A_inv_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            UL_inv_we0 <= grp_matrix_mult_fu_132_A_inv_we0;
        else 
            UL_inv_we0 <= ap_const_logic_0;
        end if; 
    end process;


    U_address0_assign_proc : process(ap_CS_fsm_state2, grp_lup_fu_110_U_address0, grp_Upper_inv_fu_120_U_address0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            U_address0 <= grp_Upper_inv_fu_120_U_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            U_address0 <= grp_lup_fu_110_U_address0;
        else 
            U_address0 <= "XXXX";
        end if; 
    end process;


    U_ce0_assign_proc : process(ap_CS_fsm_state2, grp_lup_fu_110_U_ce0, grp_Upper_inv_fu_120_U_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            U_ce0 <= grp_Upper_inv_fu_120_U_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            U_ce0 <= grp_lup_fu_110_U_ce0;
        else 
            U_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    U_inv_address0_assign_proc : process(grp_Upper_inv_fu_120_U_inv_address0, grp_matrix_mult_fu_132_U_inv_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            U_inv_address0 <= grp_matrix_mult_fu_132_U_inv_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            U_inv_address0 <= grp_Upper_inv_fu_120_U_inv_address0;
        else 
            U_inv_address0 <= "XXXX";
        end if; 
    end process;


    U_inv_ce0_assign_proc : process(grp_Upper_inv_fu_120_U_inv_ce0, grp_matrix_mult_fu_132_U_inv_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            U_inv_ce0 <= grp_matrix_mult_fu_132_U_inv_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            U_inv_ce0 <= grp_Upper_inv_fu_120_U_inv_ce0;
        else 
            U_inv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    U_inv_we0_assign_proc : process(grp_Upper_inv_fu_120_U_inv_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            U_inv_we0 <= grp_Upper_inv_fu_120_U_inv_we0;
        else 
            U_inv_we0 <= ap_const_logic_0;
        end if; 
    end process;


    U_we0_assign_proc : process(ap_CS_fsm_state2, grp_lup_fu_110_U_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            U_we0 <= grp_lup_fu_110_U_we0;
        else 
            U_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln247_fu_215_p2 <= std_logic_vector(unsigned(sub_ln247_reg_252) + unsigned(zext_ln247_2_fu_211_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state4_on_subcall_done_assign_proc : process(grp_Upper_inv_fu_120_ap_done, grp_Lower_inv_fu_126_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_Lower_inv_fu_126_ap_done = ap_const_logic_0) or (grp_Upper_inv_fu_120_ap_done = ap_const_logic_0));
    end process;


    ap_block_state8_on_subcall_done_assign_proc : process(singular_reg_225, grp_final_perm_fu_139_ap_done)
    begin
                ap_block_state8_on_subcall_done <= ((singular_reg_225 = ap_const_lv1_0) and (grp_final_perm_fu_139_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state8, ap_block_state8_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0_phi_fu_80_p4_assign_proc : process(singular_reg_225, p_0_reg_76, ap_CS_fsm_state8)
    begin
        if (((singular_reg_225 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_phi_mux_p_0_phi_fu_80_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_p_0_phi_fu_80_p4 <= p_0_reg_76;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, ap_block_state8_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_phi_mux_p_0_phi_fu_80_p4;
    grp_Lower_inv_fu_126_ap_start <= grp_Lower_inv_fu_126_ap_start_reg;
    grp_Upper_inv_fu_120_ap_start <= grp_Upper_inv_fu_120_ap_start_reg;
    grp_final_perm_fu_139_ap_start <= grp_final_perm_fu_139_ap_start_reg;
    grp_lup_fu_110_ap_start <= grp_lup_fu_110_ap_start_reg;
    grp_matrix_mult_fu_132_ap_start <= grp_matrix_mult_fu_132_ap_start_reg;
    i_fu_171_p2 <= std_logic_vector(unsigned(i_0_reg_88) + unsigned(ap_const_lv2_1));
    icmp_ln244_fu_165_p2 <= "1" when (i_0_reg_88 = ap_const_lv2_3) else "0";
    icmp_ln246_fu_199_p2 <= "1" when (j_0_reg_99 = ap_const_lv2_3) else "0";
    j_fu_205_p2 <= std_logic_vector(unsigned(j_0_reg_99) + unsigned(ap_const_lv2_1));
        sext_ln247_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln247_fu_215_p2),64));

    singular_fu_149_p1 <= grp_lup_fu_110_ap_return_0;
    sub_ln247_fu_193_p2 <= std_logic_vector(unsigned(zext_ln247_1_fu_189_p1) - unsigned(zext_ln247_fu_177_p1));
    tmp_fu_181_p3 <= (i_0_reg_88 & ap_const_lv2_0);
    zext_ln247_1_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_181_p3),5));
    zext_ln247_2_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_99),5));
    zext_ln247_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_88),5));
end behav;
