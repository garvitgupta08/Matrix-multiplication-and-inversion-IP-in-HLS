// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module lup (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_we1,
        A_d1,
        A_q1,
        L_address0,
        L_ce0,
        L_we0,
        L_d0,
        U_address0,
        U_ce0,
        U_we0,
        U_d0,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_ST_fsm_state1 = 61'd1;
parameter    ap_ST_fsm_state2 = 61'd2;
parameter    ap_ST_fsm_state3 = 61'd4;
parameter    ap_ST_fsm_state4 = 61'd8;
parameter    ap_ST_fsm_state5 = 61'd16;
parameter    ap_ST_fsm_state6 = 61'd32;
parameter    ap_ST_fsm_state7 = 61'd64;
parameter    ap_ST_fsm_state8 = 61'd128;
parameter    ap_ST_fsm_state9 = 61'd256;
parameter    ap_ST_fsm_state10 = 61'd512;
parameter    ap_ST_fsm_state11 = 61'd1024;
parameter    ap_ST_fsm_state12 = 61'd2048;
parameter    ap_ST_fsm_state13 = 61'd4096;
parameter    ap_ST_fsm_state14 = 61'd8192;
parameter    ap_ST_fsm_state15 = 61'd16384;
parameter    ap_ST_fsm_state16 = 61'd32768;
parameter    ap_ST_fsm_state17 = 61'd65536;
parameter    ap_ST_fsm_state18 = 61'd131072;
parameter    ap_ST_fsm_state19 = 61'd262144;
parameter    ap_ST_fsm_state20 = 61'd524288;
parameter    ap_ST_fsm_state21 = 61'd1048576;
parameter    ap_ST_fsm_state22 = 61'd2097152;
parameter    ap_ST_fsm_state23 = 61'd4194304;
parameter    ap_ST_fsm_state24 = 61'd8388608;
parameter    ap_ST_fsm_state25 = 61'd16777216;
parameter    ap_ST_fsm_state26 = 61'd33554432;
parameter    ap_ST_fsm_state27 = 61'd67108864;
parameter    ap_ST_fsm_state28 = 61'd134217728;
parameter    ap_ST_fsm_state29 = 61'd268435456;
parameter    ap_ST_fsm_state30 = 61'd536870912;
parameter    ap_ST_fsm_state31 = 61'd1073741824;
parameter    ap_ST_fsm_state32 = 61'd2147483648;
parameter    ap_ST_fsm_state33 = 61'd4294967296;
parameter    ap_ST_fsm_state34 = 61'd8589934592;
parameter    ap_ST_fsm_state35 = 61'd17179869184;
parameter    ap_ST_fsm_state36 = 61'd34359738368;
parameter    ap_ST_fsm_state37 = 61'd68719476736;
parameter    ap_ST_fsm_state38 = 61'd137438953472;
parameter    ap_ST_fsm_state39 = 61'd274877906944;
parameter    ap_ST_fsm_state40 = 61'd549755813888;
parameter    ap_ST_fsm_state41 = 61'd1099511627776;
parameter    ap_ST_fsm_state42 = 61'd2199023255552;
parameter    ap_ST_fsm_state43 = 61'd4398046511104;
parameter    ap_ST_fsm_state44 = 61'd8796093022208;
parameter    ap_ST_fsm_state45 = 61'd17592186044416;
parameter    ap_ST_fsm_state46 = 61'd35184372088832;
parameter    ap_ST_fsm_state47 = 61'd70368744177664;
parameter    ap_ST_fsm_state48 = 61'd140737488355328;
parameter    ap_ST_fsm_state49 = 61'd281474976710656;
parameter    ap_ST_fsm_state50 = 61'd562949953421312;
parameter    ap_ST_fsm_state51 = 61'd1125899906842624;
parameter    ap_ST_fsm_state52 = 61'd2251799813685248;
parameter    ap_ST_fsm_state53 = 61'd4503599627370496;
parameter    ap_ST_fsm_state54 = 61'd9007199254740992;
parameter    ap_ST_fsm_state55 = 61'd18014398509481984;
parameter    ap_ST_fsm_state56 = 61'd36028797018963968;
parameter    ap_ST_fsm_state57 = 61'd72057594037927936;
parameter    ap_ST_fsm_state58 = 61'd144115188075855872;
parameter    ap_ST_fsm_state59 = 61'd288230376151711744;
parameter    ap_ST_fsm_state60 = 61'd576460752303423488;
parameter    ap_ST_fsm_state61 = 61'd1152921504606846976;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [3:0] A_address1;
output   A_ce1;
output   A_we1;
output  [31:0] A_d1;
input  [31:0] A_q1;
output  [3:0] L_address0;
output   L_ce0;
output   L_we0;
output  [31:0] L_d0;
output  [3:0] U_address0;
output   U_ce0;
output   U_we0;
output  [31:0] U_d0;
output  [0:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] A_address0;
reg A_ce0;
reg[3:0] A_address1;
reg A_ce1;
reg A_we1;
reg[31:0] A_d1;
reg[3:0] L_address0;
reg L_ce0;
reg L_we0;
reg[31:0] L_d0;
reg U_ce0;
reg U_we0;
reg[0:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;

(* fsm_encoding = "none" *) reg   [60:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_457;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state48;
wire   [31:0] zext_ln17_fu_475_p1;
wire    ap_CS_fsm_state2;
wire   [1:0] i_fu_486_p2;
reg   [1:0] i_reg_1594;
reg   [31:0] P_2_2_load_reg_1638;
wire    ap_CS_fsm_state8;
reg   [31:0] P_1_2_load_reg_1647;
reg   [31:0] P_0_2_load_reg_1657;
wire   [31:0] zext_ln34_fu_583_p1;
reg   [31:0] zext_ln34_reg_1668;
wire   [1:0] i_3_fu_593_p2;
reg   [1:0] i_3_reg_1681;
wire   [3:0] tmp_9_fu_599_p3;
reg   [3:0] tmp_9_reg_1686;
wire   [0:0] icmp_ln34_fu_587_p2;
reg   [3:0] A_addr_reg_1691;
wire   [4:0] zext_ln40_fu_612_p1;
reg   [4:0] zext_ln40_reg_1696;
wire    ap_CS_fsm_state9;
wire   [4:0] sub_ln40_fu_619_p2;
reg   [4:0] sub_ln40_reg_1703;
reg   [31:0] max_reg_1709;
wire   [31:0] bitcast_ln50_1_fu_625_p1;
reg   [31:0] bitcast_ln50_1_reg_1715;
wire   [0:0] icmp_ln50_3_fu_633_p2;
reg   [0:0] icmp_ln50_3_reg_1720;
wire   [31:0] pos_2_fu_639_p2;
reg   [31:0] pos_2_reg_1725;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln46_fu_645_p2;
wire   [0:0] icmp_ln50_2_fu_692_p2;
reg   [0:0] icmp_ln50_2_reg_1739;
wire   [4:0] sub_ln58_fu_714_p2;
reg   [4:0] sub_ln58_reg_1744;
wire   [31:0] select_ln50_fu_836_p3;
wire    ap_CS_fsm_state12;
wire   [31:0] select_ln50_1_fu_844_p3;
wire   [0:0] icmp_ln58_fu_869_p2;
reg   [0:0] icmp_ln58_reg_1764;
wire   [0:0] icmp_ln58_1_fu_875_p2;
reg   [0:0] icmp_ln58_1_reg_1769;
wire   [0:0] icmp_ln65_fu_891_p2;
reg   [0:0] icmp_ln65_reg_1777;
wire    ap_CS_fsm_state14;
wire   [0:0] and_ln58_fu_885_p2;
wire   [1:0] k_2_fu_902_p2;
reg   [1:0] k_2_reg_1784;
wire    ap_CS_fsm_state15;
reg   [3:0] A_addr_5_reg_1789;
wire   [0:0] icmp_ln67_fu_896_p2;
reg   [3:0] A_addr_6_reg_1795;
wire   [31:0] grp_fu_421_p1;
reg   [31:0] tmp_5_reg_1800;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_425_p1;
reg   [31:0] tmp_6_reg_1806;
wire   [31:0] bitcast_ln79_1_fu_932_p1;
reg   [31:0] bitcast_ln79_1_reg_1812;
wire    ap_CS_fsm_state23;
wire   [0:0] icmp_ln79_3_fu_939_p2;
reg   [0:0] icmp_ln79_3_reg_1817;
wire   [31:0] bitcast_ln81_fu_945_p1;
reg   [31:0] bitcast_ln81_reg_1822;
wire   [0:0] icmp_ln81_fu_952_p2;
reg   [0:0] icmp_ln81_reg_1827;
wire   [31:0] zext_ln77_fu_958_p1;
reg   [31:0] zext_ln77_reg_1832;
wire    ap_CS_fsm_state24;
wire   [1:0] i1_fu_968_p2;
reg   [1:0] i1_reg_1841;
wire   [0:0] icmp_ln79_2_fu_983_p2;
reg   [0:0] icmp_ln79_2_reg_1846;
wire   [0:0] icmp_ln77_fu_962_p2;
wire   [0:0] icmp_ln81_1_fu_998_p2;
reg   [0:0] icmp_ln81_1_reg_1851;
wire   [0:0] or_ln79_fu_1261_p2;
reg   [0:0] or_ln79_reg_1856;
wire    ap_CS_fsm_state25;
wire   [31:0] k_3_fu_1321_p2;
reg   [31:0] k_3_reg_1862;
wire    ap_CS_fsm_state27;
wire   [4:0] sub_ln95_fu_1349_p2;
reg   [4:0] sub_ln95_reg_1870;
wire   [0:0] icmp_ln92_fu_1327_p2;
reg   [3:0] A_addr_7_reg_1875;
wire   [31:0] j_4_fu_1365_p2;
reg   [31:0] j_4_reg_1880;
wire    ap_CS_fsm_state44;
reg   [3:0] A_addr_8_reg_1888;
wire   [0:0] icmp_ln96_fu_1371_p2;
wire   [31:0] grp_fu_408_p2;
reg   [31:0] tmp_7_reg_1899;
wire   [31:0] grp_fu_404_p2;
reg   [31:0] tmp_10_reg_1904;
wire    ap_CS_fsm_state53;
wire   [31:0] zext_ln104_fu_1401_p1;
reg   [31:0] zext_ln104_reg_1909;
wire    ap_CS_fsm_state55;
wire   [1:0] i_1_fu_1411_p2;
reg   [1:0] i_1_reg_1918;
wire   [4:0] zext_ln110_fu_1417_p1;
reg   [4:0] zext_ln110_reg_1923;
wire   [0:0] icmp_ln104_fu_1405_p2;
reg   [3:0] L_addr_reg_1928;
wire   [0:0] icmp_ln109_fu_1440_p2;
reg   [0:0] icmp_ln109_reg_1936;
wire    ap_CS_fsm_state56;
wire   [0:0] icmp_ln106_fu_1434_p2;
wire  signed [63:0] sext_ln112_fu_1472_p1;
reg  signed [63:0] sext_ln112_reg_1940;
wire   [31:0] j_3_fu_1477_p2;
wire    ap_CS_fsm_state57;
wire   [31:0] zext_ln117_fu_1483_p1;
wire    ap_CS_fsm_state58;
wire   [1:0] i_2_fu_1493_p2;
reg   [1:0] i_2_reg_1963;
wire   [4:0] sub_ln122_fu_1515_p2;
reg   [4:0] sub_ln122_reg_1968;
wire   [0:0] icmp_ln117_fu_1487_p2;
wire  signed [63:0] sext_ln122_fu_1536_p1;
reg  signed [63:0] sext_ln122_reg_1976;
wire    ap_CS_fsm_state59;
wire   [0:0] icmp_ln119_fu_1521_p2;
wire   [31:0] j_2_fu_1541_p2;
reg   [31:0] j_2_reg_1986;
reg   [1:0] i_0_reg_245;
wire    ap_CS_fsm_state7;
reg   [1:0] pos_reg_257;
wire   [0:0] icmp_ln17_fu_480_p2;
reg   [31:0] max_0_reg_269;
reg   [31:0] pos_0_reg_279;
reg   [31:0] k_0_in_reg_289;
reg   [1:0] k_1_reg_298;
wire    ap_CS_fsm_state17;
wire   [1:0] ap_phi_mux_ind1_phi_fu_313_p4;
reg   [1:0] ind1_reg_309;
wire    ap_CS_fsm_state26;
reg   [31:0] phi_ln79_reg_320;
reg   [31:0] k_2_in_reg_332;
reg   [31:0] j_0_in_reg_341;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state54;
reg   [1:0] j_reg_350;
reg   [31:0] j5_0_reg_361;
reg   [1:0] j_1_reg_371;
reg   [31:0] j7_0_reg_382;
wire    ap_CS_fsm_state60;
reg   [0:0] p_0_reg_391;
wire   [63:0] zext_ln40_1_fu_607_p1;
wire  signed [63:0] sext_ln49_fu_678_p1;
wire  signed [63:0] sext_ln58_fu_725_p1;
wire  signed [63:0] sext_ln70_fu_917_p1;
wire  signed [63:0] sext_ln71_fu_927_p1;
wire  signed [63:0] sext_ln95_fu_1360_p1;
wire  signed [63:0] sext_ln99_fu_1386_p1;
wire  signed [63:0] sext_ln99_1_fu_1396_p1;
wire   [63:0] zext_ln110_1_fu_1429_p1;
reg   [31:0] P_2_0_fu_84;
wire   [31:0] P_2_1_fu_527_p3;
reg   [31:0] P_1_0_fu_88;
wire   [31:0] P_1_1_fu_535_p3;
reg   [31:0] P_0_0_fu_92;
wire   [31:0] P_0_1_fu_551_p3;
reg   [31:0] ind2_1_fu_96;
wire   [31:0] ind2_4_fu_1304_p3;
reg   [31:0] ind2_2_fu_100;
wire   [31:0] ind2_fu_1282_p3;
reg   [31:0] P_2_2_fu_104;
wire   [31:0] P_2_4_fu_1163_p3;
reg   [31:0] P_1_2_fu_108;
wire   [31:0] P_1_4_fu_1179_p3;
reg   [31:0] P_0_2_fu_112;
wire   [31:0] P_0_4_fu_1203_p3;
reg   [31:0] P_3_0_fu_116;
wire   [31:0] P_3_2_fu_1155_p3;
wire   [31:0] grp_fu_414_p2;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state49;
reg   [31:0] grp_fu_421_p0;
reg   [31:0] grp_fu_428_p0;
reg   [31:0] grp_fu_428_p1;
reg   [31:0] grp_fu_433_p0;
reg   [31:0] grp_fu_433_p1;
wire   [0:0] icmp_ln19_fu_507_p2;
wire   [0:0] icmp_ln19_1_fu_521_p2;
wire   [31:0] select_ln19_fu_513_p3;
wire   [31:0] select_ln19_1_fu_543_p3;
wire   [4:0] zext_ln40_2_fu_616_p1;
wire   [22:0] trunc_ln50_fu_629_p1;
wire   [2:0] trunc_ln49_1_fu_655_p1;
wire   [4:0] sext_ln49_1_cast_fu_659_p3;
wire   [4:0] trunc_ln49_fu_651_p1;
wire   [4:0] sub_ln49_fu_667_p2;
wire   [4:0] add_ln49_fu_673_p2;
wire   [7:0] tmp_12_fu_683_p4;
wire   [2:0] trunc_ln58_1_fu_702_p1;
wire   [4:0] sext_ln58_1_cast_fu_706_p3;
wire   [4:0] trunc_ln58_fu_698_p1;
wire   [4:0] add_ln58_fu_720_p2;
wire   [31:0] bitcast_ln50_fu_730_p1;
wire   [7:0] tmp_11_fu_734_p4;
wire   [22:0] trunc_ln50_1_fu_744_p1;
wire   [0:0] icmp_ln50_1_fu_754_p2;
wire   [0:0] icmp_ln50_fu_748_p2;
wire   [0:0] or_ln50_fu_760_p2;
wire   [0:0] or_ln50_1_fu_766_p2;
wire   [0:0] and_ln50_1_fu_770_p2;
wire   [0:0] grp_fu_428_p2;
wire   [31:0] bitcast_ln50_2_fu_782_p1;
wire   [7:0] tmp_21_fu_786_p4;
wire   [22:0] trunc_ln50_2_fu_796_p1;
wire   [0:0] icmp_ln50_5_fu_806_p2;
wire   [0:0] icmp_ln50_4_fu_800_p2;
wire   [0:0] or_ln50_2_fu_812_p2;
wire   [0:0] and_ln50_3_fu_818_p2;
wire   [0:0] grp_fu_433_p2;
wire   [0:0] and_ln50_2_fu_776_p2;
wire   [0:0] and_ln50_4_fu_824_p2;
wire   [0:0] and_ln50_fu_830_p2;
wire   [31:0] bitcast_ln58_fu_851_p1;
wire   [7:0] tmp_3_fu_855_p4;
wire   [22:0] trunc_ln58_2_fu_865_p1;
wire   [0:0] or_ln58_fu_881_p2;
wire   [4:0] zext_ln70_fu_908_p1;
wire   [4:0] add_ln70_fu_912_p2;
wire   [4:0] add_ln71_fu_922_p2;
wire   [22:0] trunc_ln79_fu_935_p1;
wire   [22:0] trunc_ln81_fu_948_p1;
wire   [7:0] tmp_26_fu_974_p4;
wire   [7:0] tmp_28_fu_989_p4;
wire   [1:0] trunc_ln84_fu_1007_p1;
wire   [1:0] trunc_ln85_fu_1022_p1;
wire   [0:0] icmp_ln85_fu_1037_p2;
wire   [31:0] tmp_23_fu_1026_p6;
wire   [0:0] icmp_ln85_1_fu_1051_p2;
wire   [31:0] select_ln85_fu_1043_p3;
wire   [0:0] icmp_ln85_2_fu_1065_p2;
wire   [31:0] select_ln85_1_fu_1057_p3;
wire   [31:0] select_ln85_2_fu_1086_p3;
wire   [31:0] select_ln85_3_fu_1100_p3;
wire   [31:0] select_ln85_4_fu_1107_p3;
wire   [0:0] icmp_ln86_fu_1121_p2;
wire   [31:0] P_3_1_fu_1071_p3;
wire   [31:0] temp_fu_1011_p6;
wire   [0:0] icmp_ln86_1_fu_1135_p2;
wire   [31:0] select_ln86_fu_1127_p3;
wire   [0:0] icmp_ln86_2_fu_1149_p2;
wire   [31:0] select_ln86_1_fu_1141_p3;
wire   [31:0] P_2_3_fu_1079_p3;
wire   [31:0] P_1_3_fu_1093_p3;
wire   [31:0] select_ln86_2_fu_1171_p3;
wire   [31:0] P_0_3_fu_1114_p3;
wire   [31:0] select_ln86_3_fu_1187_p3;
wire   [31:0] select_ln86_4_fu_1195_p3;
wire   [31:0] bitcast_ln79_fu_1231_p1;
wire   [7:0] tmp_25_fu_1235_p4;
wire   [22:0] trunc_ln79_1_fu_1245_p1;
wire   [0:0] icmp_ln79_1_fu_1255_p2;
wire   [0:0] icmp_ln79_fu_1249_p2;
wire   [0:0] or_ln79_1_fu_1267_p2;
wire   [0:0] and_ln79_fu_1271_p2;
wire   [0:0] and_ln79_1_fu_1276_p2;
wire   [0:0] or_ln81_fu_1289_p2;
wire   [0:0] and_ln81_fu_1293_p2;
wire   [0:0] and_ln81_1_fu_1298_p2;
wire   [2:0] trunc_ln95_1_fu_1337_p1;
wire   [4:0] sext_ln95_1_cast_fu_1341_p3;
wire   [4:0] trunc_ln95_fu_1333_p1;
wire   [4:0] add_ln95_fu_1355_p2;
wire   [4:0] trunc_ln99_fu_1377_p1;
wire   [4:0] add_ln99_fu_1381_p2;
wire   [4:0] add_ln99_1_fu_1391_p2;
wire   [3:0] tmp_16_fu_1421_p3;
wire   [2:0] trunc_ln112_1_fu_1449_p1;
wire   [4:0] sext_ln112_1_cast_fu_1453_p3;
wire   [4:0] trunc_ln112_fu_1445_p1;
wire   [4:0] sub_ln112_fu_1461_p2;
wire   [4:0] add_ln112_fu_1467_p2;
wire   [3:0] tmp_24_fu_1503_p3;
wire   [4:0] zext_ln122_1_fu_1511_p1;
wire   [4:0] zext_ln122_fu_1499_p1;
wire   [4:0] trunc_ln122_fu_1527_p1;
wire   [4:0] add_ln122_fu_1531_p2;
wire    ap_CS_fsm_state61;
reg   [4:0] grp_fu_428_opcode;
reg   [4:0] grp_fu_433_opcode;
reg   [0:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg   [60:0] ap_NS_fsm;
reg    ap_condition_289;

// power-on initialization
initial begin
#0 ap_CS_fsm = 61'd1;
#0 ap_return_0_preg = 1'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 32'd0;
end

inverse_top_fsub_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
inverse_top_fsub_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_457),
    .din1(tmp_7_reg_1899),
    .ce(1'b1),
    .dout(grp_fu_404_p2)
);

inverse_top_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
inverse_top_fmul_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_q0),
    .din1(A_q1),
    .ce(1'b1),
    .dout(grp_fu_408_p2)
);

inverse_top_fdiv_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
inverse_top_fdiv_dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_q1),
    .din1(A_q0),
    .ce(1'b1),
    .dout(grp_fu_414_p2)
);

inverse_top_sitofeOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
inverse_top_sitofeOg_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_421_p0),
    .ce(1'b1),
    .dout(grp_fu_421_p1)
);

inverse_top_sitofeOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
inverse_top_sitofeOg_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(zext_ln34_reg_1668),
    .ce(1'b1),
    .dout(grp_fu_425_p1)
);

inverse_top_fcmp_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
inverse_top_fcmp_fYi_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_428_p0),
    .din1(grp_fu_428_p1),
    .ce(1'b1),
    .opcode(grp_fu_428_opcode),
    .dout(grp_fu_428_p2)
);

inverse_top_fcmp_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
inverse_top_fcmp_fYi_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_433_p0),
    .din1(grp_fu_433_p1),
    .ce(1'b1),
    .opcode(grp_fu_433_opcode),
    .dout(grp_fu_433_p2)
);

inverse_top_mux_4g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
inverse_top_mux_4g8j_U8(
    .din0(P_0_2_load_reg_1657),
    .din1(P_1_2_load_reg_1647),
    .din2(P_2_2_load_reg_1638),
    .din3(P_3_0_fu_116),
    .din4(trunc_ln84_fu_1007_p1),
    .dout(temp_fu_1011_p6)
);

inverse_top_mux_4g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
inverse_top_mux_4g8j_U9(
    .din0(P_0_2_load_reg_1657),
    .din1(P_1_2_load_reg_1647),
    .din2(P_2_2_load_reg_1638),
    .din3(P_3_0_fu_116),
    .din4(trunc_ln85_fu_1022_p1),
    .dout(tmp_23_fu_1026_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state61)) begin
            ap_return_0_preg <= p_0_reg_391;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state61)) begin
            ap_return_1_preg <= P_0_2_load_reg_1657;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state61)) begin
            ap_return_2_preg <= P_1_2_load_reg_1647;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state61)) begin
            ap_return_3_preg <= P_2_2_load_reg_1638;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_962_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln65_reg_1777 == 1'd0))) begin
        P_0_2_fu_112 <= P_0_4_fu_1203_p3;
    end else if (((icmp_ln17_fu_480_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        P_0_2_fu_112 <= P_0_0_fu_92;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_962_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln65_reg_1777 == 1'd0))) begin
        P_1_2_fu_108 <= P_1_4_fu_1179_p3;
    end else if (((icmp_ln17_fu_480_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        P_1_2_fu_108 <= P_1_0_fu_88;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_962_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln65_reg_1777 == 1'd0))) begin
        P_2_2_fu_104 <= P_2_4_fu_1163_p3;
    end else if (((icmp_ln17_fu_480_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        P_2_2_fu_104 <= P_2_0_fu_84;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_reg_245 <= i_reg_1594;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_245 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ind1_reg_309 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        ind1_reg_309 <= i1_reg_1841;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        j5_0_reg_361 <= j_3_fu_1477_p2;
    end else if (((1'b1 == ap_CS_fsm_state55) & (icmp_ln104_fu_1405_p2 == 1'd0))) begin
        j5_0_reg_361 <= zext_ln104_fu_1401_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        j7_0_reg_382 <= j_2_reg_1986;
    end else if (((1'b1 == ap_CS_fsm_state58) & (icmp_ln117_fu_1487_p2 == 1'd0))) begin
        j7_0_reg_382 <= zext_ln117_fu_1483_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        j_0_in_reg_341 <= j_4_reg_1880;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        j_0_in_reg_341 <= zext_ln34_reg_1668;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln104_fu_1405_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state55))) begin
        j_1_reg_371 <= 2'd0;
    end else if (((icmp_ln119_fu_1521_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
        j_1_reg_371 <= i_2_reg_1963;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln34_fu_587_p2 == 1'd1))) begin
        j_reg_350 <= 2'd0;
    end else if (((icmp_ln106_fu_1434_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state56))) begin
        j_reg_350 <= i_1_reg_1918;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        k_0_in_reg_289 <= pos_2_reg_1725;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        k_0_in_reg_289 <= zext_ln34_reg_1668;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd0 == and_ln58_fu_885_p2) & (icmp_ln65_fu_891_p2 == 1'd0))) begin
        k_1_reg_298 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        k_1_reg_298 <= k_2_reg_1784;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (icmp_ln96_fu_1371_p2 == 1'd0))) begin
        k_2_in_reg_332 <= k_3_reg_1862;
    end else if (((1'b1 == ap_CS_fsm_state24) & ((icmp_ln77_fu_962_p2 == 1'd1) | (icmp_ln65_reg_1777 == 1'd1)))) begin
        k_2_in_reg_332 <= zext_ln34_reg_1668;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        max_0_reg_269 <= select_ln50_fu_836_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        max_0_reg_269 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln58_fu_885_p2) & (1'b1 == ap_CS_fsm_state14))) begin
        p_0_reg_391 <= 1'd1;
    end else if (((icmp_ln117_fu_1487_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
        p_0_reg_391 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_289)) begin
        if ((ap_phi_mux_ind1_phi_fu_313_p4 == 2'd0)) begin
            phi_ln79_reg_320 <= P_0_2_load_reg_1657;
        end else if ((~(ap_phi_mux_ind1_phi_fu_313_p4 == 2'd0) & ~(ap_phi_mux_ind1_phi_fu_313_p4 == 2'd1))) begin
            phi_ln79_reg_320 <= P_2_2_load_reg_1638;
        end else if ((ap_phi_mux_ind1_phi_fu_313_p4 == 2'd1)) begin
            phi_ln79_reg_320 <= P_1_2_load_reg_1647;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        pos_0_reg_279 <= select_ln50_1_fu_844_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        pos_0_reg_279 <= zext_ln34_reg_1668;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_480_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        pos_reg_257 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state27) & (icmp_ln92_fu_1327_p2 == 1'd0))) begin
        pos_reg_257 <= i_3_reg_1681;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        reg_457 <= A_q1;
    end else if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_457 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln67_fu_896_p2 == 1'd0))) begin
        A_addr_5_reg_1789 <= sext_ln70_fu_917_p1;
        A_addr_6_reg_1795 <= sext_ln71_fu_927_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_fu_1327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state27))) begin
        A_addr_7_reg_1875 <= sext_ln95_fu_1360_p1;
        sub_ln95_reg_1870 <= sub_ln95_fu_1349_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_fu_1371_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
        A_addr_8_reg_1888 <= sext_ln99_fu_1386_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln34_fu_587_p2 == 1'd0))) begin
        A_addr_reg_1691[3 : 2] <= zext_ln40_1_fu_607_p1[3 : 2];
        tmp_9_reg_1686[3 : 2] <= tmp_9_fu_599_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state55) & (icmp_ln104_fu_1405_p2 == 1'd0))) begin
        L_addr_reg_1928[3 : 2] <= zext_ln110_1_fu_1429_p1[3 : 2];
        zext_ln110_reg_1923[1 : 0] <= zext_ln110_fu_1417_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        P_0_0_fu_92 <= P_0_1_fu_551_p3;
        P_1_0_fu_88 <= P_1_1_fu_535_p3;
        P_2_0_fu_84 <= P_2_1_fu_527_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        P_0_2_load_reg_1657 <= P_0_2_fu_112;
        P_1_2_load_reg_1647 <= P_1_2_fu_108;
        P_2_2_load_reg_1638 <= P_2_2_fu_104;
        i_3_reg_1681 <= i_3_fu_593_p2;
        zext_ln34_reg_1668[1 : 0] <= zext_ln34_fu_583_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_962_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln65_reg_1777 == 1'd0))) begin
        P_3_0_fu_116 <= P_3_2_fu_1155_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        bitcast_ln50_1_reg_1715 <= bitcast_ln50_1_fu_625_p1;
        icmp_ln50_3_reg_1720 <= icmp_ln50_3_fu_633_p2;
        max_reg_1709 <= A_q0;
        sub_ln40_reg_1703 <= sub_ln40_fu_619_p2;
        zext_ln40_reg_1696[1 : 0] <= zext_ln40_fu_612_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        bitcast_ln79_1_reg_1812 <= bitcast_ln79_1_fu_932_p1;
        bitcast_ln81_reg_1822 <= bitcast_ln81_fu_945_p1;
        icmp_ln79_3_reg_1817 <= icmp_ln79_3_fu_939_p2;
        icmp_ln81_reg_1827 <= icmp_ln81_fu_952_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln65_reg_1777 == 1'd0))) begin
        i1_reg_1841 <= i1_fu_968_p2;
        zext_ln77_reg_1832[1 : 0] <= zext_ln77_fu_958_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        i_1_reg_1918 <= i_1_fu_1411_p2;
        zext_ln104_reg_1909[1 : 0] <= zext_ln104_fu_1401_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        i_2_reg_1963 <= i_2_fu_1493_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1594 <= i_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln106_fu_1434_p2 == 1'd0))) begin
        icmp_ln109_reg_1936 <= icmp_ln109_fu_1440_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln46_fu_645_p2 == 1'd0))) begin
        icmp_ln50_2_reg_1739 <= icmp_ln50_2_fu_692_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        icmp_ln58_1_reg_1769 <= icmp_ln58_1_fu_875_p2;
        icmp_ln58_reg_1764 <= icmp_ln58_fu_869_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd0 == and_ln58_fu_885_p2))) begin
        icmp_ln65_reg_1777 <= icmp_ln65_fu_891_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (icmp_ln77_fu_962_p2 == 1'd0) & (icmp_ln65_reg_1777 == 1'd0))) begin
        icmp_ln79_2_reg_1846 <= icmp_ln79_2_fu_983_p2;
        icmp_ln81_1_reg_1851 <= icmp_ln81_1_fu_998_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ind2_1_fu_96 <= ind2_4_fu_1304_p3;
        ind2_2_fu_100 <= ind2_fu_1282_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state59) & (icmp_ln119_fu_1521_p2 == 1'd0))) begin
        j_2_reg_1986 <= j_2_fu_1541_p2;
        sext_ln122_reg_1976 <= sext_ln122_fu_1536_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        j_4_reg_1880 <= j_4_fu_1365_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        k_2_reg_1784 <= k_2_fu_902_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        k_3_reg_1862 <= k_3_fu_1321_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        or_ln79_reg_1856 <= or_ln79_fu_1261_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        pos_2_reg_1725 <= pos_2_fu_639_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state56) & (icmp_ln106_fu_1434_p2 == 1'd0) & (icmp_ln109_fu_1440_p2 == 1'd0))) begin
        sext_ln112_reg_1940 <= sext_ln112_fu_1472_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state58) & (icmp_ln117_fu_1487_p2 == 1'd0))) begin
        sub_ln122_reg_1968 <= sub_ln122_fu_1515_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_645_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        sub_ln58_reg_1744 <= sub_ln58_fu_714_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        tmp_10_reg_1904 <= grp_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_5_reg_1800 <= grp_fu_421_p1;
        tmp_6_reg_1806 <= grp_fu_425_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        tmp_7_reg_1899 <= grp_fu_408_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        A_address0 = sext_ln112_fu_1472_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        A_address0 = A_addr_8_reg_1888;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        A_address0 = sext_ln99_1_fu_1396_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        A_address0 = A_addr_reg_1691;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        A_address0 = sext_ln70_fu_917_p1;
    end else if (((icmp_ln46_fu_645_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        A_address0 = sext_ln58_fu_725_p1;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln46_fu_645_p2 == 1'd0))) begin
        A_address0 = sext_ln49_fu_678_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        A_address0 = zext_ln40_1_fu_607_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        A_address1 = sext_ln122_fu_1536_p1;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        A_address1 = A_addr_8_reg_1888;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44))) begin
        A_address1 = A_addr_7_reg_1875;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        A_address1 = sext_ln95_fu_1360_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        A_address1 = A_addr_6_reg_1795;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        A_address1 = A_addr_5_reg_1789;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        A_address1 = sext_ln71_fu_927_p1;
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8) | ((icmp_ln46_fu_645_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln46_fu_645_p2 == 1'd0)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        A_d1 = tmp_10_reg_1904;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        A_d1 = grp_fu_414_p2;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        A_d1 = reg_457;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        A_d1 = A_q1;
    end else begin
        A_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        A_we1 = 1'b1;
    end else begin
        A_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        L_address0 = sext_ln112_reg_1940;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        L_address0 = L_addr_reg_1928;
    end else begin
        L_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56))) begin
        L_ce0 = 1'b1;
    end else begin
        L_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        L_d0 = A_q0;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        L_d0 = 32'd1065353216;
    end else begin
        L_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state57) & (icmp_ln109_reg_1936 == 1'd0)) | ((icmp_ln109_fu_1440_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state56) & (icmp_ln106_fu_1434_p2 == 1'd0)))) begin
        L_we0 = 1'b1;
    end else begin
        L_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        U_ce0 = 1'b1;
    end else begin
        U_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        U_we0 = 1'b1;
    end else begin
        U_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        ap_return_0 = p_0_reg_391;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        ap_return_1 = P_0_2_load_reg_1657;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        ap_return_2 = P_1_2_load_reg_1647;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        ap_return_3 = P_2_2_load_reg_1638;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_421_p0 = pos_0_reg_279;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_421_p0 = zext_ln17_fu_475_p1;
    end else begin
        grp_fu_421_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_428_opcode = 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_428_opcode = 5'd2;
    end else begin
        grp_fu_428_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_428_p0 = phi_ln79_reg_320;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_428_p0 = A_q0;
    end else begin
        grp_fu_428_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_428_p1 = tmp_5_reg_1800;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_428_p1 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_428_p1 = max_reg_1709;
    end else begin
        grp_fu_428_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_433_opcode = 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_433_opcode = 5'd2;
    end else begin
        grp_fu_433_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_433_p0 = phi_ln79_reg_320;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_433_p0 = A_q0;
    end else begin
        grp_fu_433_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_433_p1 = tmp_6_reg_1806;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_433_p1 = max_0_reg_269;
    end else begin
        grp_fu_433_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln17_fu_480_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln34_fu_587_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln46_fu_645_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'd1 == and_ln58_fu_885_p2) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else if (((1'b1 == ap_CS_fsm_state14) & (1'd0 == and_ln58_fu_885_p2) & (icmp_ln65_fu_891_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln67_fu_896_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & ((icmp_ln77_fu_962_p2 == 1'd1) | (icmp_ln65_reg_1777 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (icmp_ln92_fu_1327_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (icmp_ln96_fu_1371_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state55 : begin
            if (((icmp_ln104_fu_1405_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state55))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state56;
            end
        end
        ap_ST_fsm_state56 : begin
            if (((icmp_ln106_fu_1434_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state56))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state58 : begin
            if (((icmp_ln117_fu_1487_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end
        end
        ap_ST_fsm_state59 : begin
            if (((icmp_ln119_fu_1521_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state59))) begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign P_0_1_fu_551_p3 = ((icmp_ln19_1_fu_521_p2[0:0] === 1'b1) ? P_0_0_fu_92 : select_ln19_1_fu_543_p3);

assign P_0_3_fu_1114_p3 = ((icmp_ln85_2_fu_1065_p2[0:0] === 1'b1) ? P_0_2_load_reg_1657 : select_ln85_4_fu_1107_p3);

assign P_0_4_fu_1203_p3 = ((icmp_ln86_2_fu_1149_p2[0:0] === 1'b1) ? P_0_3_fu_1114_p3 : select_ln86_4_fu_1195_p3);

assign P_1_1_fu_535_p3 = ((icmp_ln19_1_fu_521_p2[0:0] === 1'b1) ? grp_fu_421_p1 : P_1_0_fu_88);

assign P_1_3_fu_1093_p3 = ((icmp_ln85_2_fu_1065_p2[0:0] === 1'b1) ? P_1_2_load_reg_1647 : select_ln85_2_fu_1086_p3);

assign P_1_4_fu_1179_p3 = ((icmp_ln86_2_fu_1149_p2[0:0] === 1'b1) ? P_1_3_fu_1093_p3 : select_ln86_2_fu_1171_p3);

assign P_2_1_fu_527_p3 = ((icmp_ln19_1_fu_521_p2[0:0] === 1'b1) ? P_2_0_fu_84 : select_ln19_fu_513_p3);

assign P_2_3_fu_1079_p3 = ((icmp_ln85_2_fu_1065_p2[0:0] === 1'b1) ? tmp_23_fu_1026_p6 : P_2_2_load_reg_1638);

assign P_2_4_fu_1163_p3 = ((icmp_ln86_2_fu_1149_p2[0:0] === 1'b1) ? temp_fu_1011_p6 : P_2_3_fu_1079_p3);

assign P_3_1_fu_1071_p3 = ((icmp_ln85_2_fu_1065_p2[0:0] === 1'b1) ? P_3_0_fu_116 : select_ln85_1_fu_1057_p3);

assign P_3_2_fu_1155_p3 = ((icmp_ln86_2_fu_1149_p2[0:0] === 1'b1) ? P_3_1_fu_1071_p3 : select_ln86_1_fu_1141_p3);

assign U_address0 = sext_ln122_reg_1976;

assign U_d0 = A_q1;

assign add_ln112_fu_1467_p2 = (zext_ln110_reg_1923 + sub_ln112_fu_1461_p2);

assign add_ln122_fu_1531_p2 = (sub_ln122_reg_1968 + trunc_ln122_fu_1527_p1);

assign add_ln49_fu_673_p2 = (zext_ln40_reg_1696 + sub_ln49_fu_667_p2);

assign add_ln58_fu_720_p2 = (zext_ln40_reg_1696 + sub_ln58_fu_714_p2);

assign add_ln70_fu_912_p2 = (sub_ln58_reg_1744 + zext_ln70_fu_908_p1);

assign add_ln71_fu_922_p2 = (sub_ln40_reg_1703 + zext_ln70_fu_908_p1);

assign add_ln95_fu_1355_p2 = (zext_ln40_reg_1696 + sub_ln95_fu_1349_p2);

assign add_ln99_1_fu_1391_p2 = (sub_ln40_reg_1703 + trunc_ln99_fu_1377_p1);

assign add_ln99_fu_1381_p2 = (sub_ln95_reg_1870 + trunc_ln99_fu_1377_p1);

assign and_ln50_1_fu_770_p2 = (or_ln50_fu_760_p2 & or_ln50_1_fu_766_p2);

assign and_ln50_2_fu_776_p2 = (grp_fu_428_p2 & and_ln50_1_fu_770_p2);

assign and_ln50_3_fu_818_p2 = (or_ln50_fu_760_p2 & or_ln50_2_fu_812_p2);

assign and_ln50_4_fu_824_p2 = (grp_fu_433_p2 & and_ln50_3_fu_818_p2);

assign and_ln50_fu_830_p2 = (and_ln50_4_fu_824_p2 & and_ln50_2_fu_776_p2);

assign and_ln58_fu_885_p2 = (or_ln58_fu_881_p2 & grp_fu_428_p2);

assign and_ln79_1_fu_1276_p2 = (grp_fu_428_p2 & and_ln79_fu_1271_p2);

assign and_ln79_fu_1271_p2 = (or_ln79_reg_1856 & or_ln79_1_fu_1267_p2);

assign and_ln81_1_fu_1298_p2 = (grp_fu_433_p2 & and_ln81_fu_1293_p2);

assign and_ln81_fu_1293_p2 = (or_ln81_fu_1289_p2 & or_ln79_reg_1856);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_condition_289 = ((1'b1 == ap_CS_fsm_state24) & (icmp_ln77_fu_962_p2 == 1'd0) & (icmp_ln65_reg_1777 == 1'd0));
end

assign ap_phi_mux_ind1_phi_fu_313_p4 = ind1_reg_309;

assign bitcast_ln50_1_fu_625_p1 = A_q0;

assign bitcast_ln50_2_fu_782_p1 = max_0_reg_269;

assign bitcast_ln50_fu_730_p1 = reg_457;

assign bitcast_ln58_fu_851_p1 = A_q0;

assign bitcast_ln79_1_fu_932_p1 = tmp_5_reg_1800;

assign bitcast_ln79_fu_1231_p1 = phi_ln79_reg_320;

assign bitcast_ln81_fu_945_p1 = tmp_6_reg_1806;

assign i1_fu_968_p2 = (ind1_reg_309 + 2'd1);

assign i_1_fu_1411_p2 = (j_reg_350 + 2'd1);

assign i_2_fu_1493_p2 = (j_1_reg_371 + 2'd1);

assign i_3_fu_593_p2 = (pos_reg_257 + 2'd1);

assign i_fu_486_p2 = (i_0_reg_245 + 2'd1);

assign icmp_ln104_fu_1405_p2 = ((j_reg_350 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln106_fu_1434_p2 = ((j5_0_reg_361 == 32'd3) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_1440_p2 = ((zext_ln104_reg_1909 == j5_0_reg_361) ? 1'b1 : 1'b0);

assign icmp_ln117_fu_1487_p2 = ((j_1_reg_371 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln119_fu_1521_p2 = ((j7_0_reg_382 == 32'd3) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_480_p2 = ((i_0_reg_245 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln19_1_fu_521_p2 = ((i_0_reg_245 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_507_p2 = ((i_0_reg_245 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_587_p2 = ((pos_reg_257 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_645_p2 = ((k_0_in_reg_289 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln50_1_fu_754_p2 = ((trunc_ln50_1_fu_744_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_2_fu_692_p2 = ((tmp_12_fu_683_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln50_3_fu_633_p2 = ((trunc_ln50_fu_629_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_4_fu_800_p2 = ((tmp_21_fu_786_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln50_5_fu_806_p2 = ((trunc_ln50_2_fu_796_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_748_p2 = ((tmp_11_fu_734_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln58_1_fu_875_p2 = ((trunc_ln58_2_fu_865_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_869_p2 = ((tmp_3_fu_855_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_891_p2 = ((pos_0_reg_279 == zext_ln34_reg_1668) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_896_p2 = ((k_1_reg_298 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_962_p2 = ((ind1_reg_309 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln79_1_fu_1255_p2 = ((trunc_ln79_1_fu_1245_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln79_2_fu_983_p2 = ((tmp_26_fu_974_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln79_3_fu_939_p2 = ((trunc_ln79_fu_935_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_1249_p2 = ((tmp_25_fu_1235_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln81_1_fu_998_p2 = ((tmp_28_fu_989_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_952_p2 = ((trunc_ln81_fu_948_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln85_1_fu_1051_p2 = ((trunc_ln84_fu_1007_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln85_2_fu_1065_p2 = ((trunc_ln84_fu_1007_p1 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_1037_p2 = ((trunc_ln84_fu_1007_p1 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln86_1_fu_1135_p2 = ((trunc_ln85_fu_1022_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln86_2_fu_1149_p2 = ((trunc_ln85_fu_1022_p1 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_1121_p2 = ((trunc_ln85_fu_1022_p1 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_1327_p2 = (($signed(k_3_fu_1321_p2) < $signed(32'd3)) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_1371_p2 = (($signed(j_4_fu_1365_p2) < $signed(32'd3)) ? 1'b1 : 1'b0);

assign ind2_4_fu_1304_p3 = ((and_ln81_1_fu_1298_p2[0:0] === 1'b1) ? zext_ln77_reg_1832 : ind2_1_fu_96);

assign ind2_fu_1282_p3 = ((and_ln79_1_fu_1276_p2[0:0] === 1'b1) ? zext_ln77_reg_1832 : ind2_2_fu_100);

assign j_2_fu_1541_p2 = (32'd1 + j7_0_reg_382);

assign j_3_fu_1477_p2 = (j5_0_reg_361 + 32'd1);

assign j_4_fu_1365_p2 = (j_0_in_reg_341 + 32'd1);

assign k_2_fu_902_p2 = (k_1_reg_298 + 2'd1);

assign k_3_fu_1321_p2 = (k_2_in_reg_332 + 32'd1);

assign or_ln50_1_fu_766_p2 = (icmp_ln50_3_reg_1720 | icmp_ln50_2_reg_1739);

assign or_ln50_2_fu_812_p2 = (icmp_ln50_5_fu_806_p2 | icmp_ln50_4_fu_800_p2);

assign or_ln50_fu_760_p2 = (icmp_ln50_fu_748_p2 | icmp_ln50_1_fu_754_p2);

assign or_ln58_fu_881_p2 = (icmp_ln58_reg_1764 | icmp_ln58_1_reg_1769);

assign or_ln79_1_fu_1267_p2 = (icmp_ln79_3_reg_1817 | icmp_ln79_2_reg_1846);

assign or_ln79_fu_1261_p2 = (icmp_ln79_fu_1249_p2 | icmp_ln79_1_fu_1255_p2);

assign or_ln81_fu_1289_p2 = (icmp_ln81_reg_1827 | icmp_ln81_1_reg_1851);

assign pos_2_fu_639_p2 = (k_0_in_reg_289 + 32'd1);

assign select_ln19_1_fu_543_p3 = ((icmp_ln19_fu_507_p2[0:0] === 1'b1) ? grp_fu_421_p1 : P_0_0_fu_92);

assign select_ln19_fu_513_p3 = ((icmp_ln19_fu_507_p2[0:0] === 1'b1) ? P_2_0_fu_84 : grp_fu_421_p1);

assign select_ln50_1_fu_844_p3 = ((and_ln50_fu_830_p2[0:0] === 1'b1) ? pos_2_reg_1725 : pos_0_reg_279);

assign select_ln50_fu_836_p3 = ((and_ln50_fu_830_p2[0:0] === 1'b1) ? reg_457 : max_0_reg_269);

assign select_ln85_1_fu_1057_p3 = ((icmp_ln85_1_fu_1051_p2[0:0] === 1'b1) ? P_3_0_fu_116 : select_ln85_fu_1043_p3);

assign select_ln85_2_fu_1086_p3 = ((icmp_ln85_1_fu_1051_p2[0:0] === 1'b1) ? tmp_23_fu_1026_p6 : P_1_2_load_reg_1647);

assign select_ln85_3_fu_1100_p3 = ((icmp_ln85_fu_1037_p2[0:0] === 1'b1) ? tmp_23_fu_1026_p6 : P_0_2_load_reg_1657);

assign select_ln85_4_fu_1107_p3 = ((icmp_ln85_1_fu_1051_p2[0:0] === 1'b1) ? P_0_2_load_reg_1657 : select_ln85_3_fu_1100_p3);

assign select_ln85_fu_1043_p3 = ((icmp_ln85_fu_1037_p2[0:0] === 1'b1) ? P_3_0_fu_116 : tmp_23_fu_1026_p6);

assign select_ln86_1_fu_1141_p3 = ((icmp_ln86_1_fu_1135_p2[0:0] === 1'b1) ? P_3_1_fu_1071_p3 : select_ln86_fu_1127_p3);

assign select_ln86_2_fu_1171_p3 = ((icmp_ln86_1_fu_1135_p2[0:0] === 1'b1) ? temp_fu_1011_p6 : P_1_3_fu_1093_p3);

assign select_ln86_3_fu_1187_p3 = ((icmp_ln86_fu_1121_p2[0:0] === 1'b1) ? temp_fu_1011_p6 : P_0_3_fu_1114_p3);

assign select_ln86_4_fu_1195_p3 = ((icmp_ln86_1_fu_1135_p2[0:0] === 1'b1) ? P_0_3_fu_1114_p3 : select_ln86_3_fu_1187_p3);

assign select_ln86_fu_1127_p3 = ((icmp_ln86_fu_1121_p2[0:0] === 1'b1) ? P_3_1_fu_1071_p3 : temp_fu_1011_p6);

assign sext_ln112_1_cast_fu_1453_p3 = {{trunc_ln112_1_fu_1449_p1}, {2'd0}};

assign sext_ln112_fu_1472_p1 = $signed(add_ln112_fu_1467_p2);

assign sext_ln122_fu_1536_p1 = $signed(add_ln122_fu_1531_p2);

assign sext_ln49_1_cast_fu_659_p3 = {{trunc_ln49_1_fu_655_p1}, {2'd0}};

assign sext_ln49_fu_678_p1 = $signed(add_ln49_fu_673_p2);

assign sext_ln58_1_cast_fu_706_p3 = {{trunc_ln58_1_fu_702_p1}, {2'd0}};

assign sext_ln58_fu_725_p1 = $signed(add_ln58_fu_720_p2);

assign sext_ln70_fu_917_p1 = $signed(add_ln70_fu_912_p2);

assign sext_ln71_fu_927_p1 = $signed(add_ln71_fu_922_p2);

assign sext_ln95_1_cast_fu_1341_p3 = {{trunc_ln95_1_fu_1337_p1}, {2'd0}};

assign sext_ln95_fu_1360_p1 = $signed(add_ln95_fu_1355_p2);

assign sext_ln99_1_fu_1396_p1 = $signed(add_ln99_1_fu_1391_p2);

assign sext_ln99_fu_1386_p1 = $signed(add_ln99_fu_1381_p2);

assign sub_ln112_fu_1461_p2 = (sext_ln112_1_cast_fu_1453_p3 - trunc_ln112_fu_1445_p1);

assign sub_ln122_fu_1515_p2 = (zext_ln122_1_fu_1511_p1 - zext_ln122_fu_1499_p1);

assign sub_ln40_fu_619_p2 = (zext_ln40_2_fu_616_p1 - zext_ln40_fu_612_p1);

assign sub_ln49_fu_667_p2 = (sext_ln49_1_cast_fu_659_p3 - trunc_ln49_fu_651_p1);

assign sub_ln58_fu_714_p2 = (sext_ln58_1_cast_fu_706_p3 - trunc_ln58_fu_698_p1);

assign sub_ln95_fu_1349_p2 = (sext_ln95_1_cast_fu_1341_p3 - trunc_ln95_fu_1333_p1);

assign tmp_11_fu_734_p4 = {{bitcast_ln50_fu_730_p1[30:23]}};

assign tmp_12_fu_683_p4 = {{bitcast_ln50_1_reg_1715[30:23]}};

assign tmp_16_fu_1421_p3 = {{j_reg_350}, {2'd0}};

assign tmp_21_fu_786_p4 = {{bitcast_ln50_2_fu_782_p1[30:23]}};

assign tmp_24_fu_1503_p3 = {{j_1_reg_371}, {2'd0}};

assign tmp_25_fu_1235_p4 = {{bitcast_ln79_fu_1231_p1[30:23]}};

assign tmp_26_fu_974_p4 = {{bitcast_ln79_1_reg_1812[30:23]}};

assign tmp_28_fu_989_p4 = {{bitcast_ln81_reg_1822[30:23]}};

assign tmp_3_fu_855_p4 = {{bitcast_ln58_fu_851_p1[30:23]}};

assign tmp_9_fu_599_p3 = {{pos_reg_257}, {2'd0}};

assign trunc_ln112_1_fu_1449_p1 = j5_0_reg_361[2:0];

assign trunc_ln112_fu_1445_p1 = j5_0_reg_361[4:0];

assign trunc_ln122_fu_1527_p1 = j7_0_reg_382[4:0];

assign trunc_ln49_1_fu_655_p1 = pos_2_fu_639_p2[2:0];

assign trunc_ln49_fu_651_p1 = pos_2_fu_639_p2[4:0];

assign trunc_ln50_1_fu_744_p1 = bitcast_ln50_fu_730_p1[22:0];

assign trunc_ln50_2_fu_796_p1 = bitcast_ln50_2_fu_782_p1[22:0];

assign trunc_ln50_fu_629_p1 = bitcast_ln50_1_fu_625_p1[22:0];

assign trunc_ln58_1_fu_702_p1 = pos_0_reg_279[2:0];

assign trunc_ln58_2_fu_865_p1 = bitcast_ln58_fu_851_p1[22:0];

assign trunc_ln58_fu_698_p1 = pos_0_reg_279[4:0];

assign trunc_ln79_1_fu_1245_p1 = bitcast_ln79_fu_1231_p1[22:0];

assign trunc_ln79_fu_935_p1 = bitcast_ln79_1_fu_932_p1[22:0];

assign trunc_ln81_fu_948_p1 = bitcast_ln81_fu_945_p1[22:0];

assign trunc_ln84_fu_1007_p1 = ind2_1_fu_96[1:0];

assign trunc_ln85_fu_1022_p1 = ind2_2_fu_100[1:0];

assign trunc_ln95_1_fu_1337_p1 = k_3_fu_1321_p2[2:0];

assign trunc_ln95_fu_1333_p1 = k_3_fu_1321_p2[4:0];

assign trunc_ln99_fu_1377_p1 = j_4_fu_1365_p2[4:0];

assign zext_ln104_fu_1401_p1 = j_reg_350;

assign zext_ln110_1_fu_1429_p1 = tmp_16_fu_1421_p3;

assign zext_ln110_fu_1417_p1 = j_reg_350;

assign zext_ln117_fu_1483_p1 = j_1_reg_371;

assign zext_ln122_1_fu_1511_p1 = tmp_24_fu_1503_p3;

assign zext_ln122_fu_1499_p1 = j_1_reg_371;

assign zext_ln17_fu_475_p1 = i_0_reg_245;

assign zext_ln34_fu_583_p1 = pos_reg_257;

assign zext_ln40_1_fu_607_p1 = tmp_9_fu_599_p3;

assign zext_ln40_2_fu_616_p1 = tmp_9_reg_1686;

assign zext_ln40_fu_612_p1 = pos_reg_257;

assign zext_ln70_fu_908_p1 = k_1_reg_298;

assign zext_ln77_fu_958_p1 = ind1_reg_309;

always @ (posedge ap_clk) begin
    zext_ln34_reg_1668[31:2] <= 30'b000000000000000000000000000000;
    tmp_9_reg_1686[1:0] <= 2'b00;
    A_addr_reg_1691[1:0] <= 2'b00;
    zext_ln40_reg_1696[4:2] <= 3'b000;
    zext_ln77_reg_1832[31:2] <= 30'b000000000000000000000000000000;
    zext_ln104_reg_1909[31:2] <= 30'b000000000000000000000000000000;
    zext_ln110_reg_1923[4:2] <= 3'b000;
    L_addr_reg_1928[1:0] <= 2'b00;
end

endmodule //lup
