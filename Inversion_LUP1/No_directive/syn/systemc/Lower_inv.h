// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Lower_inv_HH_
#define _Lower_inv_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "inverse_top_fadd_hbi.h"
#include "inverse_top_fmul_cud.h"
#include "inverse_top_fdiv_dEe.h"

namespace ap_rtl {

struct Lower_inv : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > L_address0;
    sc_out< sc_logic > L_ce0;
    sc_in< sc_lv<32> > L_q0;
    sc_out< sc_lv<4> > L_inv_address0;
    sc_out< sc_logic > L_inv_ce0;
    sc_out< sc_logic > L_inv_we0;
    sc_out< sc_lv<32> > L_inv_d0;
    sc_in< sc_lv<32> > L_inv_q0;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const1;


    // Module declarations
    Lower_inv(sc_module_name name);
    SC_HAS_PROCESS(Lower_inv);

    ~Lower_inv();

    sc_trace_file* mVcdFile;

    inverse_top_fadd_hbi<1,5,32,32,32>* inverse_top_fadd_hbi_U19;
    inverse_top_fmul_cud<1,4,32,32,32>* inverse_top_fmul_cud_U20;
    inverse_top_fdiv_dEe<1,16,32,32,32>* inverse_top_fdiv_dEe_U21;
    sc_signal< sc_lv<29> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > zext_ln140_fu_164_p1;
    sc_signal< sc_lv<32> > zext_ln140_reg_332;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<2> > i_fu_174_p2;
    sc_signal< sc_lv<2> > i_reg_340;
    sc_signal< sc_lv<5> > sub_ln148_fu_202_p2;
    sc_signal< sc_lv<5> > sub_ln148_reg_345;
    sc_signal< sc_lv<1> > icmp_ln140_fu_168_p2;
    sc_signal< sc_lv<4> > L_addr_reg_352;
    sc_signal< sc_lv<4> > L_inv_addr_1_reg_357;
    sc_signal< sc_lv<32> > zext_ln152_fu_208_p1;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<2> > j_fu_218_p2;
    sc_signal< sc_lv<2> > j_reg_370;
    sc_signal< sc_lv<1> > icmp_ln145_fu_224_p2;
    sc_signal< sc_lv<1> > icmp_ln145_reg_375;
    sc_signal< sc_lv<1> > icmp_ln142_fu_212_p2;
    sc_signal< sc_lv<1> > icmp_ln147_fu_230_p2;
    sc_signal< sc_lv<1> > icmp_ln147_reg_379;
    sc_signal< sc_lv<5> > zext_ln159_fu_236_p1;
    sc_signal< sc_lv<5> > zext_ln159_reg_383;
    sc_signal< sc_lv<4> > L_inv_addr_3_reg_388;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln152_fu_264_p2;
    sc_signal< sc_lv<32> > k_5_fu_311_p2;
    sc_signal< sc_lv<32> > k_5_reg_406;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > grp_fu_151_p2;
    sc_signal< sc_lv<32> > tmp_s_reg_421;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<32> > grp_fu_146_p2;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<2> > i_0_reg_102;
    sc_signal< sc_lv<2> > k_reg_114;
    sc_signal< sc_logic > ap_CS_fsm_state29;
    sc_signal< sc_lv<32> > sum_0_reg_125;
    sc_signal< sc_lv<32> > k_0_reg_137;
    sc_signal< sc_lv<64> > zext_ln148_fu_192_p1;
    sc_signal< sc_lv<64> > sext_ln159_fu_245_p1;
    sc_signal< sc_lv<64> > sext_ln146_fu_259_p1;
    sc_signal< sc_lv<64> > sext_ln157_fu_278_p1;
    sc_signal< sc_lv<64> > sext_ln157_1_fu_306_p1;
    sc_signal< sc_lv<32> > bitcast_ln159_1_fu_327_p1;
    sc_signal< sc_lv<32> > grp_fu_157_p2;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<4> > tmp_37_fu_184_p3;
    sc_signal< sc_lv<5> > zext_ln148_2_fu_198_p1;
    sc_signal< sc_lv<5> > zext_ln148_1_fu_180_p1;
    sc_signal< sc_lv<5> > add_ln159_fu_240_p2;
    sc_signal< sc_lv<5> > zext_ln146_fu_250_p1;
    sc_signal< sc_lv<5> > add_ln146_fu_254_p2;
    sc_signal< sc_lv<5> > trunc_ln157_fu_269_p1;
    sc_signal< sc_lv<5> > add_ln157_fu_273_p2;
    sc_signal< sc_lv<3> > trunc_ln157_1_fu_283_p1;
    sc_signal< sc_lv<5> > sext_ln157_1_cast_fu_287_p3;
    sc_signal< sc_lv<5> > sub_ln157_fu_295_p2;
    sc_signal< sc_lv<5> > add_ln157_1_fu_301_p2;
    sc_signal< sc_lv<32> > bitcast_ln159_fu_317_p1;
    sc_signal< sc_lv<32> > xor_ln159_fu_321_p2;
    sc_signal< sc_lv<29> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<29> ap_ST_fsm_state1;
    static const sc_lv<29> ap_ST_fsm_state2;
    static const sc_lv<29> ap_ST_fsm_state3;
    static const sc_lv<29> ap_ST_fsm_state4;
    static const sc_lv<29> ap_ST_fsm_state5;
    static const sc_lv<29> ap_ST_fsm_state6;
    static const sc_lv<29> ap_ST_fsm_state7;
    static const sc_lv<29> ap_ST_fsm_state8;
    static const sc_lv<29> ap_ST_fsm_state9;
    static const sc_lv<29> ap_ST_fsm_state10;
    static const sc_lv<29> ap_ST_fsm_state11;
    static const sc_lv<29> ap_ST_fsm_state12;
    static const sc_lv<29> ap_ST_fsm_state13;
    static const sc_lv<29> ap_ST_fsm_state14;
    static const sc_lv<29> ap_ST_fsm_state15;
    static const sc_lv<29> ap_ST_fsm_state16;
    static const sc_lv<29> ap_ST_fsm_state17;
    static const sc_lv<29> ap_ST_fsm_state18;
    static const sc_lv<29> ap_ST_fsm_state19;
    static const sc_lv<29> ap_ST_fsm_state20;
    static const sc_lv<29> ap_ST_fsm_state21;
    static const sc_lv<29> ap_ST_fsm_state22;
    static const sc_lv<29> ap_ST_fsm_state23;
    static const sc_lv<29> ap_ST_fsm_state24;
    static const sc_lv<29> ap_ST_fsm_state25;
    static const sc_lv<29> ap_ST_fsm_state26;
    static const sc_lv<29> ap_ST_fsm_state27;
    static const sc_lv<29> ap_ST_fsm_state28;
    static const sc_lv<29> ap_ST_fsm_state29;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_1C;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_3F800000;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_80000000;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_L_address0();
    void thread_L_ce0();
    void thread_L_inv_address0();
    void thread_L_inv_ce0();
    void thread_L_inv_d0();
    void thread_L_inv_we0();
    void thread_add_ln146_fu_254_p2();
    void thread_add_ln157_1_fu_301_p2();
    void thread_add_ln157_fu_273_p2();
    void thread_add_ln159_fu_240_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state29();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_bitcast_ln159_1_fu_327_p1();
    void thread_bitcast_ln159_fu_317_p1();
    void thread_i_fu_174_p2();
    void thread_icmp_ln140_fu_168_p2();
    void thread_icmp_ln142_fu_212_p2();
    void thread_icmp_ln145_fu_224_p2();
    void thread_icmp_ln147_fu_230_p2();
    void thread_icmp_ln152_fu_264_p2();
    void thread_j_fu_218_p2();
    void thread_k_5_fu_311_p2();
    void thread_sext_ln146_fu_259_p1();
    void thread_sext_ln157_1_cast_fu_287_p3();
    void thread_sext_ln157_1_fu_306_p1();
    void thread_sext_ln157_fu_278_p1();
    void thread_sext_ln159_fu_245_p1();
    void thread_sub_ln148_fu_202_p2();
    void thread_sub_ln157_fu_295_p2();
    void thread_tmp_37_fu_184_p3();
    void thread_trunc_ln157_1_fu_283_p1();
    void thread_trunc_ln157_fu_269_p1();
    void thread_xor_ln159_fu_321_p2();
    void thread_zext_ln140_fu_164_p1();
    void thread_zext_ln146_fu_250_p1();
    void thread_zext_ln148_1_fu_180_p1();
    void thread_zext_ln148_2_fu_198_p1();
    void thread_zext_ln148_fu_192_p1();
    void thread_zext_ln152_fu_208_p1();
    void thread_zext_ln159_fu_236_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
