// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _matrix_mult_HH_
#define _matrix_mult_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "inverse_top_fadd_hbi.h"
#include "inverse_top_fmul_cud.h"

namespace ap_rtl {

struct matrix_mult : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > U_inv_address0;
    sc_out< sc_logic > U_inv_ce0;
    sc_in< sc_lv<32> > U_inv_q0;
    sc_out< sc_lv<4> > L_inv_address0;
    sc_out< sc_logic > L_inv_ce0;
    sc_in< sc_lv<32> > L_inv_q0;
    sc_out< sc_lv<4> > A_inv_address0;
    sc_out< sc_logic > A_inv_ce0;
    sc_out< sc_logic > A_inv_we0;
    sc_out< sc_lv<32> > A_inv_d0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    matrix_mult(sc_module_name name);
    SC_HAS_PROCESS(matrix_mult);

    ~matrix_mult();

    sc_trace_file* mVcdFile;

    inverse_top_fadd_hbi<1,5,32,32,32>* inverse_top_fadd_hbi_U30;
    inverse_top_fmul_cud<1,4,32,32,32>* inverse_top_fmul_cud_U31;
    sc_signal< sc_lv<13> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<2> > i_fu_135_p2;
    sc_signal< sc_lv<2> > i_reg_246;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<5> > sub_ln213_fu_157_p2;
    sc_signal< sc_lv<5> > sub_ln213_reg_251;
    sc_signal< sc_lv<1> > icmp_ln206_fu_129_p2;
    sc_signal< sc_lv<2> > j_fu_169_p2;
    sc_signal< sc_lv<2> > j_reg_260;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<5> > zext_ln216_fu_175_p1;
    sc_signal< sc_lv<5> > zext_ln216_reg_265;
    sc_signal< sc_lv<1> > icmp_ln208_fu_163_p2;
    sc_signal< sc_lv<4> > A_inv_addr_reg_270;
    sc_signal< sc_lv<2> > k_fu_195_p2;
    sc_signal< sc_lv<2> > k_reg_278;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln211_fu_189_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > grp_fu_123_p2;
    sc_signal< sc_lv<32> > sumTemp_reg_303;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<32> > grp_fu_118_p2;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<2> > i_0_reg_72;
    sc_signal< sc_lv<2> > j_0_reg_83;
    sc_signal< sc_lv<32> > sumFinal_0_reg_94;
    sc_signal< sc_lv<2> > k_0_reg_107;
    sc_signal< sc_lv<64> > sext_ln216_fu_184_p1;
    sc_signal< sc_lv<64> > sext_ln213_fu_210_p1;
    sc_signal< sc_lv<64> > sext_ln213_1_fu_238_p1;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<4> > tmp_2_fu_145_p3;
    sc_signal< sc_lv<5> > zext_ln213_1_fu_153_p1;
    sc_signal< sc_lv<5> > zext_ln213_fu_141_p1;
    sc_signal< sc_lv<5> > add_ln216_fu_179_p2;
    sc_signal< sc_lv<5> > zext_ln213_2_fu_201_p1;
    sc_signal< sc_lv<5> > add_ln213_fu_205_p2;
    sc_signal< sc_lv<4> > tmp_3_fu_215_p3;
    sc_signal< sc_lv<5> > zext_ln213_3_fu_223_p1;
    sc_signal< sc_lv<5> > sub_ln213_1_fu_227_p2;
    sc_signal< sc_lv<5> > add_ln213_1_fu_233_p2;
    sc_signal< sc_lv<13> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<13> ap_ST_fsm_state1;
    static const sc_lv<13> ap_ST_fsm_state2;
    static const sc_lv<13> ap_ST_fsm_state3;
    static const sc_lv<13> ap_ST_fsm_state4;
    static const sc_lv<13> ap_ST_fsm_state5;
    static const sc_lv<13> ap_ST_fsm_state6;
    static const sc_lv<13> ap_ST_fsm_state7;
    static const sc_lv<13> ap_ST_fsm_state8;
    static const sc_lv<13> ap_ST_fsm_state9;
    static const sc_lv<13> ap_ST_fsm_state10;
    static const sc_lv<13> ap_ST_fsm_state11;
    static const sc_lv<13> ap_ST_fsm_state12;
    static const sc_lv<13> ap_ST_fsm_state13;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_A_inv_address0();
    void thread_A_inv_ce0();
    void thread_A_inv_d0();
    void thread_A_inv_we0();
    void thread_L_inv_address0();
    void thread_L_inv_ce0();
    void thread_U_inv_address0();
    void thread_U_inv_ce0();
    void thread_add_ln213_1_fu_233_p2();
    void thread_add_ln213_fu_205_p2();
    void thread_add_ln216_fu_179_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_135_p2();
    void thread_icmp_ln206_fu_129_p2();
    void thread_icmp_ln208_fu_163_p2();
    void thread_icmp_ln211_fu_189_p2();
    void thread_j_fu_169_p2();
    void thread_k_fu_195_p2();
    void thread_sext_ln213_1_fu_238_p1();
    void thread_sext_ln213_fu_210_p1();
    void thread_sext_ln216_fu_184_p1();
    void thread_sub_ln213_1_fu_227_p2();
    void thread_sub_ln213_fu_157_p2();
    void thread_tmp_2_fu_145_p3();
    void thread_tmp_3_fu_215_p3();
    void thread_zext_ln213_1_fu_153_p1();
    void thread_zext_ln213_2_fu_201_p1();
    void thread_zext_ln213_3_fu_223_p1();
    void thread_zext_ln213_fu_141_p1();
    void thread_zext_ln216_fu_175_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
