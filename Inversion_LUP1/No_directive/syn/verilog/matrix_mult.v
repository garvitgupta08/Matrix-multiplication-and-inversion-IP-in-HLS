// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matrix_mult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        U_inv_address0,
        U_inv_ce0,
        U_inv_q0,
        L_inv_address0,
        L_inv_ce0,
        L_inv_q0,
        A_inv_address0,
        A_inv_ce0,
        A_inv_we0,
        A_inv_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] U_inv_address0;
output   U_inv_ce0;
input  [31:0] U_inv_q0;
output  [3:0] L_inv_address0;
output   L_inv_ce0;
input  [31:0] L_inv_q0;
output  [3:0] A_inv_address0;
output   A_inv_ce0;
output   A_inv_we0;
output  [31:0] A_inv_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg U_inv_ce0;
reg L_inv_ce0;
reg A_inv_ce0;
reg A_inv_we0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] i_fu_135_p2;
reg   [1:0] i_reg_246;
wire    ap_CS_fsm_state2;
wire   [4:0] sub_ln213_fu_157_p2;
reg   [4:0] sub_ln213_reg_251;
wire   [0:0] icmp_ln206_fu_129_p2;
wire   [1:0] j_fu_169_p2;
reg   [1:0] j_reg_260;
wire    ap_CS_fsm_state3;
wire   [4:0] zext_ln216_fu_175_p1;
reg   [4:0] zext_ln216_reg_265;
wire   [0:0] icmp_ln208_fu_163_p2;
reg   [3:0] A_inv_addr_reg_270;
wire   [1:0] k_fu_195_p2;
reg   [1:0] k_reg_278;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln211_fu_189_p2;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_123_p2;
reg   [31:0] sumTemp_reg_303;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_118_p2;
wire    ap_CS_fsm_state13;
reg   [1:0] i_0_reg_72;
reg   [1:0] j_0_reg_83;
reg   [31:0] sumFinal_0_reg_94;
reg   [1:0] k_0_reg_107;
wire  signed [63:0] sext_ln216_fu_184_p1;
wire  signed [63:0] sext_ln213_fu_210_p1;
wire  signed [63:0] sext_ln213_1_fu_238_p1;
wire    ap_CS_fsm_state9;
wire   [3:0] tmp_2_fu_145_p3;
wire   [4:0] zext_ln213_1_fu_153_p1;
wire   [4:0] zext_ln213_fu_141_p1;
wire   [4:0] add_ln216_fu_179_p2;
wire   [4:0] zext_ln213_2_fu_201_p1;
wire   [4:0] add_ln213_fu_205_p2;
wire   [3:0] tmp_3_fu_215_p3;
wire   [4:0] zext_ln213_3_fu_223_p1;
wire   [4:0] sub_ln213_1_fu_227_p2;
wire   [4:0] add_ln213_1_fu_233_p2;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

inverse_top_fadd_hbi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
inverse_top_fadd_hbi_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sumFinal_0_reg_94),
    .din1(sumTemp_reg_303),
    .ce(1'b1),
    .dout(grp_fu_118_p2)
);

inverse_top_fmul_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
inverse_top_fmul_cud_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(U_inv_q0),
    .din1(L_inv_q0),
    .ce(1'b1),
    .dout(grp_fu_123_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln208_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_72 <= i_reg_246;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_72 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln211_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_83 <= j_reg_260;
    end else if (((icmp_ln206_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_83 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        k_0_reg_107 <= k_reg_278;
    end else if (((icmp_ln208_fu_163_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_107 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sumFinal_0_reg_94 <= grp_fu_118_p2;
    end else if (((icmp_ln208_fu_163_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sumFinal_0_reg_94 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln208_fu_163_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        A_inv_addr_reg_270 <= sext_ln216_fu_184_p1;
        zext_ln216_reg_265[1 : 0] <= zext_ln216_fu_175_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_246 <= i_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_260 <= j_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_278 <= k_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln206_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln213_reg_251 <= sub_ln213_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sumTemp_reg_303 <= grp_fu_123_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_inv_ce0 = 1'b1;
    end else begin
        A_inv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln211_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        A_inv_we0 = 1'b1;
    end else begin
        A_inv_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        L_inv_ce0 = 1'b1;
    end else begin
        L_inv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        U_inv_ce0 = 1'b1;
    end else begin
        U_inv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln206_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln206_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln206_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln208_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln211_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_inv_address0 = A_inv_addr_reg_270;

assign A_inv_d0 = sumFinal_0_reg_94;

assign L_inv_address0 = sext_ln213_1_fu_238_p1;

assign U_inv_address0 = sext_ln213_fu_210_p1;

assign add_ln213_1_fu_233_p2 = (sub_ln213_1_fu_227_p2 + zext_ln216_reg_265);

assign add_ln213_fu_205_p2 = (sub_ln213_reg_251 + zext_ln213_2_fu_201_p1);

assign add_ln216_fu_179_p2 = (sub_ln213_reg_251 + zext_ln216_fu_175_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_fu_135_p2 = (i_0_reg_72 + 2'd1);

assign icmp_ln206_fu_129_p2 = ((i_0_reg_72 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln208_fu_163_p2 = ((j_0_reg_83 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln211_fu_189_p2 = ((k_0_reg_107 == 2'd3) ? 1'b1 : 1'b0);

assign j_fu_169_p2 = (j_0_reg_83 + 2'd1);

assign k_fu_195_p2 = (k_0_reg_107 + 2'd1);

assign sext_ln213_1_fu_238_p1 = $signed(add_ln213_1_fu_233_p2);

assign sext_ln213_fu_210_p1 = $signed(add_ln213_fu_205_p2);

assign sext_ln216_fu_184_p1 = $signed(add_ln216_fu_179_p2);

assign sub_ln213_1_fu_227_p2 = (zext_ln213_3_fu_223_p1 - zext_ln213_2_fu_201_p1);

assign sub_ln213_fu_157_p2 = (zext_ln213_1_fu_153_p1 - zext_ln213_fu_141_p1);

assign tmp_2_fu_145_p3 = {{i_0_reg_72}, {2'd0}};

assign tmp_3_fu_215_p3 = {{k_0_reg_107}, {2'd0}};

assign zext_ln213_1_fu_153_p1 = tmp_2_fu_145_p3;

assign zext_ln213_2_fu_201_p1 = k_0_reg_107;

assign zext_ln213_3_fu_223_p1 = tmp_3_fu_215_p3;

assign zext_ln213_fu_141_p1 = i_0_reg_72;

assign zext_ln216_fu_175_p1 = j_0_reg_83;

always @ (posedge ap_clk) begin
    zext_ln216_reg_265[4:2] <= 3'b000;
end

endmodule //matrix_mult
