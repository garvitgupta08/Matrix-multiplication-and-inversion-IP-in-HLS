// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module final_perm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        UL_inv_address0,
        UL_inv_ce0,
        UL_inv_q0,
        P_0_read,
        P_1_read,
        P_2_read,
        A_inv_address0,
        A_inv_ce0,
        A_inv_we0,
        A_inv_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] UL_inv_address0;
output   UL_inv_ce0;
input  [31:0] UL_inv_q0;
input  [31:0] P_0_read;
input  [31:0] P_1_read;
input  [31:0] P_2_read;
output  [3:0] A_inv_address0;
output   A_inv_ce0;
output   A_inv_we0;
output  [31:0] A_inv_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg UL_inv_ce0;
reg A_inv_ce0;
reg A_inv_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] i_fu_156_p2;
reg   [1:0] i_reg_384;
wire    ap_CS_fsm_state2;
wire   [4:0] zext_ln226_fu_162_p1;
reg   [4:0] zext_ln226_reg_389;
wire   [0:0] icmp_ln224_fu_150_p2;
wire   [1:0] j_fu_172_p2;
reg   [1:0] j_reg_397;
wire    ap_CS_fsm_state3;
wire   [31:0] p_Val2_s_fu_178_p1;
reg   [31:0] p_Val2_s_reg_402;
wire   [0:0] icmp_ln226_fu_166_p2;
wire   [22:0] tmp_V_1_fu_192_p1;
reg   [22:0] tmp_V_1_reg_407;
wire   [0:0] isNeg_fu_206_p3;
reg   [0:0] isNeg_reg_412;
wire  signed [8:0] ush_fu_224_p3;
reg  signed [8:0] ush_reg_417;
wire   [4:0] add_ln228_fu_347_p2;
reg   [4:0] add_ln228_reg_423;
wire    ap_CS_fsm_state4;
wire   [4:0] add_ln228_1_fu_353_p2;
reg   [4:0] add_ln228_1_reg_428;
wire    ap_CS_fsm_state5;
reg   [1:0] i_0_reg_115;
reg   [1:0] j_0_reg_127;
wire    ap_CS_fsm_state6;
reg   [31:0] ap_phi_mux_phi_ln228_phi_fu_142_p6;
wire  signed [63:0] sext_ln228_fu_358_p1;
wire  signed [63:0] sext_ln228_1_fu_362_p1;
wire   [7:0] tmp_V_fu_182_p4;
wire   [8:0] zext_ln339_fu_196_p1;
wire   [8:0] add_ln339_fu_200_p2;
wire   [7:0] sub_ln1311_fu_214_p2;
wire  signed [8:0] sext_ln1311_fu_220_p1;
wire   [24:0] mantissa_V_fu_239_p4;
wire  signed [31:0] sext_ln1311_1_fu_252_p1;
wire  signed [24:0] sext_ln1311_2_fu_255_p1;
wire   [78:0] zext_ln682_fu_248_p1;
wire   [78:0] zext_ln1287_fu_258_p1;
wire   [24:0] r_V_fu_262_p2;
wire   [0:0] tmp_fu_274_p3;
wire   [78:0] r_V_1_fu_268_p2;
wire   [31:0] zext_ln662_fu_282_p1;
wire   [31:0] tmp_31_fu_286_p4;
wire   [31:0] p_Val2_4_fu_296_p3;
wire   [4:0] trunc_ln657_fu_303_p1;
wire   [0:0] p_Result_s_fu_232_p3;
wire   [4:0] sub_ln228_1_fu_307_p2;
wire   [4:0] trunc_ln228_fu_313_p1;
wire   [3:0] tmp_32_fu_329_p3;
wire   [4:0] zext_ln228_1_fu_337_p1;
wire   [4:0] zext_ln228_fu_325_p1;
wire   [4:0] sub_ln228_fu_341_p2;
wire   [4:0] select_ln59_fu_317_p3;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln226_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_115 <= i_reg_384;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_115 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_0_reg_127 <= j_reg_397;
    end else if (((icmp_ln224_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_127 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln228_1_reg_428 <= add_ln228_1_fu_353_p2;
        add_ln228_reg_423 <= add_ln228_fu_347_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_384 <= i_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln226_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        isNeg_reg_412 <= add_ln339_fu_200_p2[32'd8];
        p_Val2_s_reg_402 <= p_Val2_s_fu_178_p1;
        tmp_V_1_reg_407 <= tmp_V_1_fu_192_p1;
        ush_reg_417 <= ush_fu_224_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_397 <= j_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln224_fu_150_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln226_reg_389[1 : 0] <= zext_ln226_fu_162_p1[1 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        A_inv_ce0 = 1'b1;
    end else begin
        A_inv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        A_inv_we0 = 1'b1;
    end else begin
        A_inv_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        UL_inv_ce0 = 1'b1;
    end else begin
        UL_inv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln224_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln226_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        if ((i_0_reg_115 == 2'd0)) begin
            ap_phi_mux_phi_ln228_phi_fu_142_p6 = P_0_read;
        end else if ((~(i_0_reg_115 == 2'd0) & ~(i_0_reg_115 == 2'd1))) begin
            ap_phi_mux_phi_ln228_phi_fu_142_p6 = P_2_read;
        end else if ((i_0_reg_115 == 2'd1)) begin
            ap_phi_mux_phi_ln228_phi_fu_142_p6 = P_1_read;
        end else begin
            ap_phi_mux_phi_ln228_phi_fu_142_p6 = 'bx;
        end
    end else begin
        ap_phi_mux_phi_ln228_phi_fu_142_p6 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln224_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln224_fu_150_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln226_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_inv_address0 = sext_ln228_1_fu_362_p1;

assign A_inv_d0 = UL_inv_q0;

assign UL_inv_address0 = sext_ln228_fu_358_p1;

assign add_ln228_1_fu_353_p2 = (sub_ln228_fu_341_p2 + zext_ln226_reg_389);

assign add_ln228_fu_347_p2 = (sub_ln228_fu_341_p2 + select_ln59_fu_317_p3);

assign add_ln339_fu_200_p2 = ($signed(9'd385) + $signed(zext_ln339_fu_196_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign i_fu_156_p2 = (i_0_reg_115 + 2'd1);

assign icmp_ln224_fu_150_p2 = ((i_0_reg_115 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln226_fu_166_p2 = ((j_0_reg_127 == 2'd3) ? 1'b1 : 1'b0);

assign isNeg_fu_206_p3 = add_ln339_fu_200_p2[32'd8];

assign j_fu_172_p2 = (j_0_reg_127 + 2'd1);

assign mantissa_V_fu_239_p4 = {{{{1'd1}, {tmp_V_1_reg_407}}}, {1'd0}};

assign p_Result_s_fu_232_p3 = p_Val2_s_reg_402[32'd31];

assign p_Val2_4_fu_296_p3 = ((isNeg_reg_412[0:0] === 1'b1) ? zext_ln662_fu_282_p1 : tmp_31_fu_286_p4);

assign p_Val2_s_fu_178_p1 = ap_phi_mux_phi_ln228_phi_fu_142_p6;

assign r_V_1_fu_268_p2 = zext_ln682_fu_248_p1 << zext_ln1287_fu_258_p1;

assign r_V_fu_262_p2 = mantissa_V_fu_239_p4 >> sext_ln1311_2_fu_255_p1;

assign select_ln59_fu_317_p3 = ((p_Result_s_fu_232_p3[0:0] === 1'b1) ? sub_ln228_1_fu_307_p2 : trunc_ln228_fu_313_p1);

assign sext_ln1311_1_fu_252_p1 = ush_reg_417;

assign sext_ln1311_2_fu_255_p1 = ush_reg_417;

assign sext_ln1311_fu_220_p1 = $signed(sub_ln1311_fu_214_p2);

assign sext_ln228_1_fu_362_p1 = $signed(add_ln228_1_reg_428);

assign sext_ln228_fu_358_p1 = $signed(add_ln228_reg_423);

assign sub_ln1311_fu_214_p2 = (8'd127 - tmp_V_fu_182_p4);

assign sub_ln228_1_fu_307_p2 = (5'd0 - trunc_ln657_fu_303_p1);

assign sub_ln228_fu_341_p2 = (zext_ln228_1_fu_337_p1 - zext_ln228_fu_325_p1);

assign tmp_31_fu_286_p4 = {{r_V_1_fu_268_p2[55:24]}};

assign tmp_32_fu_329_p3 = {{j_0_reg_127}, {2'd0}};

assign tmp_V_1_fu_192_p1 = p_Val2_s_fu_178_p1[22:0];

assign tmp_V_fu_182_p4 = {{p_Val2_s_fu_178_p1[30:23]}};

assign tmp_fu_274_p3 = r_V_fu_262_p2[32'd24];

assign trunc_ln228_fu_313_p1 = p_Val2_4_fu_296_p3[4:0];

assign trunc_ln657_fu_303_p1 = p_Val2_4_fu_296_p3[4:0];

assign ush_fu_224_p3 = ((isNeg_fu_206_p3[0:0] === 1'b1) ? sext_ln1311_fu_220_p1 : add_ln339_fu_200_p2);

assign zext_ln1287_fu_258_p1 = $unsigned(sext_ln1311_1_fu_252_p1);

assign zext_ln226_fu_162_p1 = i_0_reg_115;

assign zext_ln228_1_fu_337_p1 = tmp_32_fu_329_p3;

assign zext_ln228_fu_325_p1 = j_0_reg_127;

assign zext_ln339_fu_196_p1 = tmp_V_fu_182_p4;

assign zext_ln662_fu_282_p1 = tmp_fu_274_p3;

assign zext_ln682_fu_248_p1 = mantissa_V_fu_239_p4;

always @ (posedge ap_clk) begin
    zext_ln226_reg_389[4:2] <= 3'b000;
end

endmodule //final_perm
