-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Lower_inv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    L_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    L_ce0 : OUT STD_LOGIC;
    L_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    L_inv_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    L_inv_ce0 : OUT STD_LOGIC;
    L_inv_we0 : OUT STD_LOGIC;
    L_inv_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    L_inv_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Lower_inv is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln140_fu_164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln140_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_174_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_340 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln148_fu_202_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln148_reg_345 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln140_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal L_addr_reg_352 : STD_LOGIC_VECTOR (3 downto 0);
    signal L_inv_addr_1_reg_357 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln152_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_fu_218_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_370 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln145_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln145_reg_375 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln142_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln147_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln147_reg_379 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln159_fu_236_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln159_reg_383 : STD_LOGIC_VECTOR (4 downto 0);
    signal L_inv_addr_3_reg_388 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln152_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_5_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_5_reg_406 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_151_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_421 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_146_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_0_reg_102 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_114 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal sum_0_reg_125 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_reg_137 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln148_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln159_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln146_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln157_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln157_1_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln159_1_fu_327_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_157_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_37_fu_184_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln148_2_fu_198_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln148_1_fu_180_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln159_fu_240_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln146_fu_250_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln146_fu_254_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln157_fu_269_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln157_fu_273_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln157_1_fu_283_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln157_1_cast_fu_287_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln157_fu_295_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln157_1_fu_301_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal bitcast_ln159_fu_317_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln159_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);

    component inverse_top_fadd_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inverse_top_fmul_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inverse_top_fdiv_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    inverse_top_fadd_hbi_U19 : component inverse_top_fadd_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_0_reg_125,
        din1 => tmp_s_reg_421,
        ce => ap_const_logic_1,
        dout => grp_fu_146_p2);

    inverse_top_fmul_cud_U20 : component inverse_top_fmul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => L_q0,
        din1 => L_inv_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_151_p2);

    inverse_top_fdiv_dEe_U21 : component inverse_top_fdiv_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_3F800000,
        din1 => L_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_157_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln142_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_102 <= i_reg_340;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_102 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_0_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln147_fu_230_p2 = ap_const_lv1_0) and (icmp_ln142_fu_212_p2 = ap_const_lv1_0) and (icmp_ln145_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_reg_137 <= zext_ln152_fu_208_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                k_0_reg_137 <= k_5_reg_406;
            end if; 
        end if;
    end process;

    k_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                k_reg_114 <= j_reg_370;
            elsif (((icmp_ln140_fu_168_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_reg_114 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    sum_0_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln147_fu_230_p2 = ap_const_lv1_0) and (icmp_ln142_fu_212_p2 = ap_const_lv1_0) and (icmp_ln145_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                sum_0_reg_125 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                sum_0_reg_125 <= grp_fu_146_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln140_fu_168_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    L_addr_reg_352(3 downto 2) <= zext_ln148_fu_192_p1(4 - 1 downto 0)(3 downto 2);
                    L_inv_addr_1_reg_357(3 downto 2) <= zext_ln148_fu_192_p1(4 - 1 downto 0)(3 downto 2);
                sub_ln148_reg_345 <= sub_ln148_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln147_fu_230_p2 = ap_const_lv1_0) and (icmp_ln142_fu_212_p2 = ap_const_lv1_0) and (icmp_ln145_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                L_inv_addr_3_reg_388 <= sext_ln159_fu_245_p1(4 - 1 downto 0);
                    zext_ln159_reg_383(1 downto 0) <= zext_ln159_fu_236_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_340 <= i_fu_174_p2;
                    zext_ln140_reg_332(1 downto 0) <= zext_ln140_fu_164_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln142_fu_212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln145_reg_375 <= icmp_ln145_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln142_fu_212_p2 = ap_const_lv1_0) and (icmp_ln145_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln147_reg_379 <= icmp_ln147_fu_230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_370 <= j_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln152_fu_264_p2 = ap_const_lv1_1))) then
                k_5_reg_406 <= k_5_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_s_reg_421 <= grp_fu_151_p2;
            end if;
        end if;
    end process;
    zext_ln140_reg_332(31 downto 2) <= "000000000000000000000000000000";
    L_addr_reg_352(1 downto 0) <= "00";
    L_inv_addr_1_reg_357(1 downto 0) <= "00";
    zext_ln159_reg_383(4 downto 2) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln140_fu_168_p2, ap_CS_fsm_state3, icmp_ln145_fu_224_p2, icmp_ln142_fu_212_p2, icmp_ln147_fu_230_p2, ap_CS_fsm_state4, icmp_ln152_fu_264_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln140_fu_168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln142_fu_212_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((icmp_ln145_fu_224_p2 = ap_const_lv1_1) and (icmp_ln142_fu_212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                elsif (((icmp_ln147_fu_230_p2 = ap_const_lv1_0) and (icmp_ln142_fu_212_p2 = ap_const_lv1_0) and (icmp_ln145_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln152_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    L_address0_assign_proc : process(L_addr_reg_352, ap_CS_fsm_state3, ap_CS_fsm_state4, sext_ln157_fu_278_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            L_address0 <= sext_ln157_fu_278_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            L_address0 <= L_addr_reg_352;
        else 
            L_address0 <= "XXXX";
        end if; 
    end process;


    L_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            L_ce0 <= ap_const_logic_1;
        else 
            L_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    L_inv_address0_assign_proc : process(L_inv_addr_1_reg_357, ap_CS_fsm_state3, L_inv_addr_3_reg_388, ap_CS_fsm_state4, icmp_ln152_fu_264_p2, ap_CS_fsm_state29, sext_ln146_fu_259_p1, sext_ln157_1_fu_306_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            L_inv_address0 <= L_inv_addr_1_reg_357;
        elsif (((icmp_ln152_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            L_inv_address0 <= L_inv_addr_3_reg_388;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln152_fu_264_p2 = ap_const_lv1_1))) then 
            L_inv_address0 <= sext_ln157_1_fu_306_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            L_inv_address0 <= sext_ln146_fu_259_p1(4 - 1 downto 0);
        else 
            L_inv_address0 <= "XXXX";
        end if; 
    end process;


    L_inv_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln152_fu_264_p2, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((icmp_ln152_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln152_fu_264_p2 = ap_const_lv1_1)))) then 
            L_inv_ce0 <= ap_const_logic_1;
        else 
            L_inv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    L_inv_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln152_fu_264_p2, ap_CS_fsm_state29, bitcast_ln159_1_fu_327_p1, grp_fu_157_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            L_inv_d0 <= grp_fu_157_p2;
        elsif (((icmp_ln152_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            L_inv_d0 <= bitcast_ln159_1_fu_327_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            L_inv_d0 <= ap_const_lv32_0;
        else 
            L_inv_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    L_inv_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln145_fu_224_p2, icmp_ln145_reg_375, icmp_ln142_fu_212_p2, icmp_ln147_reg_379, ap_CS_fsm_state4, icmp_ln152_fu_264_p2, ap_CS_fsm_state29)
    begin
        if ((((icmp_ln145_fu_224_p2 = ap_const_lv1_1) and (icmp_ln142_fu_212_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln147_reg_379 = ap_const_lv1_1) and (icmp_ln145_reg_375 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((icmp_ln152_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            L_inv_we0 <= ap_const_logic_1;
        else 
            L_inv_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln146_fu_254_p2 <= std_logic_vector(unsigned(sub_ln148_reg_345) + unsigned(zext_ln146_fu_250_p1));
    add_ln157_1_fu_301_p2 <= std_logic_vector(unsigned(zext_ln159_reg_383) + unsigned(sub_ln157_fu_295_p2));
    add_ln157_fu_273_p2 <= std_logic_vector(unsigned(trunc_ln157_fu_269_p1) + unsigned(sub_ln148_reg_345));
    add_ln159_fu_240_p2 <= std_logic_vector(unsigned(sub_ln148_reg_345) + unsigned(zext_ln159_fu_236_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln140_fu_168_p2)
    begin
        if ((((icmp_ln140_fu_168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln140_fu_168_p2)
    begin
        if (((icmp_ln140_fu_168_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln159_1_fu_327_p1 <= xor_ln159_fu_321_p2;
    bitcast_ln159_fu_317_p1 <= sum_0_reg_125;
    i_fu_174_p2 <= std_logic_vector(unsigned(i_0_reg_102) + unsigned(ap_const_lv2_1));
    icmp_ln140_fu_168_p2 <= "1" when (i_0_reg_102 = ap_const_lv2_3) else "0";
    icmp_ln142_fu_212_p2 <= "1" when (k_reg_114 = ap_const_lv2_3) else "0";
    icmp_ln145_fu_224_p2 <= "1" when (unsigned(i_0_reg_102) < unsigned(k_reg_114)) else "0";
    icmp_ln147_fu_230_p2 <= "1" when (i_0_reg_102 = k_reg_114) else "0";
    icmp_ln152_fu_264_p2 <= "1" when (signed(k_0_reg_137) < signed(zext_ln140_reg_332)) else "0";
    j_fu_218_p2 <= std_logic_vector(unsigned(k_reg_114) + unsigned(ap_const_lv2_1));
    k_5_fu_311_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(k_0_reg_137));
        sext_ln146_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln146_fu_254_p2),64));

    sext_ln157_1_cast_fu_287_p3 <= (trunc_ln157_1_fu_283_p1 & ap_const_lv2_0);
        sext_ln157_1_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln157_1_fu_301_p2),64));

        sext_ln157_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln157_fu_273_p2),64));

        sext_ln159_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln159_fu_240_p2),64));

    sub_ln148_fu_202_p2 <= std_logic_vector(unsigned(zext_ln148_2_fu_198_p1) - unsigned(zext_ln148_1_fu_180_p1));
    sub_ln157_fu_295_p2 <= std_logic_vector(unsigned(sext_ln157_1_cast_fu_287_p3) - unsigned(trunc_ln157_fu_269_p1));
    tmp_37_fu_184_p3 <= (i_0_reg_102 & ap_const_lv2_0);
    trunc_ln157_1_fu_283_p1 <= k_0_reg_137(3 - 1 downto 0);
    trunc_ln157_fu_269_p1 <= k_0_reg_137(5 - 1 downto 0);
    xor_ln159_fu_321_p2 <= (bitcast_ln159_fu_317_p1 xor ap_const_lv32_80000000);
    zext_ln140_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_102),32));
    zext_ln146_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_114),5));
    zext_ln148_1_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_102),5));
    zext_ln148_2_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_184_p3),5));
    zext_ln148_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_184_p3),64));
    zext_ln152_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_114),32));
    zext_ln159_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_114),5));
end behav;
