// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmult,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.024000,HLS_SYN_LAT=681,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=453,HLS_SYN_LUT=914,HLS_VERSION=2019_1}" *)

module matrixmult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        res_address0,
        res_ce0,
        res_we0,
        res_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [3:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [31:0] res_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg res_ce0;
reg res_we0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_fu_131_p2;
reg   [2:0] i_reg_226;
wire    ap_CS_fsm_state2;
wire   [5:0] zext_ln7_fu_145_p1;
reg   [5:0] zext_ln7_reg_231;
wire   [0:0] icmp_ln5_fu_125_p2;
wire   [2:0] j_fu_155_p2;
reg   [2:0] j_reg_240;
wire    ap_CS_fsm_state3;
wire   [5:0] zext_ln13_fu_161_p1;
reg   [5:0] zext_ln13_reg_245;
wire   [0:0] icmp_ln7_fu_149_p2;
reg   [3:0] res_addr_reg_250;
wire   [2:0] k_fu_181_p2;
reg   [2:0] k_reg_258;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln10_fu_175_p2;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_119_p2;
reg   [31:0] tmp_reg_283;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_114_p2;
wire    ap_CS_fsm_state13;
reg   [2:0] i_0_reg_68;
reg   [2:0] j_0_reg_79;
reg   [31:0] sum_0_reg_90;
reg   [2:0] k_0_reg_103;
wire   [63:0] zext_ln13_1_fu_170_p1;
wire   [63:0] zext_ln11_1_fu_196_p1;
wire   [63:0] zext_ln11_3_fu_218_p1;
wire    ap_CS_fsm_state9;
wire   [4:0] tmp_1_fu_137_p3;
wire   [5:0] add_ln13_fu_165_p2;
wire   [5:0] zext_ln11_fu_187_p1;
wire   [5:0] add_ln11_fu_191_p2;
wire   [4:0] tmp_2_fu_201_p3;
wire   [5:0] zext_ln11_2_fu_209_p1;
wire   [5:0] add_ln11_1_fu_213_p2;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

matrixmult_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmult_fadd_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_0_reg_90),
    .din1(tmp_reg_283),
    .ce(1'b1),
    .dout(grp_fu_114_p2)
);

matrixmult_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmult_fmul_3cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_q0),
    .din1(B_q0),
    .ce(1'b1),
    .dout(grp_fu_119_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_68 <= i_reg_226;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_68 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_fu_125_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_79 <= 3'd0;
    end else if (((icmp_ln10_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_79 <= j_reg_240;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_149_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_103 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        k_0_reg_103 <= k_reg_258;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_149_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sum_0_reg_90 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        sum_0_reg_90 <= grp_fu_114_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_226 <= i_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_240 <= j_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_258 <= k_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_149_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        res_addr_reg_250 <= zext_ln13_1_fu_170_p1;
        zext_ln13_reg_245[2 : 0] <= zext_ln13_fu_161_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_reg_283 <= grp_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_fu_125_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln7_reg_231[4 : 2] <= zext_ln7_fu_145_p1[4 : 2];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln5_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln5_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln5_fu_125_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln7_fu_149_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln10_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = zext_ln11_1_fu_196_p1;

assign B_address0 = zext_ln11_3_fu_218_p1;

assign add_ln11_1_fu_213_p2 = (zext_ln13_reg_245 + zext_ln11_2_fu_209_p1);

assign add_ln11_fu_191_p2 = (zext_ln11_fu_187_p1 + zext_ln7_reg_231);

assign add_ln13_fu_165_p2 = (zext_ln7_reg_231 + zext_ln13_fu_161_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_fu_131_p2 = (i_0_reg_68 + 3'd1);

assign icmp_ln10_fu_175_p2 = ((k_0_reg_103 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln5_fu_125_p2 = ((i_0_reg_68 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_149_p2 = ((j_0_reg_79 == 3'd4) ? 1'b1 : 1'b0);

assign j_fu_155_p2 = (j_0_reg_79 + 3'd1);

assign k_fu_181_p2 = (k_0_reg_103 + 3'd1);

assign res_address0 = res_addr_reg_250;

assign res_d0 = sum_0_reg_90;

assign tmp_1_fu_137_p3 = {{i_0_reg_68}, {2'd0}};

assign tmp_2_fu_201_p3 = {{k_0_reg_103}, {2'd0}};

assign zext_ln11_1_fu_196_p1 = add_ln11_fu_191_p2;

assign zext_ln11_2_fu_209_p1 = tmp_2_fu_201_p3;

assign zext_ln11_3_fu_218_p1 = add_ln11_1_fu_213_p2;

assign zext_ln11_fu_187_p1 = k_0_reg_103;

assign zext_ln13_1_fu_170_p1 = add_ln13_fu_165_p2;

assign zext_ln13_fu_161_p1 = j_0_reg_79;

assign zext_ln7_fu_145_p1 = tmp_1_fu_137_p3;

always @ (posedge ap_clk) begin
    zext_ln7_reg_231[1:0] <= 2'b00;
    zext_ln7_reg_231[5] <= 1'b0;
    zext_ln13_reg_245[5:3] <= 3'b000;
end

endmodule //matrixmult
