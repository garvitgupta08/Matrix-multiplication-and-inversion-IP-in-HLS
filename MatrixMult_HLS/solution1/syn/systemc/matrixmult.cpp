// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "matrixmult.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic matrixmult::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic matrixmult::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<13> matrixmult::ap_ST_fsm_state1 = "1";
const sc_lv<13> matrixmult::ap_ST_fsm_state2 = "10";
const sc_lv<13> matrixmult::ap_ST_fsm_state3 = "100";
const sc_lv<13> matrixmult::ap_ST_fsm_state4 = "1000";
const sc_lv<13> matrixmult::ap_ST_fsm_state5 = "10000";
const sc_lv<13> matrixmult::ap_ST_fsm_state6 = "100000";
const sc_lv<13> matrixmult::ap_ST_fsm_state7 = "1000000";
const sc_lv<13> matrixmult::ap_ST_fsm_state8 = "10000000";
const sc_lv<13> matrixmult::ap_ST_fsm_state9 = "100000000";
const sc_lv<13> matrixmult::ap_ST_fsm_state10 = "1000000000";
const sc_lv<13> matrixmult::ap_ST_fsm_state11 = "10000000000";
const sc_lv<13> matrixmult::ap_ST_fsm_state12 = "100000000000";
const sc_lv<13> matrixmult::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<32> matrixmult::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> matrixmult::ap_const_lv32_1 = "1";
const sc_lv<1> matrixmult::ap_const_lv1_0 = "0";
const sc_lv<32> matrixmult::ap_const_lv32_2 = "10";
const sc_lv<32> matrixmult::ap_const_lv32_3 = "11";
const sc_lv<32> matrixmult::ap_const_lv32_4 = "100";
const sc_lv<32> matrixmult::ap_const_lv32_7 = "111";
const sc_lv<32> matrixmult::ap_const_lv32_C = "1100";
const sc_lv<3> matrixmult::ap_const_lv3_0 = "000";
const sc_lv<1> matrixmult::ap_const_lv1_1 = "1";
const sc_lv<32> matrixmult::ap_const_lv32_8 = "1000";
const sc_lv<3> matrixmult::ap_const_lv3_4 = "100";
const sc_lv<3> matrixmult::ap_const_lv3_1 = "1";
const sc_lv<2> matrixmult::ap_const_lv2_0 = "00";
const bool matrixmult::ap_const_boolean_1 = true;

matrixmult::matrixmult(sc_module_name name) : sc_module(name), mVcdFile(0) {
    matrixmult_fadd_3bkb_U1 = new matrixmult_fadd_3bkb<1,5,32,32,32>("matrixmult_fadd_3bkb_U1");
    matrixmult_fadd_3bkb_U1->clk(ap_clk);
    matrixmult_fadd_3bkb_U1->reset(ap_rst);
    matrixmult_fadd_3bkb_U1->din0(sum_0_reg_90);
    matrixmult_fadd_3bkb_U1->din1(tmp_reg_283);
    matrixmult_fadd_3bkb_U1->ce(ap_var_for_const0);
    matrixmult_fadd_3bkb_U1->dout(grp_fu_114_p2);
    matrixmult_fmul_3cud_U2 = new matrixmult_fmul_3cud<1,4,32,32,32>("matrixmult_fmul_3cud_U2");
    matrixmult_fmul_3cud_U2->clk(ap_clk);
    matrixmult_fmul_3cud_U2->reset(ap_rst);
    matrixmult_fmul_3cud_U2->din0(A_q0);
    matrixmult_fmul_3cud_U2->din1(B_q0);
    matrixmult_fmul_3cud_U2->ce(ap_var_for_const0);
    matrixmult_fmul_3cud_U2->dout(grp_fu_119_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln11_1_fu_196_p1 );

    SC_METHOD(thread_A_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_B_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln11_3_fu_218_p1 );

    SC_METHOD(thread_B_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_add_ln11_1_fu_213_p2);
    sensitive << ( zext_ln13_reg_245 );
    sensitive << ( zext_ln11_2_fu_209_p1 );

    SC_METHOD(thread_add_ln11_fu_191_p2);
    sensitive << ( zext_ln7_reg_231 );
    sensitive << ( zext_ln11_fu_187_p1 );

    SC_METHOD(thread_add_ln13_fu_165_p2);
    sensitive << ( zext_ln7_reg_231 );
    sensitive << ( zext_ln13_fu_161_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln5_fu_125_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln5_fu_125_p2 );

    SC_METHOD(thread_i_fu_131_p2);
    sensitive << ( i_0_reg_68 );

    SC_METHOD(thread_icmp_ln10_fu_175_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( k_0_reg_103 );

    SC_METHOD(thread_icmp_ln5_fu_125_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_68 );

    SC_METHOD(thread_icmp_ln7_fu_149_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_79 );

    SC_METHOD(thread_j_fu_155_p2);
    sensitive << ( j_0_reg_79 );

    SC_METHOD(thread_k_fu_181_p2);
    sensitive << ( k_0_reg_103 );

    SC_METHOD(thread_res_address0);
    sensitive << ( res_addr_reg_250 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_res_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_res_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( sum_0_reg_90 );

    SC_METHOD(thread_res_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln10_fu_175_p2 );

    SC_METHOD(thread_tmp_1_fu_137_p3);
    sensitive << ( i_0_reg_68 );

    SC_METHOD(thread_tmp_2_fu_201_p3);
    sensitive << ( k_0_reg_103 );

    SC_METHOD(thread_zext_ln11_1_fu_196_p1);
    sensitive << ( add_ln11_fu_191_p2 );

    SC_METHOD(thread_zext_ln11_2_fu_209_p1);
    sensitive << ( tmp_2_fu_201_p3 );

    SC_METHOD(thread_zext_ln11_3_fu_218_p1);
    sensitive << ( add_ln11_1_fu_213_p2 );

    SC_METHOD(thread_zext_ln11_fu_187_p1);
    sensitive << ( k_0_reg_103 );

    SC_METHOD(thread_zext_ln13_1_fu_170_p1);
    sensitive << ( add_ln13_fu_165_p2 );

    SC_METHOD(thread_zext_ln13_fu_161_p1);
    sensitive << ( j_0_reg_79 );

    SC_METHOD(thread_zext_ln7_fu_145_p1);
    sensitive << ( tmp_1_fu_137_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln5_fu_125_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln7_fu_149_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln10_fu_175_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "matrixmult_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_address0, "(port)A_address0");
    sc_trace(mVcdFile, A_ce0, "(port)A_ce0");
    sc_trace(mVcdFile, A_q0, "(port)A_q0");
    sc_trace(mVcdFile, B_address0, "(port)B_address0");
    sc_trace(mVcdFile, B_ce0, "(port)B_ce0");
    sc_trace(mVcdFile, B_q0, "(port)B_q0");
    sc_trace(mVcdFile, res_address0, "(port)res_address0");
    sc_trace(mVcdFile, res_ce0, "(port)res_ce0");
    sc_trace(mVcdFile, res_we0, "(port)res_we0");
    sc_trace(mVcdFile, res_d0, "(port)res_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_131_p2, "i_fu_131_p2");
    sc_trace(mVcdFile, i_reg_226, "i_reg_226");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln7_fu_145_p1, "zext_ln7_fu_145_p1");
    sc_trace(mVcdFile, zext_ln7_reg_231, "zext_ln7_reg_231");
    sc_trace(mVcdFile, icmp_ln5_fu_125_p2, "icmp_ln5_fu_125_p2");
    sc_trace(mVcdFile, j_fu_155_p2, "j_fu_155_p2");
    sc_trace(mVcdFile, j_reg_240, "j_reg_240");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, zext_ln13_fu_161_p1, "zext_ln13_fu_161_p1");
    sc_trace(mVcdFile, zext_ln13_reg_245, "zext_ln13_reg_245");
    sc_trace(mVcdFile, icmp_ln7_fu_149_p2, "icmp_ln7_fu_149_p2");
    sc_trace(mVcdFile, res_addr_reg_250, "res_addr_reg_250");
    sc_trace(mVcdFile, k_fu_181_p2, "k_fu_181_p2");
    sc_trace(mVcdFile, k_reg_258, "k_reg_258");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln10_fu_175_p2, "icmp_ln10_fu_175_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_fu_119_p2, "grp_fu_119_p2");
    sc_trace(mVcdFile, tmp_reg_283, "tmp_reg_283");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_114_p2, "grp_fu_114_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, i_0_reg_68, "i_0_reg_68");
    sc_trace(mVcdFile, j_0_reg_79, "j_0_reg_79");
    sc_trace(mVcdFile, sum_0_reg_90, "sum_0_reg_90");
    sc_trace(mVcdFile, k_0_reg_103, "k_0_reg_103");
    sc_trace(mVcdFile, zext_ln13_1_fu_170_p1, "zext_ln13_1_fu_170_p1");
    sc_trace(mVcdFile, zext_ln11_1_fu_196_p1, "zext_ln11_1_fu_196_p1");
    sc_trace(mVcdFile, zext_ln11_3_fu_218_p1, "zext_ln11_3_fu_218_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_1_fu_137_p3, "tmp_1_fu_137_p3");
    sc_trace(mVcdFile, add_ln13_fu_165_p2, "add_ln13_fu_165_p2");
    sc_trace(mVcdFile, zext_ln11_fu_187_p1, "zext_ln11_fu_187_p1");
    sc_trace(mVcdFile, add_ln11_fu_191_p2, "add_ln11_fu_191_p2");
    sc_trace(mVcdFile, tmp_2_fu_201_p3, "tmp_2_fu_201_p3");
    sc_trace(mVcdFile, zext_ln11_2_fu_209_p1, "zext_ln11_2_fu_209_p1");
    sc_trace(mVcdFile, add_ln11_1_fu_213_p2, "add_ln11_1_fu_213_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("matrixmult.hdltvin.dat");
    mHdltvoutHandle.open("matrixmult.hdltvout.dat");
}

matrixmult::~matrixmult() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete matrixmult_fadd_3bkb_U1;
    delete matrixmult_fmul_3cud_U2;
}

void matrixmult::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void matrixmult::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln7_fu_149_p2.read(), ap_const_lv1_1))) {
        i_0_reg_68 = i_reg_226.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_68 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln5_fu_125_p2.read(), ap_const_lv1_0))) {
        j_0_reg_79 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(icmp_ln10_fu_175_p2.read(), ap_const_lv1_1))) {
        j_0_reg_79 = j_reg_240.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln7_fu_149_p2.read()))) {
        k_0_reg_103 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        k_0_reg_103 = k_reg_258.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln7_fu_149_p2.read()))) {
        sum_0_reg_90 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        sum_0_reg_90 = grp_fu_114_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_226 = i_fu_131_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_240 = j_fu_155_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        k_reg_258 = k_fu_181_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln7_fu_149_p2.read()))) {
        res_addr_reg_250 =  (sc_lv<4>) (zext_ln13_1_fu_170_p1.read());
        zext_ln13_reg_245 = zext_ln13_fu_161_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_reg_283 = grp_fu_119_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln5_fu_125_p2.read(), ap_const_lv1_0))) {
        zext_ln7_reg_231 = zext_ln7_fu_145_p1.read();
    }
}

void matrixmult::thread_A_address0() {
    A_address0 =  (sc_lv<4>) (zext_ln11_1_fu_196_p1.read());
}

void matrixmult::thread_A_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        A_ce0 = ap_const_logic_1;
    } else {
        A_ce0 = ap_const_logic_0;
    }
}

void matrixmult::thread_B_address0() {
    B_address0 =  (sc_lv<4>) (zext_ln11_3_fu_218_p1.read());
}

void matrixmult::thread_B_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        B_ce0 = ap_const_logic_1;
    } else {
        B_ce0 = ap_const_logic_0;
    }
}

void matrixmult::thread_add_ln11_1_fu_213_p2() {
    add_ln11_1_fu_213_p2 = (!zext_ln13_reg_245.read().is_01() || !zext_ln11_2_fu_209_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln13_reg_245.read()) + sc_biguint<6>(zext_ln11_2_fu_209_p1.read()));
}

void matrixmult::thread_add_ln11_fu_191_p2() {
    add_ln11_fu_191_p2 = (!zext_ln11_fu_187_p1.read().is_01() || !zext_ln7_reg_231.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln11_fu_187_p1.read()) + sc_biguint<6>(zext_ln7_reg_231.read()));
}

void matrixmult::thread_add_ln13_fu_165_p2() {
    add_ln13_fu_165_p2 = (!zext_ln7_reg_231.read().is_01() || !zext_ln13_fu_161_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln7_reg_231.read()) + sc_biguint<6>(zext_ln13_fu_161_p1.read()));
}

void matrixmult::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void matrixmult::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void matrixmult::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void matrixmult::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void matrixmult::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void matrixmult::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void matrixmult::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void matrixmult::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void matrixmult::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln5_fu_125_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void matrixmult::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void matrixmult::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln5_fu_125_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void matrixmult::thread_i_fu_131_p2() {
    i_fu_131_p2 = (!i_0_reg_68.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_0_reg_68.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void matrixmult::thread_icmp_ln10_fu_175_p2() {
    icmp_ln10_fu_175_p2 = (!k_0_reg_103.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_103.read() == ap_const_lv3_4);
}

void matrixmult::thread_icmp_ln5_fu_125_p2() {
    icmp_ln5_fu_125_p2 = (!i_0_reg_68.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_68.read() == ap_const_lv3_4);
}

void matrixmult::thread_icmp_ln7_fu_149_p2() {
    icmp_ln7_fu_149_p2 = (!j_0_reg_79.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_79.read() == ap_const_lv3_4);
}

void matrixmult::thread_j_fu_155_p2() {
    j_fu_155_p2 = (!j_0_reg_79.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_0_reg_79.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void matrixmult::thread_k_fu_181_p2() {
    k_fu_181_p2 = (!k_0_reg_103.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(k_0_reg_103.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void matrixmult::thread_res_address0() {
    res_address0 = res_addr_reg_250.read();
}

void matrixmult::thread_res_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        res_ce0 = ap_const_logic_1;
    } else {
        res_ce0 = ap_const_logic_0;
    }
}

void matrixmult::thread_res_d0() {
    res_d0 = sum_0_reg_90.read();
}

void matrixmult::thread_res_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln10_fu_175_p2.read(), ap_const_lv1_1))) {
        res_we0 = ap_const_logic_1;
    } else {
        res_we0 = ap_const_logic_0;
    }
}

void matrixmult::thread_tmp_1_fu_137_p3() {
    tmp_1_fu_137_p3 = esl_concat<3,2>(i_0_reg_68.read(), ap_const_lv2_0);
}

void matrixmult::thread_tmp_2_fu_201_p3() {
    tmp_2_fu_201_p3 = esl_concat<3,2>(k_0_reg_103.read(), ap_const_lv2_0);
}

void matrixmult::thread_zext_ln11_1_fu_196_p1() {
    zext_ln11_1_fu_196_p1 = esl_zext<64,6>(add_ln11_fu_191_p2.read());
}

void matrixmult::thread_zext_ln11_2_fu_209_p1() {
    zext_ln11_2_fu_209_p1 = esl_zext<6,5>(tmp_2_fu_201_p3.read());
}

void matrixmult::thread_zext_ln11_3_fu_218_p1() {
    zext_ln11_3_fu_218_p1 = esl_zext<64,6>(add_ln11_1_fu_213_p2.read());
}

void matrixmult::thread_zext_ln11_fu_187_p1() {
    zext_ln11_fu_187_p1 = esl_zext<6,3>(k_0_reg_103.read());
}

void matrixmult::thread_zext_ln13_1_fu_170_p1() {
    zext_ln13_1_fu_170_p1 = esl_zext<64,6>(add_ln13_fu_165_p2.read());
}

void matrixmult::thread_zext_ln13_fu_161_p1() {
    zext_ln13_fu_161_p1 = esl_zext<6,3>(j_0_reg_79.read());
}

void matrixmult::thread_zext_ln7_fu_145_p1() {
    zext_ln7_fu_145_p1 = esl_zext<6,5>(tmp_1_fu_137_p3.read());
}

void matrixmult::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln5_fu_125_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln7_fu_149_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln10_fu_175_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXX";
            break;
    }
}

void matrixmult::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_address0\" :  \"" << A_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_ce0\" :  \"" << A_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_q0\" :  \"" << A_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_address0\" :  \"" << B_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_ce0\" :  \"" << B_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_q0\" :  \"" << B_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_address0\" :  \"" << res_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_ce0\" :  \"" << res_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_we0\" :  \"" << res_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_d0\" :  \"" << res_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

