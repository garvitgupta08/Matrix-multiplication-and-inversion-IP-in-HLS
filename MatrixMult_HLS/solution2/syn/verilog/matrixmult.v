// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmult,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.024000,HLS_SYN_LAT=57,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=10,HLS_SYN_FF=1382,HLS_SYN_LUT=1949,HLS_VERSION=2019_1}" *)

module matrixmult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        B_address0,
        B_ce0,
        B_q0,
        B_address1,
        B_ce1,
        B_q1,
        res_address0,
        res_ce0,
        res_we0,
        res_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state28 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [3:0] A_address1;
output   A_ce1;
input  [31:0] A_q1;
output  [3:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [3:0] B_address1;
output   B_ce1;
input  [31:0] B_q1;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [31:0] res_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] A_address0;
reg A_ce0;
reg[3:0] A_address1;
reg A_ce1;
reg[3:0] B_address0;
reg B_ce0;
reg[3:0] B_address1;
reg B_ce1;
reg res_ce0;
reg res_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] indvar_flatten_reg_163;
reg   [2:0] i_0_reg_174;
reg   [2:0] j_0_reg_185;
wire   [0:0] icmp_ln5_fu_217_p2;
reg   [0:0] icmp_ln5_reg_377;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
wire    ap_block_state12_pp0_stage0_iter5;
wire    ap_block_state14_pp0_stage0_iter6;
wire    ap_block_state16_pp0_stage0_iter7;
wire    ap_block_state18_pp0_stage0_iter8;
wire    ap_block_state20_pp0_stage0_iter9;
wire    ap_block_state22_pp0_stage0_iter10;
wire    ap_block_state24_pp0_stage0_iter11;
wire    ap_block_state26_pp0_stage0_iter12;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln5_reg_377_pp0_iter1_reg;
reg   [0:0] icmp_ln5_reg_377_pp0_iter2_reg;
reg   [0:0] icmp_ln5_reg_377_pp0_iter3_reg;
reg   [0:0] icmp_ln5_reg_377_pp0_iter4_reg;
reg   [0:0] icmp_ln5_reg_377_pp0_iter5_reg;
reg   [0:0] icmp_ln5_reg_377_pp0_iter6_reg;
reg   [0:0] icmp_ln5_reg_377_pp0_iter7_reg;
reg   [0:0] icmp_ln5_reg_377_pp0_iter8_reg;
reg   [0:0] icmp_ln5_reg_377_pp0_iter9_reg;
reg   [0:0] icmp_ln5_reg_377_pp0_iter10_reg;
reg   [0:0] icmp_ln5_reg_377_pp0_iter11_reg;
reg   [0:0] icmp_ln5_reg_377_pp0_iter12_reg;
wire   [4:0] add_ln5_fu_223_p2;
reg   [4:0] add_ln5_reg_381;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] select_ln12_fu_241_p3;
reg   [2:0] select_ln12_reg_386;
reg   [2:0] select_ln12_reg_386_pp0_iter1_reg;
reg   [2:0] select_ln12_reg_386_pp0_iter2_reg;
reg   [2:0] select_ln12_reg_386_pp0_iter3_reg;
reg   [2:0] select_ln12_reg_386_pp0_iter4_reg;
reg   [2:0] select_ln12_reg_386_pp0_iter5_reg;
reg   [2:0] select_ln12_reg_386_pp0_iter6_reg;
reg   [2:0] select_ln12_reg_386_pp0_iter7_reg;
reg   [2:0] select_ln12_reg_386_pp0_iter8_reg;
reg   [2:0] select_ln12_reg_386_pp0_iter9_reg;
reg   [2:0] select_ln12_reg_386_pp0_iter10_reg;
reg   [2:0] select_ln12_reg_386_pp0_iter11_reg;
reg   [2:0] select_ln12_reg_386_pp0_iter12_reg;
wire   [2:0] select_ln12_1_fu_249_p3;
reg   [2:0] select_ln12_1_reg_394;
wire   [4:0] tmp_4_fu_257_p3;
reg   [4:0] tmp_4_reg_399;
reg   [4:0] tmp_4_reg_399_pp0_iter1_reg;
reg   [4:0] tmp_4_reg_399_pp0_iter2_reg;
reg   [4:0] tmp_4_reg_399_pp0_iter3_reg;
reg   [4:0] tmp_4_reg_399_pp0_iter4_reg;
reg   [4:0] tmp_4_reg_399_pp0_iter5_reg;
reg   [4:0] tmp_4_reg_399_pp0_iter6_reg;
reg   [4:0] tmp_4_reg_399_pp0_iter7_reg;
reg   [4:0] tmp_4_reg_399_pp0_iter8_reg;
reg   [4:0] tmp_4_reg_399_pp0_iter9_reg;
reg   [4:0] tmp_4_reg_399_pp0_iter10_reg;
reg   [4:0] tmp_4_reg_399_pp0_iter11_reg;
reg   [4:0] tmp_4_reg_399_pp0_iter12_reg;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
wire    ap_block_state9_pp0_stage1_iter3;
wire    ap_block_state11_pp0_stage1_iter4;
wire    ap_block_state13_pp0_stage1_iter5;
wire    ap_block_state15_pp0_stage1_iter6;
wire    ap_block_state17_pp0_stage1_iter7;
wire    ap_block_state19_pp0_stage1_iter8;
wire    ap_block_state21_pp0_stage1_iter9;
wire    ap_block_state23_pp0_stage1_iter10;
wire    ap_block_state25_pp0_stage1_iter11;
wire    ap_block_state27_pp0_stage1_iter12;
wire    ap_block_pp0_stage1_11001;
wire   [2:0] j_fu_355_p2;
reg   [2:0] j_reg_466;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] grp_fu_205_p2;
reg   [31:0] tmp1_reg_491;
reg    ap_enable_reg_pp0_iter2;
wire   [31:0] grp_fu_211_p2;
reg   [31:0] tmp_1_reg_496;
reg   [31:0] tmp_1_reg_496_pp0_iter3_reg;
reg   [31:0] tmp_1_reg_496_pp0_iter4_reg;
reg   [31:0] tmp_2_reg_501;
reg   [31:0] tmp_2_reg_501_pp0_iter3_reg;
reg   [31:0] tmp_2_reg_501_pp0_iter4_reg;
reg   [31:0] tmp_2_reg_501_pp0_iter5_reg;
reg   [31:0] tmp_2_reg_501_pp0_iter6_reg;
reg   [31:0] tmp_3_reg_506;
reg   [31:0] tmp_3_reg_506_pp0_iter3_reg;
reg   [31:0] tmp_3_reg_506_pp0_iter4_reg;
reg   [31:0] tmp_3_reg_506_pp0_iter5_reg;
reg   [31:0] tmp_3_reg_506_pp0_iter6_reg;
reg   [31:0] tmp_3_reg_506_pp0_iter7_reg;
reg   [31:0] tmp_3_reg_506_pp0_iter8_reg;
reg   [31:0] tmp_3_reg_506_pp0_iter9_reg;
wire   [31:0] grp_fu_196_p2;
reg   [31:0] sum_s_reg_511;
reg    ap_enable_reg_pp0_iter4;
reg   [31:0] sum_1_reg_516;
reg    ap_enable_reg_pp0_iter7;
wire   [31:0] grp_fu_201_p2;
reg   [31:0] sum_2_reg_521;
reg    ap_enable_reg_pp0_iter9;
reg   [31:0] sum_3_reg_526;
reg    ap_enable_reg_pp0_iter12;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg   [4:0] ap_phi_mux_indvar_flatten_phi_fu_167_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_i_0_phi_fu_178_p4;
reg   [2:0] ap_phi_mux_j_0_phi_fu_189_p4;
wire   [63:0] zext_ln12_fu_265_p1;
wire   [63:0] tmp_5_fu_276_p3;
wire   [63:0] zext_ln12_1_fu_285_p1;
wire   [63:0] zext_ln12_6_fu_300_p1;
wire   [63:0] tmp_6_fu_310_p3;
wire    ap_block_pp0_stage1;
wire   [63:0] tmp_7_fu_324_p3;
wire   [63:0] tmp_8_fu_336_p3;
wire   [63:0] zext_ln12_7_fu_350_p1;
wire   [63:0] zext_ln14_fu_372_p1;
reg   [31:0] grp_fu_196_p0;
reg   [31:0] grp_fu_196_p1;
reg   [31:0] grp_fu_201_p0;
reg   [31:0] grp_fu_201_p1;
wire   [0:0] icmp_ln7_fu_235_p2;
wire   [2:0] i_fu_229_p2;
wire   [4:0] or_ln12_fu_270_p2;
wire   [3:0] zext_ln12_5_fu_290_p1;
wire   [3:0] add_ln12_fu_294_p2;
wire   [4:0] or_ln12_1_fu_305_p2;
wire   [4:0] or_ln12_2_fu_319_p2;
wire   [4:0] zext_ln12_4_fu_333_p1;
wire   [4:0] add_ln12_1_fu_344_p2;
wire   [5:0] zext_ln12_3_fu_363_p1;
wire   [5:0] zext_ln12_2_fu_360_p1;
wire   [5:0] add_ln14_fu_366_p2;
wire    ap_CS_fsm_state28;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
end

matrixmult_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmult_fadd_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_196_p0),
    .din1(grp_fu_196_p1),
    .ce(1'b1),
    .dout(grp_fu_196_p2)
);

matrixmult_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmult_fadd_3bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_201_p0),
    .din1(grp_fu_201_p1),
    .ce(1'b1),
    .dout(grp_fu_201_p2)
);

matrixmult_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmult_fmul_3cud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_q0),
    .din1(B_q0),
    .ce(1'b1),
    .dout(grp_fu_205_p2)
);

matrixmult_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmult_fmul_3cud_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_q1),
    .din1(B_q1),
    .ce(1'b1),
    .dout(grp_fu_211_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter12 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln5_reg_377 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_reg_174 <= select_ln12_1_reg_394;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_174 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln5_reg_377 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_163 <= add_ln5_reg_381;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_163 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln5_reg_377 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_0_reg_185 <= j_reg_466;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_185 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln5_reg_381 <= add_ln5_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln5_reg_377 <= icmp_ln5_fu_217_p2;
        icmp_ln5_reg_377_pp0_iter10_reg <= icmp_ln5_reg_377_pp0_iter9_reg;
        icmp_ln5_reg_377_pp0_iter11_reg <= icmp_ln5_reg_377_pp0_iter10_reg;
        icmp_ln5_reg_377_pp0_iter12_reg <= icmp_ln5_reg_377_pp0_iter11_reg;
        icmp_ln5_reg_377_pp0_iter1_reg <= icmp_ln5_reg_377;
        icmp_ln5_reg_377_pp0_iter2_reg <= icmp_ln5_reg_377_pp0_iter1_reg;
        icmp_ln5_reg_377_pp0_iter3_reg <= icmp_ln5_reg_377_pp0_iter2_reg;
        icmp_ln5_reg_377_pp0_iter4_reg <= icmp_ln5_reg_377_pp0_iter3_reg;
        icmp_ln5_reg_377_pp0_iter5_reg <= icmp_ln5_reg_377_pp0_iter4_reg;
        icmp_ln5_reg_377_pp0_iter6_reg <= icmp_ln5_reg_377_pp0_iter5_reg;
        icmp_ln5_reg_377_pp0_iter7_reg <= icmp_ln5_reg_377_pp0_iter6_reg;
        icmp_ln5_reg_377_pp0_iter8_reg <= icmp_ln5_reg_377_pp0_iter7_reg;
        icmp_ln5_reg_377_pp0_iter9_reg <= icmp_ln5_reg_377_pp0_iter8_reg;
        select_ln12_reg_386_pp0_iter10_reg <= select_ln12_reg_386_pp0_iter9_reg;
        select_ln12_reg_386_pp0_iter11_reg <= select_ln12_reg_386_pp0_iter10_reg;
        select_ln12_reg_386_pp0_iter12_reg <= select_ln12_reg_386_pp0_iter11_reg;
        select_ln12_reg_386_pp0_iter1_reg <= select_ln12_reg_386;
        select_ln12_reg_386_pp0_iter2_reg <= select_ln12_reg_386_pp0_iter1_reg;
        select_ln12_reg_386_pp0_iter3_reg <= select_ln12_reg_386_pp0_iter2_reg;
        select_ln12_reg_386_pp0_iter4_reg <= select_ln12_reg_386_pp0_iter3_reg;
        select_ln12_reg_386_pp0_iter5_reg <= select_ln12_reg_386_pp0_iter4_reg;
        select_ln12_reg_386_pp0_iter6_reg <= select_ln12_reg_386_pp0_iter5_reg;
        select_ln12_reg_386_pp0_iter7_reg <= select_ln12_reg_386_pp0_iter6_reg;
        select_ln12_reg_386_pp0_iter8_reg <= select_ln12_reg_386_pp0_iter7_reg;
        select_ln12_reg_386_pp0_iter9_reg <= select_ln12_reg_386_pp0_iter8_reg;
        tmp_1_reg_496_pp0_iter3_reg <= tmp_1_reg_496;
        tmp_1_reg_496_pp0_iter4_reg <= tmp_1_reg_496_pp0_iter3_reg;
        tmp_4_reg_399_pp0_iter10_reg[4 : 2] <= tmp_4_reg_399_pp0_iter9_reg[4 : 2];
        tmp_4_reg_399_pp0_iter11_reg[4 : 2] <= tmp_4_reg_399_pp0_iter10_reg[4 : 2];
        tmp_4_reg_399_pp0_iter12_reg[4 : 2] <= tmp_4_reg_399_pp0_iter11_reg[4 : 2];
        tmp_4_reg_399_pp0_iter1_reg[4 : 2] <= tmp_4_reg_399[4 : 2];
        tmp_4_reg_399_pp0_iter2_reg[4 : 2] <= tmp_4_reg_399_pp0_iter1_reg[4 : 2];
        tmp_4_reg_399_pp0_iter3_reg[4 : 2] <= tmp_4_reg_399_pp0_iter2_reg[4 : 2];
        tmp_4_reg_399_pp0_iter4_reg[4 : 2] <= tmp_4_reg_399_pp0_iter3_reg[4 : 2];
        tmp_4_reg_399_pp0_iter5_reg[4 : 2] <= tmp_4_reg_399_pp0_iter4_reg[4 : 2];
        tmp_4_reg_399_pp0_iter6_reg[4 : 2] <= tmp_4_reg_399_pp0_iter5_reg[4 : 2];
        tmp_4_reg_399_pp0_iter7_reg[4 : 2] <= tmp_4_reg_399_pp0_iter6_reg[4 : 2];
        tmp_4_reg_399_pp0_iter8_reg[4 : 2] <= tmp_4_reg_399_pp0_iter7_reg[4 : 2];
        tmp_4_reg_399_pp0_iter9_reg[4 : 2] <= tmp_4_reg_399_pp0_iter8_reg[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_377 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        j_reg_466 <= j_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln5_fu_217_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln12_1_reg_394 <= select_ln12_1_fu_249_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln5_fu_217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln12_reg_386 <= select_ln12_fu_241_p3;
        tmp_4_reg_399[4 : 2] <= tmp_4_fu_257_p3[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_377_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        sum_1_reg_516 <= grp_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_377_pp0_iter9_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        sum_2_reg_521 <= grp_fu_201_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_377_pp0_iter11_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        sum_3_reg_526 <= grp_fu_201_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_377_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        sum_s_reg_511 <= grp_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_377_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp1_reg_491 <= grp_fu_205_p2;
        tmp_1_reg_496 <= grp_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln5_reg_377_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_2_reg_501 <= grp_fu_205_p2;
        tmp_3_reg_506 <= grp_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_2_reg_501_pp0_iter3_reg <= tmp_2_reg_501;
        tmp_2_reg_501_pp0_iter4_reg <= tmp_2_reg_501_pp0_iter3_reg;
        tmp_2_reg_501_pp0_iter5_reg <= tmp_2_reg_501_pp0_iter4_reg;
        tmp_2_reg_501_pp0_iter6_reg <= tmp_2_reg_501_pp0_iter5_reg;
        tmp_3_reg_506_pp0_iter3_reg <= tmp_3_reg_506;
        tmp_3_reg_506_pp0_iter4_reg <= tmp_3_reg_506_pp0_iter3_reg;
        tmp_3_reg_506_pp0_iter5_reg <= tmp_3_reg_506_pp0_iter4_reg;
        tmp_3_reg_506_pp0_iter6_reg <= tmp_3_reg_506_pp0_iter5_reg;
        tmp_3_reg_506_pp0_iter7_reg <= tmp_3_reg_506_pp0_iter6_reg;
        tmp_3_reg_506_pp0_iter8_reg <= tmp_3_reg_506_pp0_iter7_reg;
        tmp_3_reg_506_pp0_iter9_reg <= tmp_3_reg_506_pp0_iter8_reg;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            A_address0 = tmp_6_fu_310_p3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            A_address0 = zext_ln12_fu_265_p1;
        end else begin
            A_address0 = 'bx;
        end
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            A_address1 = tmp_7_fu_324_p3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            A_address1 = tmp_5_fu_276_p3;
        end else begin
            A_address1 = 'bx;
        end
    end else begin
        A_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            B_address0 = tmp_8_fu_336_p3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            B_address0 = zext_ln12_1_fu_285_p1;
        end else begin
            B_address0 = 'bx;
        end
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            B_address1 = zext_ln12_7_fu_350_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            B_address1 = zext_ln12_6_fu_300_p1;
        end else begin
            B_address1 = 'bx;
        end
    end else begin
        B_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        B_ce1 = 1'b1;
    end else begin
        B_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln5_fu_217_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln5_reg_377 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_phi_fu_178_p4 = select_ln12_1_reg_394;
    end else begin
        ap_phi_mux_i_0_phi_fu_178_p4 = i_0_reg_174;
    end
end

always @ (*) begin
    if (((icmp_ln5_reg_377 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_167_p4 = add_ln5_reg_381;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_167_p4 = indvar_flatten_reg_163;
    end
end

always @ (*) begin
    if (((icmp_ln5_reg_377 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_j_0_phi_fu_189_p4 = j_reg_466;
    end else begin
        ap_phi_mux_j_0_phi_fu_189_p4 = j_0_reg_185;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        grp_fu_196_p0 = sum_s_reg_511;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_196_p0 = tmp1_reg_491;
    end else begin
        grp_fu_196_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        grp_fu_196_p1 = tmp_1_reg_496_pp0_iter4_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_196_p1 = 32'd0;
    end else begin
        grp_fu_196_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        grp_fu_201_p0 = sum_2_reg_521;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_201_p0 = sum_1_reg_516;
    end else begin
        grp_fu_201_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        grp_fu_201_p1 = tmp_3_reg_506_pp0_iter9_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_201_p1 = tmp_2_reg_501_pp0_iter6_reg;
    end else begin
        grp_fu_201_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln5_reg_377_pp0_iter12_reg == 1'd0) & (ap_enable_reg_pp0_iter12 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln5_fu_217_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln5_fu_217_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter11 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter12 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter11 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter12 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_1_fu_344_p2 = (zext_ln12_4_fu_333_p1 + 5'd12);

assign add_ln12_fu_294_p2 = (zext_ln12_5_fu_290_p1 + 4'd4);

assign add_ln14_fu_366_p2 = (zext_ln12_3_fu_363_p1 + zext_ln12_2_fu_360_p1);

assign add_ln5_fu_223_p2 = (ap_phi_mux_indvar_flatten_phi_fu_167_p4 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage1_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage1_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_fu_229_p2 = (ap_phi_mux_i_0_phi_fu_178_p4 + 3'd1);

assign icmp_ln5_fu_217_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_167_p4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln7_fu_235_p2 = ((ap_phi_mux_j_0_phi_fu_189_p4 == 3'd4) ? 1'b1 : 1'b0);

assign j_fu_355_p2 = (select_ln12_reg_386 + 3'd1);

assign or_ln12_1_fu_305_p2 = (tmp_4_reg_399 | 5'd2);

assign or_ln12_2_fu_319_p2 = (tmp_4_reg_399 | 5'd3);

assign or_ln12_fu_270_p2 = (tmp_4_fu_257_p3 | 5'd1);

assign res_address0 = zext_ln14_fu_372_p1;

assign res_d0 = sum_3_reg_526;

assign select_ln12_1_fu_249_p3 = ((icmp_ln7_fu_235_p2[0:0] === 1'b1) ? i_fu_229_p2 : ap_phi_mux_i_0_phi_fu_178_p4);

assign select_ln12_fu_241_p3 = ((icmp_ln7_fu_235_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_j_0_phi_fu_189_p4);

assign tmp_4_fu_257_p3 = {{select_ln12_1_fu_249_p3}, {2'd0}};

assign tmp_5_fu_276_p3 = {{59'd0}, {or_ln12_fu_270_p2}};

assign tmp_6_fu_310_p3 = {{59'd0}, {or_ln12_1_fu_305_p2}};

assign tmp_7_fu_324_p3 = {{59'd0}, {or_ln12_2_fu_319_p2}};

assign tmp_8_fu_336_p3 = {{61'd1}, {select_ln12_reg_386}};

assign zext_ln12_1_fu_285_p1 = select_ln12_fu_241_p3;

assign zext_ln12_2_fu_360_p1 = tmp_4_reg_399_pp0_iter12_reg;

assign zext_ln12_3_fu_363_p1 = select_ln12_reg_386_pp0_iter12_reg;

assign zext_ln12_4_fu_333_p1 = select_ln12_reg_386;

assign zext_ln12_5_fu_290_p1 = select_ln12_fu_241_p3;

assign zext_ln12_6_fu_300_p1 = add_ln12_fu_294_p2;

assign zext_ln12_7_fu_350_p1 = add_ln12_1_fu_344_p2;

assign zext_ln12_fu_265_p1 = tmp_4_fu_257_p3;

assign zext_ln14_fu_372_p1 = add_ln14_fu_366_p2;

always @ (posedge ap_clk) begin
    tmp_4_reg_399[1:0] <= 2'b00;
    tmp_4_reg_399_pp0_iter1_reg[1:0] <= 2'b00;
    tmp_4_reg_399_pp0_iter2_reg[1:0] <= 2'b00;
    tmp_4_reg_399_pp0_iter3_reg[1:0] <= 2'b00;
    tmp_4_reg_399_pp0_iter4_reg[1:0] <= 2'b00;
    tmp_4_reg_399_pp0_iter5_reg[1:0] <= 2'b00;
    tmp_4_reg_399_pp0_iter6_reg[1:0] <= 2'b00;
    tmp_4_reg_399_pp0_iter7_reg[1:0] <= 2'b00;
    tmp_4_reg_399_pp0_iter8_reg[1:0] <= 2'b00;
    tmp_4_reg_399_pp0_iter9_reg[1:0] <= 2'b00;
    tmp_4_reg_399_pp0_iter10_reg[1:0] <= 2'b00;
    tmp_4_reg_399_pp0_iter11_reg[1:0] <= 2'b00;
    tmp_4_reg_399_pp0_iter12_reg[1:0] <= 2'b00;
end

endmodule //matrixmult
