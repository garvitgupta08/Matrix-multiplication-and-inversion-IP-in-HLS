-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrixmult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmult,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.024000,HLS_SYN_LAT=57,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=10,HLS_SYN_FF=1382,HLS_SYN_LUT=1949,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv61_1 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_163 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_reg_174 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_reg_185 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln5_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_377 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln5_reg_377_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_377_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_377_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_377_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_377_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_377_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_377_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_377_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_377_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_377_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_377_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_reg_377_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln5_fu_223_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln5_reg_381 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln12_fu_241_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_reg_386 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_reg_386_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_reg_386_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_reg_386_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_reg_386_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_reg_386_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_reg_386_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_reg_386_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_reg_386_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_reg_386_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_reg_386_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_reg_386_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_reg_386_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_1_fu_249_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_1_reg_394 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_257_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_399 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_399_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_399_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_399_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_399_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_399_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_399_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_399_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_399_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_399_pp0_iter9_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_399_pp0_iter10_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_399_pp0_iter11_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_399_pp0_iter12_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state17_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state21_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state25_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state27_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal j_fu_355_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_466 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_496_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_496_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_501_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_501_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_501_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_501_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_506_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_506_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_506_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_506_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_506_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_506_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_506_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_s_reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal sum_1_reg_516 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal grp_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_reg_521 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal sum_3_reg_526 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten_phi_fu_167_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_0_phi_fu_178_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_j_0_phi_fu_189_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln12_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_276_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_1_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_6_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_310_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_7_fu_324_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_336_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_7_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_196_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_196_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln7_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_229_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln12_fu_270_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln12_5_fu_290_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln12_fu_294_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln12_1_fu_305_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln12_2_fu_319_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln12_4_fu_333_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln12_1_fu_344_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln12_3_fu_363_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln12_2_fu_360_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln14_fu_366_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component matrixmult_fadd_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmult_fmul_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    matrixmult_fadd_3bkb_U1 : component matrixmult_fadd_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_196_p0,
        din1 => grp_fu_196_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_196_p2);

    matrixmult_fadd_3bkb_U2 : component matrixmult_fadd_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_201_p0,
        din1 => grp_fu_201_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_201_p2);

    matrixmult_fmul_3cud_U3 : component matrixmult_fmul_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_q0,
        din1 => B_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_205_p2);

    matrixmult_fmul_3cud_U4 : component matrixmult_fmul_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_q1,
        din1 => B_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_211_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln5_reg_377 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_0_reg_174 <= select_ln12_1_reg_394;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_174 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln5_reg_377 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_163 <= add_ln5_reg_381;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_163 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln5_reg_377 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j_0_reg_185 <= j_reg_466;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_185 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln5_reg_381 <= add_ln5_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln5_reg_377 <= icmp_ln5_fu_217_p2;
                icmp_ln5_reg_377_pp0_iter10_reg <= icmp_ln5_reg_377_pp0_iter9_reg;
                icmp_ln5_reg_377_pp0_iter11_reg <= icmp_ln5_reg_377_pp0_iter10_reg;
                icmp_ln5_reg_377_pp0_iter12_reg <= icmp_ln5_reg_377_pp0_iter11_reg;
                icmp_ln5_reg_377_pp0_iter1_reg <= icmp_ln5_reg_377;
                icmp_ln5_reg_377_pp0_iter2_reg <= icmp_ln5_reg_377_pp0_iter1_reg;
                icmp_ln5_reg_377_pp0_iter3_reg <= icmp_ln5_reg_377_pp0_iter2_reg;
                icmp_ln5_reg_377_pp0_iter4_reg <= icmp_ln5_reg_377_pp0_iter3_reg;
                icmp_ln5_reg_377_pp0_iter5_reg <= icmp_ln5_reg_377_pp0_iter4_reg;
                icmp_ln5_reg_377_pp0_iter6_reg <= icmp_ln5_reg_377_pp0_iter5_reg;
                icmp_ln5_reg_377_pp0_iter7_reg <= icmp_ln5_reg_377_pp0_iter6_reg;
                icmp_ln5_reg_377_pp0_iter8_reg <= icmp_ln5_reg_377_pp0_iter7_reg;
                icmp_ln5_reg_377_pp0_iter9_reg <= icmp_ln5_reg_377_pp0_iter8_reg;
                select_ln12_reg_386_pp0_iter10_reg <= select_ln12_reg_386_pp0_iter9_reg;
                select_ln12_reg_386_pp0_iter11_reg <= select_ln12_reg_386_pp0_iter10_reg;
                select_ln12_reg_386_pp0_iter12_reg <= select_ln12_reg_386_pp0_iter11_reg;
                select_ln12_reg_386_pp0_iter1_reg <= select_ln12_reg_386;
                select_ln12_reg_386_pp0_iter2_reg <= select_ln12_reg_386_pp0_iter1_reg;
                select_ln12_reg_386_pp0_iter3_reg <= select_ln12_reg_386_pp0_iter2_reg;
                select_ln12_reg_386_pp0_iter4_reg <= select_ln12_reg_386_pp0_iter3_reg;
                select_ln12_reg_386_pp0_iter5_reg <= select_ln12_reg_386_pp0_iter4_reg;
                select_ln12_reg_386_pp0_iter6_reg <= select_ln12_reg_386_pp0_iter5_reg;
                select_ln12_reg_386_pp0_iter7_reg <= select_ln12_reg_386_pp0_iter6_reg;
                select_ln12_reg_386_pp0_iter8_reg <= select_ln12_reg_386_pp0_iter7_reg;
                select_ln12_reg_386_pp0_iter9_reg <= select_ln12_reg_386_pp0_iter8_reg;
                tmp_1_reg_496_pp0_iter3_reg <= tmp_1_reg_496;
                tmp_1_reg_496_pp0_iter4_reg <= tmp_1_reg_496_pp0_iter3_reg;
                    tmp_4_reg_399_pp0_iter10_reg(4 downto 2) <= tmp_4_reg_399_pp0_iter9_reg(4 downto 2);
                    tmp_4_reg_399_pp0_iter11_reg(4 downto 2) <= tmp_4_reg_399_pp0_iter10_reg(4 downto 2);
                    tmp_4_reg_399_pp0_iter12_reg(4 downto 2) <= tmp_4_reg_399_pp0_iter11_reg(4 downto 2);
                    tmp_4_reg_399_pp0_iter1_reg(4 downto 2) <= tmp_4_reg_399(4 downto 2);
                    tmp_4_reg_399_pp0_iter2_reg(4 downto 2) <= tmp_4_reg_399_pp0_iter1_reg(4 downto 2);
                    tmp_4_reg_399_pp0_iter3_reg(4 downto 2) <= tmp_4_reg_399_pp0_iter2_reg(4 downto 2);
                    tmp_4_reg_399_pp0_iter4_reg(4 downto 2) <= tmp_4_reg_399_pp0_iter3_reg(4 downto 2);
                    tmp_4_reg_399_pp0_iter5_reg(4 downto 2) <= tmp_4_reg_399_pp0_iter4_reg(4 downto 2);
                    tmp_4_reg_399_pp0_iter6_reg(4 downto 2) <= tmp_4_reg_399_pp0_iter5_reg(4 downto 2);
                    tmp_4_reg_399_pp0_iter7_reg(4 downto 2) <= tmp_4_reg_399_pp0_iter6_reg(4 downto 2);
                    tmp_4_reg_399_pp0_iter8_reg(4 downto 2) <= tmp_4_reg_399_pp0_iter7_reg(4 downto 2);
                    tmp_4_reg_399_pp0_iter9_reg(4 downto 2) <= tmp_4_reg_399_pp0_iter8_reg(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_reg_377 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                j_reg_466 <= j_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln5_fu_217_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln12_1_reg_394 <= select_ln12_1_fu_249_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln5_fu_217_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln12_reg_386 <= select_ln12_fu_241_p3;
                    tmp_4_reg_399(4 downto 2) <= tmp_4_fu_257_p3(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_reg_377_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                sum_1_reg_516 <= grp_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_reg_377_pp0_iter9_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                sum_2_reg_521 <= grp_fu_201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_reg_377_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then
                sum_3_reg_526 <= grp_fu_201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_reg_377_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                sum_s_reg_511 <= grp_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_reg_377_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                tmp1_reg_491 <= grp_fu_205_p2;
                tmp_1_reg_496 <= grp_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln5_reg_377_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_2_reg_501 <= grp_fu_205_p2;
                tmp_3_reg_506 <= grp_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_2_reg_501_pp0_iter3_reg <= tmp_2_reg_501;
                tmp_2_reg_501_pp0_iter4_reg <= tmp_2_reg_501_pp0_iter3_reg;
                tmp_2_reg_501_pp0_iter5_reg <= tmp_2_reg_501_pp0_iter4_reg;
                tmp_2_reg_501_pp0_iter6_reg <= tmp_2_reg_501_pp0_iter5_reg;
                tmp_3_reg_506_pp0_iter3_reg <= tmp_3_reg_506;
                tmp_3_reg_506_pp0_iter4_reg <= tmp_3_reg_506_pp0_iter3_reg;
                tmp_3_reg_506_pp0_iter5_reg <= tmp_3_reg_506_pp0_iter4_reg;
                tmp_3_reg_506_pp0_iter6_reg <= tmp_3_reg_506_pp0_iter5_reg;
                tmp_3_reg_506_pp0_iter7_reg <= tmp_3_reg_506_pp0_iter6_reg;
                tmp_3_reg_506_pp0_iter8_reg <= tmp_3_reg_506_pp0_iter7_reg;
                tmp_3_reg_506_pp0_iter9_reg <= tmp_3_reg_506_pp0_iter8_reg;
            end if;
        end if;
    end process;
    tmp_4_reg_399(1 downto 0) <= "00";
    tmp_4_reg_399_pp0_iter1_reg(1 downto 0) <= "00";
    tmp_4_reg_399_pp0_iter2_reg(1 downto 0) <= "00";
    tmp_4_reg_399_pp0_iter3_reg(1 downto 0) <= "00";
    tmp_4_reg_399_pp0_iter4_reg(1 downto 0) <= "00";
    tmp_4_reg_399_pp0_iter5_reg(1 downto 0) <= "00";
    tmp_4_reg_399_pp0_iter6_reg(1 downto 0) <= "00";
    tmp_4_reg_399_pp0_iter7_reg(1 downto 0) <= "00";
    tmp_4_reg_399_pp0_iter8_reg(1 downto 0) <= "00";
    tmp_4_reg_399_pp0_iter9_reg(1 downto 0) <= "00";
    tmp_4_reg_399_pp0_iter10_reg(1 downto 0) <= "00";
    tmp_4_reg_399_pp0_iter11_reg(1 downto 0) <= "00";
    tmp_4_reg_399_pp0_iter12_reg(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln5_fu_217_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln5_fu_217_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln5_fu_217_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln12_fu_265_p1, tmp_6_fu_310_p3, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                A_address0 <= tmp_6_fu_310_p3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                A_address0 <= zext_ln12_fu_265_p1(4 - 1 downto 0);
            else 
                A_address0 <= "XXXX";
            end if;
        else 
            A_address0 <= "XXXX";
        end if; 
    end process;


    A_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, tmp_5_fu_276_p3, ap_block_pp0_stage1, tmp_7_fu_324_p3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                A_address1 <= tmp_7_fu_324_p3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                A_address1 <= tmp_5_fu_276_p3(4 - 1 downto 0);
            else 
                A_address1 <= "XXXX";
            end if;
        else 
            A_address1 <= "XXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln12_1_fu_285_p1, ap_block_pp0_stage1, tmp_8_fu_336_p3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                B_address0 <= tmp_8_fu_336_p3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                B_address0 <= zext_ln12_1_fu_285_p1(4 - 1 downto 0);
            else 
                B_address0 <= "XXXX";
            end if;
        else 
            B_address0 <= "XXXX";
        end if; 
    end process;


    B_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln12_6_fu_300_p1, ap_block_pp0_stage1, zext_ln12_7_fu_350_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                B_address1 <= zext_ln12_7_fu_350_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                B_address1 <= zext_ln12_6_fu_300_p1(4 - 1 downto 0);
            else 
                B_address1 <= "XXXX";
            end if;
        else 
            B_address1 <= "XXXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            B_ce1 <= ap_const_logic_1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln12_1_fu_344_p2 <= std_logic_vector(unsigned(zext_ln12_4_fu_333_p1) + unsigned(ap_const_lv5_C));
    add_ln12_fu_294_p2 <= std_logic_vector(unsigned(zext_ln12_5_fu_290_p1) + unsigned(ap_const_lv4_4));
    add_ln14_fu_366_p2 <= std_logic_vector(unsigned(zext_ln12_3_fu_363_p1) + unsigned(zext_ln12_2_fu_360_p1));
    add_ln5_fu_223_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_167_p4) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state28 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln5_fu_217_p2)
    begin
        if ((icmp_ln5_fu_217_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_178_p4_assign_proc : process(i_0_reg_174, icmp_ln5_reg_377, ap_CS_fsm_pp0_stage0, select_ln12_1_reg_394, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln5_reg_377 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_0_phi_fu_178_p4 <= select_ln12_1_reg_394;
        else 
            ap_phi_mux_i_0_phi_fu_178_p4 <= i_0_reg_174;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_167_p4_assign_proc : process(indvar_flatten_reg_163, icmp_ln5_reg_377, ap_CS_fsm_pp0_stage0, add_ln5_reg_381, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln5_reg_377 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_167_p4 <= add_ln5_reg_381;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_167_p4 <= indvar_flatten_reg_163;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_189_p4_assign_proc : process(j_0_reg_185, icmp_ln5_reg_377, ap_CS_fsm_pp0_stage0, j_reg_466, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln5_reg_377 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_j_0_phi_fu_189_p4 <= j_reg_466;
        else 
            ap_phi_mux_j_0_phi_fu_189_p4 <= j_0_reg_185;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_196_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, tmp1_reg_491, ap_enable_reg_pp0_iter2, sum_s_reg_511, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            grp_fu_196_p0 <= sum_s_reg_511;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_196_p0 <= tmp1_reg_491;
        else 
            grp_fu_196_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_196_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, tmp_1_reg_496_pp0_iter4_reg, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            grp_fu_196_p1 <= tmp_1_reg_496_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_196_p1 <= ap_const_lv32_0;
        else 
            grp_fu_196_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_201_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, sum_1_reg_516, ap_enable_reg_pp0_iter7, sum_2_reg_521, ap_enable_reg_pp0_iter10, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            grp_fu_201_p0 <= sum_2_reg_521;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_201_p0 <= sum_1_reg_516;
        else 
            grp_fu_201_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_201_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, tmp_2_reg_501_pp0_iter6_reg, tmp_3_reg_506_pp0_iter9_reg, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter10, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            grp_fu_201_p1 <= tmp_3_reg_506_pp0_iter9_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_201_p1 <= tmp_2_reg_501_pp0_iter6_reg;
        else 
            grp_fu_201_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_229_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_178_p4) + unsigned(ap_const_lv3_1));
    icmp_ln5_fu_217_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_167_p4 = ap_const_lv5_10) else "0";
    icmp_ln7_fu_235_p2 <= "1" when (ap_phi_mux_j_0_phi_fu_189_p4 = ap_const_lv3_4) else "0";
    j_fu_355_p2 <= std_logic_vector(unsigned(select_ln12_reg_386) + unsigned(ap_const_lv3_1));
    or_ln12_1_fu_305_p2 <= (tmp_4_reg_399 or ap_const_lv5_2);
    or_ln12_2_fu_319_p2 <= (tmp_4_reg_399 or ap_const_lv5_3);
    or_ln12_fu_270_p2 <= (tmp_4_fu_257_p3 or ap_const_lv5_1);
    res_address0 <= zext_ln14_fu_372_p1(4 - 1 downto 0);

    res_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_d0 <= sum_3_reg_526;

    res_we0_assign_proc : process(icmp_ln5_reg_377_pp0_iter12_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((icmp_ln5_reg_377_pp0_iter12_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln12_1_fu_249_p3 <= 
        i_fu_229_p2 when (icmp_ln7_fu_235_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_178_p4;
    select_ln12_fu_241_p3 <= 
        ap_const_lv3_0 when (icmp_ln7_fu_235_p2(0) = '1') else 
        ap_phi_mux_j_0_phi_fu_189_p4;
    tmp_4_fu_257_p3 <= (select_ln12_1_fu_249_p3 & ap_const_lv2_0);
    tmp_5_fu_276_p3 <= (ap_const_lv59_0 & or_ln12_fu_270_p2);
    tmp_6_fu_310_p3 <= (ap_const_lv59_0 & or_ln12_1_fu_305_p2);
    tmp_7_fu_324_p3 <= (ap_const_lv59_0 & or_ln12_2_fu_319_p2);
    tmp_8_fu_336_p3 <= (ap_const_lv61_1 & select_ln12_reg_386);
    zext_ln12_1_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_fu_241_p3),64));
    zext_ln12_2_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_399_pp0_iter12_reg),6));
    zext_ln12_3_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_reg_386_pp0_iter12_reg),6));
    zext_ln12_4_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_reg_386),5));
    zext_ln12_5_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_fu_241_p3),4));
    zext_ln12_6_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_fu_294_p2),64));
    zext_ln12_7_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln12_1_fu_344_p2),64));
    zext_ln12_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_257_p3),64));
    zext_ln14_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_fu_366_p2),64));
end behav;
