// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmult,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.024000,HLS_SYN_LAT=42,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=20,HLS_SYN_FF=2223,HLS_SYN_LUT=3276,HLS_VERSION=2019_1}" *)

module matrixmult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_0_address0,
        A_0_ce0,
        A_0_q0,
        A_0_address1,
        A_0_ce1,
        A_0_q1,
        A_1_address0,
        A_1_ce0,
        A_1_q0,
        A_1_address1,
        A_1_ce1,
        A_1_q1,
        B_0_address0,
        B_0_ce0,
        B_0_q0,
        B_0_address1,
        B_0_ce1,
        B_0_q1,
        B_1_address0,
        B_1_ce0,
        B_1_q0,
        B_1_address1,
        B_1_ce1,
        B_1_q1,
        res_address0,
        res_ce0,
        res_we0,
        res_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state28 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] A_0_address0;
output   A_0_ce0;
input  [31:0] A_0_q0;
output  [2:0] A_0_address1;
output   A_0_ce1;
input  [31:0] A_0_q1;
output  [2:0] A_1_address0;
output   A_1_ce0;
input  [31:0] A_1_q0;
output  [2:0] A_1_address1;
output   A_1_ce1;
input  [31:0] A_1_q1;
output  [2:0] B_0_address0;
output   B_0_ce0;
input  [31:0] B_0_q0;
output  [2:0] B_0_address1;
output   B_0_ce1;
input  [31:0] B_0_q1;
output  [2:0] B_1_address0;
output   B_1_ce0;
input  [31:0] B_1_q0;
output  [2:0] B_1_address1;
output   B_1_ce1;
input  [31:0] B_1_q1;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [31:0] res_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_0_ce0;
reg A_0_ce1;
reg A_1_ce0;
reg A_1_ce1;
reg B_0_ce0;
reg B_0_ce1;
reg B_1_ce0;
reg B_1_ce1;
reg res_ce0;
reg res_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] indvar_flatten_reg_181;
reg   [2:0] i_0_reg_192;
reg   [2:0] j_0_reg_203;
wire   [0:0] icmp_ln7_fu_255_p2;
reg   [0:0] icmp_ln7_reg_372;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
wire    ap_block_state27_pp0_stage0_iter25;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln7_reg_372_pp0_iter1_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter2_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter3_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter4_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter5_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter6_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter7_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter8_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter9_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter10_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter11_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter12_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter13_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter14_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter15_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter16_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter17_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter18_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter19_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter20_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter21_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter22_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter23_reg;
reg   [0:0] icmp_ln7_reg_372_pp0_iter24_reg;
wire   [4:0] add_ln7_fu_261_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] select_ln14_fu_279_p3;
reg   [2:0] select_ln14_reg_381;
reg   [2:0] select_ln14_reg_381_pp0_iter1_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter2_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter3_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter4_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter5_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter6_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter7_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter8_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter9_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter10_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter11_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter12_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter13_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter14_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter15_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter16_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter17_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter18_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter19_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter20_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter21_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter22_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter23_reg;
reg   [2:0] select_ln14_reg_381_pp0_iter24_reg;
wire   [2:0] select_ln14_1_fu_287_p3;
reg   [2:0] select_ln14_1_reg_387;
reg   [2:0] select_ln14_1_reg_387_pp0_iter1_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter2_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter3_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter4_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter5_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter6_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter7_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter8_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter9_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter10_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter11_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter12_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter13_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter14_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter15_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter16_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter17_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter18_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter19_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter20_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter21_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter22_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter23_reg;
reg   [2:0] select_ln14_1_reg_387_pp0_iter24_reg;
wire   [3:0] tmp_4_fu_295_p3;
reg   [3:0] tmp_4_reg_393;
reg   [3:0] tmp_4_reg_393_pp0_iter1_reg;
reg   [3:0] tmp_4_reg_393_pp0_iter2_reg;
reg   [3:0] tmp_4_reg_393_pp0_iter3_reg;
reg   [3:0] tmp_4_reg_393_pp0_iter4_reg;
wire   [63:0] zext_ln14_fu_303_p1;
reg   [63:0] zext_ln14_reg_398;
reg   [63:0] zext_ln14_reg_398_pp0_iter1_reg;
reg   [63:0] zext_ln14_reg_398_pp0_iter2_reg;
reg   [63:0] zext_ln14_reg_398_pp0_iter3_reg;
reg   [63:0] zext_ln14_reg_398_pp0_iter4_reg;
reg   [63:0] zext_ln14_reg_398_pp0_iter5_reg;
reg   [63:0] zext_ln14_reg_398_pp0_iter6_reg;
reg   [63:0] zext_ln14_reg_398_pp0_iter7_reg;
reg   [63:0] zext_ln14_reg_398_pp0_iter8_reg;
reg   [63:0] zext_ln14_reg_398_pp0_iter9_reg;
wire   [63:0] zext_ln14_1_fu_308_p1;
reg   [63:0] zext_ln14_1_reg_408;
reg   [63:0] zext_ln14_1_reg_408_pp0_iter1_reg;
reg   [63:0] zext_ln14_1_reg_408_pp0_iter2_reg;
reg   [63:0] zext_ln14_1_reg_408_pp0_iter3_reg;
reg   [63:0] zext_ln14_1_reg_408_pp0_iter4_reg;
reg   [63:0] zext_ln14_1_reg_408_pp0_iter5_reg;
reg   [63:0] zext_ln14_1_reg_408_pp0_iter6_reg;
reg   [63:0] zext_ln14_1_reg_408_pp0_iter7_reg;
reg   [63:0] zext_ln14_1_reg_408_pp0_iter8_reg;
reg   [63:0] zext_ln14_1_reg_408_pp0_iter9_reg;
wire   [2:0] j_fu_313_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] grp_fu_231_p2;
reg   [31:0] tmp1_reg_433;
wire   [63:0] tmp_5_fu_324_p3;
reg   [63:0] tmp_5_reg_438;
reg   [63:0] tmp_5_reg_438_pp0_iter6_reg;
reg   [63:0] tmp_5_reg_438_pp0_iter7_reg;
reg   [63:0] tmp_5_reg_438_pp0_iter8_reg;
reg   [63:0] tmp_5_reg_438_pp0_iter9_reg;
reg   [63:0] tmp_5_reg_438_pp0_iter10_reg;
reg   [63:0] tmp_5_reg_438_pp0_iter11_reg;
reg   [63:0] tmp_5_reg_438_pp0_iter12_reg;
reg   [63:0] tmp_5_reg_438_pp0_iter13_reg;
reg   [63:0] tmp_5_reg_438_pp0_iter14_reg;
wire   [63:0] zext_ln14_4_fu_342_p1;
reg   [63:0] zext_ln14_4_reg_448;
reg   [63:0] zext_ln14_4_reg_448_pp0_iter6_reg;
reg   [63:0] zext_ln14_4_reg_448_pp0_iter7_reg;
reg   [63:0] zext_ln14_4_reg_448_pp0_iter8_reg;
reg   [63:0] zext_ln14_4_reg_448_pp0_iter9_reg;
reg   [63:0] zext_ln14_4_reg_448_pp0_iter10_reg;
reg   [63:0] zext_ln14_4_reg_448_pp0_iter11_reg;
reg   [63:0] zext_ln14_4_reg_448_pp0_iter12_reg;
reg   [63:0] zext_ln14_4_reg_448_pp0_iter13_reg;
reg   [63:0] zext_ln14_4_reg_448_pp0_iter14_reg;
reg    ap_enable_reg_pp0_iter6;
wire   [31:0] grp_fu_214_p2;
reg   [31:0] sum_s_reg_468;
wire   [31:0] grp_fu_237_p2;
reg   [31:0] tmp_1_reg_473;
reg    ap_enable_reg_pp0_iter11;
wire   [31:0] grp_fu_219_p2;
reg   [31:0] sum_1_reg_498;
wire   [31:0] grp_fu_243_p2;
reg   [31:0] tmp_2_reg_503;
reg    ap_enable_reg_pp0_iter16;
wire   [31:0] grp_fu_223_p2;
reg   [31:0] sum_2_reg_528;
wire   [31:0] grp_fu_249_p2;
reg   [31:0] tmp_3_reg_533;
wire   [31:0] grp_fu_227_p2;
reg   [31:0] sum_3_reg_538;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg   [2:0] ap_phi_mux_i_0_phi_fu_196_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln16_fu_367_p1;
wire   [0:0] icmp_ln9_fu_273_p2;
wire   [2:0] i_fu_267_p2;
wire   [3:0] or_ln14_fu_319_p2;
wire   [3:0] zext_ln14_3_fu_333_p1;
wire   [3:0] add_ln14_fu_336_p2;
wire   [4:0] tmp_6_fu_347_p3;
wire   [5:0] zext_ln14_2_fu_358_p1;
wire   [5:0] zext_ln10_fu_354_p1;
wire   [5:0] add_ln16_fu_361_p2;
wire    ap_CS_fsm_state28;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
end

matrixmult_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmult_fadd_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp1_reg_433),
    .din1(32'd0),
    .ce(1'b1),
    .dout(grp_fu_214_p2)
);

matrixmult_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmult_fadd_3bkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_s_reg_468),
    .din1(tmp_1_reg_473),
    .ce(1'b1),
    .dout(grp_fu_219_p2)
);

matrixmult_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmult_fadd_3bkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_1_reg_498),
    .din1(tmp_2_reg_503),
    .ce(1'b1),
    .dout(grp_fu_223_p2)
);

matrixmult_fadd_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmult_fadd_3bkb_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_2_reg_528),
    .din1(tmp_3_reg_533),
    .ce(1'b1),
    .dout(grp_fu_227_p2)
);

matrixmult_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmult_fmul_3cud_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_0_q0),
    .din1(B_0_q0),
    .ce(1'b1),
    .dout(grp_fu_231_p2)
);

matrixmult_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmult_fmul_3cud_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_0_q1),
    .din1(B_0_q1),
    .ce(1'b1),
    .dout(grp_fu_237_p2)
);

matrixmult_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmult_fmul_3cud_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_1_q0),
    .din1(B_1_q0),
    .ce(1'b1),
    .dout(grp_fu_243_p2)
);

matrixmult_fmul_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmult_fmul_3cud_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_1_q1),
    .din1(B_1_q1),
    .ce(1'b1),
    .dout(grp_fu_249_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter25 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_reg_372 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_192 <= select_ln14_1_reg_387;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_192 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_181 <= add_ln7_fu_261_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_181 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_reg_203 <= j_fu_313_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_203 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln7_reg_372 <= icmp_ln7_fu_255_p2;
        icmp_ln7_reg_372_pp0_iter1_reg <= icmp_ln7_reg_372;
        select_ln14_1_reg_387_pp0_iter1_reg <= select_ln14_1_reg_387;
        select_ln14_reg_381_pp0_iter1_reg <= select_ln14_reg_381;
        tmp_4_reg_393_pp0_iter1_reg[3 : 1] <= tmp_4_reg_393[3 : 1];
        zext_ln14_1_reg_408_pp0_iter1_reg[2 : 0] <= zext_ln14_1_reg_408[2 : 0];
        zext_ln14_reg_398_pp0_iter1_reg[3 : 1] <= zext_ln14_reg_398[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln7_reg_372_pp0_iter10_reg <= icmp_ln7_reg_372_pp0_iter9_reg;
        icmp_ln7_reg_372_pp0_iter11_reg <= icmp_ln7_reg_372_pp0_iter10_reg;
        icmp_ln7_reg_372_pp0_iter12_reg <= icmp_ln7_reg_372_pp0_iter11_reg;
        icmp_ln7_reg_372_pp0_iter13_reg <= icmp_ln7_reg_372_pp0_iter12_reg;
        icmp_ln7_reg_372_pp0_iter14_reg <= icmp_ln7_reg_372_pp0_iter13_reg;
        icmp_ln7_reg_372_pp0_iter15_reg <= icmp_ln7_reg_372_pp0_iter14_reg;
        icmp_ln7_reg_372_pp0_iter16_reg <= icmp_ln7_reg_372_pp0_iter15_reg;
        icmp_ln7_reg_372_pp0_iter17_reg <= icmp_ln7_reg_372_pp0_iter16_reg;
        icmp_ln7_reg_372_pp0_iter18_reg <= icmp_ln7_reg_372_pp0_iter17_reg;
        icmp_ln7_reg_372_pp0_iter19_reg <= icmp_ln7_reg_372_pp0_iter18_reg;
        icmp_ln7_reg_372_pp0_iter20_reg <= icmp_ln7_reg_372_pp0_iter19_reg;
        icmp_ln7_reg_372_pp0_iter21_reg <= icmp_ln7_reg_372_pp0_iter20_reg;
        icmp_ln7_reg_372_pp0_iter22_reg <= icmp_ln7_reg_372_pp0_iter21_reg;
        icmp_ln7_reg_372_pp0_iter23_reg <= icmp_ln7_reg_372_pp0_iter22_reg;
        icmp_ln7_reg_372_pp0_iter24_reg <= icmp_ln7_reg_372_pp0_iter23_reg;
        icmp_ln7_reg_372_pp0_iter2_reg <= icmp_ln7_reg_372_pp0_iter1_reg;
        icmp_ln7_reg_372_pp0_iter3_reg <= icmp_ln7_reg_372_pp0_iter2_reg;
        icmp_ln7_reg_372_pp0_iter4_reg <= icmp_ln7_reg_372_pp0_iter3_reg;
        icmp_ln7_reg_372_pp0_iter5_reg <= icmp_ln7_reg_372_pp0_iter4_reg;
        icmp_ln7_reg_372_pp0_iter6_reg <= icmp_ln7_reg_372_pp0_iter5_reg;
        icmp_ln7_reg_372_pp0_iter7_reg <= icmp_ln7_reg_372_pp0_iter6_reg;
        icmp_ln7_reg_372_pp0_iter8_reg <= icmp_ln7_reg_372_pp0_iter7_reg;
        icmp_ln7_reg_372_pp0_iter9_reg <= icmp_ln7_reg_372_pp0_iter8_reg;
        select_ln14_1_reg_387_pp0_iter10_reg <= select_ln14_1_reg_387_pp0_iter9_reg;
        select_ln14_1_reg_387_pp0_iter11_reg <= select_ln14_1_reg_387_pp0_iter10_reg;
        select_ln14_1_reg_387_pp0_iter12_reg <= select_ln14_1_reg_387_pp0_iter11_reg;
        select_ln14_1_reg_387_pp0_iter13_reg <= select_ln14_1_reg_387_pp0_iter12_reg;
        select_ln14_1_reg_387_pp0_iter14_reg <= select_ln14_1_reg_387_pp0_iter13_reg;
        select_ln14_1_reg_387_pp0_iter15_reg <= select_ln14_1_reg_387_pp0_iter14_reg;
        select_ln14_1_reg_387_pp0_iter16_reg <= select_ln14_1_reg_387_pp0_iter15_reg;
        select_ln14_1_reg_387_pp0_iter17_reg <= select_ln14_1_reg_387_pp0_iter16_reg;
        select_ln14_1_reg_387_pp0_iter18_reg <= select_ln14_1_reg_387_pp0_iter17_reg;
        select_ln14_1_reg_387_pp0_iter19_reg <= select_ln14_1_reg_387_pp0_iter18_reg;
        select_ln14_1_reg_387_pp0_iter20_reg <= select_ln14_1_reg_387_pp0_iter19_reg;
        select_ln14_1_reg_387_pp0_iter21_reg <= select_ln14_1_reg_387_pp0_iter20_reg;
        select_ln14_1_reg_387_pp0_iter22_reg <= select_ln14_1_reg_387_pp0_iter21_reg;
        select_ln14_1_reg_387_pp0_iter23_reg <= select_ln14_1_reg_387_pp0_iter22_reg;
        select_ln14_1_reg_387_pp0_iter24_reg <= select_ln14_1_reg_387_pp0_iter23_reg;
        select_ln14_1_reg_387_pp0_iter2_reg <= select_ln14_1_reg_387_pp0_iter1_reg;
        select_ln14_1_reg_387_pp0_iter3_reg <= select_ln14_1_reg_387_pp0_iter2_reg;
        select_ln14_1_reg_387_pp0_iter4_reg <= select_ln14_1_reg_387_pp0_iter3_reg;
        select_ln14_1_reg_387_pp0_iter5_reg <= select_ln14_1_reg_387_pp0_iter4_reg;
        select_ln14_1_reg_387_pp0_iter6_reg <= select_ln14_1_reg_387_pp0_iter5_reg;
        select_ln14_1_reg_387_pp0_iter7_reg <= select_ln14_1_reg_387_pp0_iter6_reg;
        select_ln14_1_reg_387_pp0_iter8_reg <= select_ln14_1_reg_387_pp0_iter7_reg;
        select_ln14_1_reg_387_pp0_iter9_reg <= select_ln14_1_reg_387_pp0_iter8_reg;
        select_ln14_reg_381_pp0_iter10_reg <= select_ln14_reg_381_pp0_iter9_reg;
        select_ln14_reg_381_pp0_iter11_reg <= select_ln14_reg_381_pp0_iter10_reg;
        select_ln14_reg_381_pp0_iter12_reg <= select_ln14_reg_381_pp0_iter11_reg;
        select_ln14_reg_381_pp0_iter13_reg <= select_ln14_reg_381_pp0_iter12_reg;
        select_ln14_reg_381_pp0_iter14_reg <= select_ln14_reg_381_pp0_iter13_reg;
        select_ln14_reg_381_pp0_iter15_reg <= select_ln14_reg_381_pp0_iter14_reg;
        select_ln14_reg_381_pp0_iter16_reg <= select_ln14_reg_381_pp0_iter15_reg;
        select_ln14_reg_381_pp0_iter17_reg <= select_ln14_reg_381_pp0_iter16_reg;
        select_ln14_reg_381_pp0_iter18_reg <= select_ln14_reg_381_pp0_iter17_reg;
        select_ln14_reg_381_pp0_iter19_reg <= select_ln14_reg_381_pp0_iter18_reg;
        select_ln14_reg_381_pp0_iter20_reg <= select_ln14_reg_381_pp0_iter19_reg;
        select_ln14_reg_381_pp0_iter21_reg <= select_ln14_reg_381_pp0_iter20_reg;
        select_ln14_reg_381_pp0_iter22_reg <= select_ln14_reg_381_pp0_iter21_reg;
        select_ln14_reg_381_pp0_iter23_reg <= select_ln14_reg_381_pp0_iter22_reg;
        select_ln14_reg_381_pp0_iter24_reg <= select_ln14_reg_381_pp0_iter23_reg;
        select_ln14_reg_381_pp0_iter2_reg <= select_ln14_reg_381_pp0_iter1_reg;
        select_ln14_reg_381_pp0_iter3_reg <= select_ln14_reg_381_pp0_iter2_reg;
        select_ln14_reg_381_pp0_iter4_reg <= select_ln14_reg_381_pp0_iter3_reg;
        select_ln14_reg_381_pp0_iter5_reg <= select_ln14_reg_381_pp0_iter4_reg;
        select_ln14_reg_381_pp0_iter6_reg <= select_ln14_reg_381_pp0_iter5_reg;
        select_ln14_reg_381_pp0_iter7_reg <= select_ln14_reg_381_pp0_iter6_reg;
        select_ln14_reg_381_pp0_iter8_reg <= select_ln14_reg_381_pp0_iter7_reg;
        select_ln14_reg_381_pp0_iter9_reg <= select_ln14_reg_381_pp0_iter8_reg;
        tmp_4_reg_393_pp0_iter2_reg[3 : 1] <= tmp_4_reg_393_pp0_iter1_reg[3 : 1];
        tmp_4_reg_393_pp0_iter3_reg[3 : 1] <= tmp_4_reg_393_pp0_iter2_reg[3 : 1];
        tmp_4_reg_393_pp0_iter4_reg[3 : 1] <= tmp_4_reg_393_pp0_iter3_reg[3 : 1];
        tmp_5_reg_438_pp0_iter10_reg[3 : 1] <= tmp_5_reg_438_pp0_iter9_reg[3 : 1];
        tmp_5_reg_438_pp0_iter11_reg[3 : 1] <= tmp_5_reg_438_pp0_iter10_reg[3 : 1];
        tmp_5_reg_438_pp0_iter12_reg[3 : 1] <= tmp_5_reg_438_pp0_iter11_reg[3 : 1];
        tmp_5_reg_438_pp0_iter13_reg[3 : 1] <= tmp_5_reg_438_pp0_iter12_reg[3 : 1];
        tmp_5_reg_438_pp0_iter14_reg[3 : 1] <= tmp_5_reg_438_pp0_iter13_reg[3 : 1];
        tmp_5_reg_438_pp0_iter6_reg[3 : 1] <= tmp_5_reg_438[3 : 1];
        tmp_5_reg_438_pp0_iter7_reg[3 : 1] <= tmp_5_reg_438_pp0_iter6_reg[3 : 1];
        tmp_5_reg_438_pp0_iter8_reg[3 : 1] <= tmp_5_reg_438_pp0_iter7_reg[3 : 1];
        tmp_5_reg_438_pp0_iter9_reg[3 : 1] <= tmp_5_reg_438_pp0_iter8_reg[3 : 1];
        zext_ln14_1_reg_408_pp0_iter2_reg[2 : 0] <= zext_ln14_1_reg_408_pp0_iter1_reg[2 : 0];
        zext_ln14_1_reg_408_pp0_iter3_reg[2 : 0] <= zext_ln14_1_reg_408_pp0_iter2_reg[2 : 0];
        zext_ln14_1_reg_408_pp0_iter4_reg[2 : 0] <= zext_ln14_1_reg_408_pp0_iter3_reg[2 : 0];
        zext_ln14_1_reg_408_pp0_iter5_reg[2 : 0] <= zext_ln14_1_reg_408_pp0_iter4_reg[2 : 0];
        zext_ln14_1_reg_408_pp0_iter6_reg[2 : 0] <= zext_ln14_1_reg_408_pp0_iter5_reg[2 : 0];
        zext_ln14_1_reg_408_pp0_iter7_reg[2 : 0] <= zext_ln14_1_reg_408_pp0_iter6_reg[2 : 0];
        zext_ln14_1_reg_408_pp0_iter8_reg[2 : 0] <= zext_ln14_1_reg_408_pp0_iter7_reg[2 : 0];
        zext_ln14_1_reg_408_pp0_iter9_reg[2 : 0] <= zext_ln14_1_reg_408_pp0_iter8_reg[2 : 0];
        zext_ln14_4_reg_448_pp0_iter10_reg[3 : 0] <= zext_ln14_4_reg_448_pp0_iter9_reg[3 : 0];
        zext_ln14_4_reg_448_pp0_iter11_reg[3 : 0] <= zext_ln14_4_reg_448_pp0_iter10_reg[3 : 0];
        zext_ln14_4_reg_448_pp0_iter12_reg[3 : 0] <= zext_ln14_4_reg_448_pp0_iter11_reg[3 : 0];
        zext_ln14_4_reg_448_pp0_iter13_reg[3 : 0] <= zext_ln14_4_reg_448_pp0_iter12_reg[3 : 0];
        zext_ln14_4_reg_448_pp0_iter14_reg[3 : 0] <= zext_ln14_4_reg_448_pp0_iter13_reg[3 : 0];
        zext_ln14_4_reg_448_pp0_iter6_reg[3 : 0] <= zext_ln14_4_reg_448[3 : 0];
        zext_ln14_4_reg_448_pp0_iter7_reg[3 : 0] <= zext_ln14_4_reg_448_pp0_iter6_reg[3 : 0];
        zext_ln14_4_reg_448_pp0_iter8_reg[3 : 0] <= zext_ln14_4_reg_448_pp0_iter7_reg[3 : 0];
        zext_ln14_4_reg_448_pp0_iter9_reg[3 : 0] <= zext_ln14_4_reg_448_pp0_iter8_reg[3 : 0];
        zext_ln14_reg_398_pp0_iter2_reg[3 : 1] <= zext_ln14_reg_398_pp0_iter1_reg[3 : 1];
        zext_ln14_reg_398_pp0_iter3_reg[3 : 1] <= zext_ln14_reg_398_pp0_iter2_reg[3 : 1];
        zext_ln14_reg_398_pp0_iter4_reg[3 : 1] <= zext_ln14_reg_398_pp0_iter3_reg[3 : 1];
        zext_ln14_reg_398_pp0_iter5_reg[3 : 1] <= zext_ln14_reg_398_pp0_iter4_reg[3 : 1];
        zext_ln14_reg_398_pp0_iter6_reg[3 : 1] <= zext_ln14_reg_398_pp0_iter5_reg[3 : 1];
        zext_ln14_reg_398_pp0_iter7_reg[3 : 1] <= zext_ln14_reg_398_pp0_iter6_reg[3 : 1];
        zext_ln14_reg_398_pp0_iter8_reg[3 : 1] <= zext_ln14_reg_398_pp0_iter7_reg[3 : 1];
        zext_ln14_reg_398_pp0_iter9_reg[3 : 1] <= zext_ln14_reg_398_pp0_iter8_reg[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln14_1_reg_387 <= select_ln14_1_fu_287_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_255_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln14_reg_381 <= select_ln14_fu_279_p3;
        tmp_4_reg_393[3 : 1] <= tmp_4_fu_295_p3[3 : 1];
        zext_ln14_1_reg_408[2 : 0] <= zext_ln14_1_fu_308_p1[2 : 0];
        zext_ln14_reg_398[3 : 1] <= zext_ln14_fu_303_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_reg_372_pp0_iter13_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_1_reg_498 <= grp_fu_219_p2;
        tmp_2_reg_503 <= grp_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_reg_372_pp0_iter18_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_2_reg_528 <= grp_fu_223_p2;
        tmp_3_reg_533 <= grp_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_reg_372_pp0_iter23_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_3_reg_538 <= grp_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_reg_372_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_s_reg_468 <= grp_fu_214_p2;
        tmp_1_reg_473 <= grp_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_reg_372_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp1_reg_433 <= grp_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_reg_372_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_5_reg_438[3 : 1] <= tmp_5_fu_324_p3[3 : 1];
        zext_ln14_4_reg_448[3 : 0] <= zext_ln14_4_fu_342_p1[3 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_0_ce0 = 1'b1;
    end else begin
        A_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_0_ce1 = 1'b1;
    end else begin
        A_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_1_ce0 = 1'b1;
    end else begin
        A_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_1_ce1 = 1'b1;
    end else begin
        A_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_0_ce0 = 1'b1;
    end else begin
        B_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_0_ce1 = 1'b1;
    end else begin
        B_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_1_ce0 = 1'b1;
    end else begin
        B_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_1_ce1 = 1'b1;
    end else begin
        B_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln7_fu_255_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln7_reg_372 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_phi_fu_196_p4 = select_ln14_1_reg_387;
    end else begin
        ap_phi_mux_i_0_phi_fu_196_p4 = i_0_reg_192;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter25 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter25 == 1'b1) & (icmp_ln7_reg_372_pp0_iter24_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln7_fu_255_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter24 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter25 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter24 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter25 == 1'b1)) | ((icmp_ln7_fu_255_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_0_address0 = zext_ln14_fu_303_p1;

assign A_0_address1 = tmp_5_fu_324_p3;

assign A_1_address0 = zext_ln14_reg_398_pp0_iter9_reg;

assign A_1_address1 = tmp_5_reg_438_pp0_iter14_reg;

assign B_0_address0 = zext_ln14_1_fu_308_p1;

assign B_0_address1 = zext_ln14_4_fu_342_p1;

assign B_1_address0 = zext_ln14_1_reg_408_pp0_iter9_reg;

assign B_1_address1 = zext_ln14_4_reg_448_pp0_iter14_reg;

assign add_ln14_fu_336_p2 = (zext_ln14_3_fu_333_p1 + 4'd4);

assign add_ln16_fu_361_p2 = (zext_ln14_2_fu_358_p1 + zext_ln10_fu_354_p1);

assign add_ln7_fu_261_p2 = (indvar_flatten_reg_181 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_fu_267_p2 = (ap_phi_mux_i_0_phi_fu_196_p4 + 3'd1);

assign icmp_ln7_fu_255_p2 = ((indvar_flatten_reg_181 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_273_p2 = ((j_0_reg_203 == 3'd4) ? 1'b1 : 1'b0);

assign j_fu_313_p2 = (select_ln14_fu_279_p3 + 3'd1);

assign or_ln14_fu_319_p2 = (tmp_4_reg_393_pp0_iter4_reg | 4'd1);

assign res_address0 = zext_ln16_fu_367_p1;

assign res_d0 = sum_3_reg_538;

assign select_ln14_1_fu_287_p3 = ((icmp_ln9_fu_273_p2[0:0] === 1'b1) ? i_fu_267_p2 : ap_phi_mux_i_0_phi_fu_196_p4);

assign select_ln14_fu_279_p3 = ((icmp_ln9_fu_273_p2[0:0] === 1'b1) ? 3'd0 : j_0_reg_203);

assign tmp_4_fu_295_p3 = {{select_ln14_1_fu_287_p3}, {1'd0}};

assign tmp_5_fu_324_p3 = {{60'd0}, {or_ln14_fu_319_p2}};

assign tmp_6_fu_347_p3 = {{select_ln14_1_reg_387_pp0_iter24_reg}, {2'd0}};

assign zext_ln10_fu_354_p1 = tmp_6_fu_347_p3;

assign zext_ln14_1_fu_308_p1 = select_ln14_fu_279_p3;

assign zext_ln14_2_fu_358_p1 = select_ln14_reg_381_pp0_iter24_reg;

assign zext_ln14_3_fu_333_p1 = select_ln14_reg_381_pp0_iter4_reg;

assign zext_ln14_4_fu_342_p1 = add_ln14_fu_336_p2;

assign zext_ln14_fu_303_p1 = tmp_4_fu_295_p3;

assign zext_ln16_fu_367_p1 = add_ln16_fu_361_p2;

always @ (posedge ap_clk) begin
    tmp_4_reg_393[0] <= 1'b0;
    tmp_4_reg_393_pp0_iter1_reg[0] <= 1'b0;
    tmp_4_reg_393_pp0_iter2_reg[0] <= 1'b0;
    tmp_4_reg_393_pp0_iter3_reg[0] <= 1'b0;
    tmp_4_reg_393_pp0_iter4_reg[0] <= 1'b0;
    zext_ln14_reg_398[0] <= 1'b0;
    zext_ln14_reg_398[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_398_pp0_iter1_reg[0] <= 1'b0;
    zext_ln14_reg_398_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_398_pp0_iter2_reg[0] <= 1'b0;
    zext_ln14_reg_398_pp0_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_398_pp0_iter3_reg[0] <= 1'b0;
    zext_ln14_reg_398_pp0_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_398_pp0_iter4_reg[0] <= 1'b0;
    zext_ln14_reg_398_pp0_iter4_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_398_pp0_iter5_reg[0] <= 1'b0;
    zext_ln14_reg_398_pp0_iter5_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_398_pp0_iter6_reg[0] <= 1'b0;
    zext_ln14_reg_398_pp0_iter6_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_398_pp0_iter7_reg[0] <= 1'b0;
    zext_ln14_reg_398_pp0_iter7_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_398_pp0_iter8_reg[0] <= 1'b0;
    zext_ln14_reg_398_pp0_iter8_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_398_pp0_iter9_reg[0] <= 1'b0;
    zext_ln14_reg_398_pp0_iter9_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_1_reg_408[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_1_reg_408_pp0_iter1_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_1_reg_408_pp0_iter2_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_1_reg_408_pp0_iter3_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_1_reg_408_pp0_iter4_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_1_reg_408_pp0_iter5_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_1_reg_408_pp0_iter6_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_1_reg_408_pp0_iter7_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_1_reg_408_pp0_iter8_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_1_reg_408_pp0_iter9_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    tmp_5_reg_438[0] <= 1'b1;
    tmp_5_reg_438[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_5_reg_438_pp0_iter6_reg[0] <= 1'b1;
    tmp_5_reg_438_pp0_iter6_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_5_reg_438_pp0_iter7_reg[0] <= 1'b1;
    tmp_5_reg_438_pp0_iter7_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_5_reg_438_pp0_iter8_reg[0] <= 1'b1;
    tmp_5_reg_438_pp0_iter8_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_5_reg_438_pp0_iter9_reg[0] <= 1'b1;
    tmp_5_reg_438_pp0_iter9_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_5_reg_438_pp0_iter10_reg[0] <= 1'b1;
    tmp_5_reg_438_pp0_iter10_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_5_reg_438_pp0_iter11_reg[0] <= 1'b1;
    tmp_5_reg_438_pp0_iter11_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_5_reg_438_pp0_iter12_reg[0] <= 1'b1;
    tmp_5_reg_438_pp0_iter12_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_5_reg_438_pp0_iter13_reg[0] <= 1'b1;
    tmp_5_reg_438_pp0_iter13_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    tmp_5_reg_438_pp0_iter14_reg[0] <= 1'b1;
    tmp_5_reg_438_pp0_iter14_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_4_reg_448[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_4_reg_448_pp0_iter6_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_4_reg_448_pp0_iter7_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_4_reg_448_pp0_iter8_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_4_reg_448_pp0_iter9_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_4_reg_448_pp0_iter10_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_4_reg_448_pp0_iter11_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_4_reg_448_pp0_iter12_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_4_reg_448_pp0_iter13_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln14_4_reg_448_pp0_iter14_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //matrixmult
